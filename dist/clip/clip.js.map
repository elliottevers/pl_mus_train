{"version":3,"file":"clip.js","sourceRoot":"","sources":["../../src/clip/clip.ts"],"names":[],"mappings":"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","sourcesContent":["// import {note as n} from \"../note/note\";\n// import TreeModel = require(\"tree-model\");\n// import {live} from \"../live/live\";\n// import {message} from \"../message/messenger\";\n// import {log} from \"../log/logger\";\n// import {utils} from \"../utils/utils\";\n//\n// export namespace clip {\n//\n//     import Messenger = message.Messenger;\n//     import Logger = log.Logger;\n//     import ClipLive = live.ClipLive;\n//\n//     export class ClipVirtual implements ClipLive {\n//\n//     }\n//\n//     export class Clip implements ClipLive {\n//\n//         public clip_dao;\n//\n//         private notes: TreeModel.Node<n.Note>[];\n//\n//         private logger: Logger;\n//\n//         constructor(clip_dao) {\n//             this.clip_dao = clip_dao;\n//             this.logger = new Logger('max')\n//         }\n//\n//         public set_endpoints_loop(beat_start, beat_end) {\n//             if (beat_start >= this.clip_dao.get_loop_bracket_upper()) {\n//                 this.clip_dao.set_loop_bracket_upper(beat_end);\n//                 this.clip_dao.set_loop_bracket_lower(beat_start);\n//             } else {\n//                 this.clip_dao.set_loop_bracket_lower(beat_start);\n//                 this.clip_dao.set_loop_bracket_upper(beat_end);\n//             }\n//         }\n//\n//         public set_endpoint_markers(beat_start, beat_end) {\n//             if (beat_start >= this.clip_dao.get_end_marker()) {\n//                 this.clip_dao.set_clip_endpoint_upper(beat_end);\n//                 this.clip_dao.set_clip_endpoint_lower(beat_start);\n//             } else {\n//                 this.clip_dao.set_clip_endpoint_lower(beat_start);\n//                 this.clip_dao.set_clip_endpoint_upper(beat_end);\n//             }\n//         }\n//\n//         get_index_track(): number {\n//             return this.clip_dao.get_path().split(' ')[2]\n//         }\n//\n//         get_beat_start(): number {\n//             return this.clip_dao.beat_start\n//         }\n//\n//         get_beat_end(): number {\n//             return this.clip_dao.beat_end\n//         }\n//\n//         get_path(): string {\n//             return this.clip_dao.get_path();\n//         }\n//\n//         set_path_deferlow(key_route): void {\n//             this.clip_dao.set_path_deferlow(\n//                 key_route,\n//                 this.get_path()\n//             )\n//         }\n//\n//         get_num_measures(): number {\n//             return (this.get_end_marker() - this.get_start_marker()) / 4;\n//         }\n//\n//         get_end_marker(): number {\n//             return this.clip_dao.get_end_marker();\n//         }\n//\n//         get_start_marker(): number {\n//             return this.clip_dao.get_start_marker();\n//         }\n//\n//         // TODO: annotations\n//         load_notes_within_loop_brackets(): void {\n//             this.notes = this.get_notes(\n//                 this.get_loop_bracket_lower(),\n//                 0,\n//                 this.get_loop_bracket_upper(),\n//                 128\n//             )\n//         }\n//\n//         // TODO: annotations\n//         load_notes_within_markers(): void {\n//             this.notes = this.get_notes(\n//                 this.get_start_marker(),\n//                 0,\n//                 this.get_end_marker(),\n//                 128\n//             )\n//         }\n//\n//         // TODO: annotations\n//         get_pitch_max(interval?): number {\n//             let pitch_max = 0;\n//\n//             let interval_search = interval ? interval : [this.get_loop_bracket_lower(), this.get_loop_bracket_upper()];\n//\n//             for (let node of this.get_notes(interval_search[0], 0, interval_search[1], 128)) {\n//                 if (node.model.note.pitch > pitch_max) {\n//                     pitch_max = node.model.note.pitch;\n//                 }\n//             }\n//\n//             return pitch_max;\n//         }\n//\n//         // TODO: annotations\n//         get_pitch_min(interval?): number {\n//             let pitch_min = 128;\n//\n//             let interval_search = interval ? interval : [this.get_loop_bracket_lower(), this.get_loop_bracket_upper()];\n//\n//             for (let node of this.get_notes(interval_search[0], 0, interval_search[1], 128)) {\n//                 if (node.model.note.pitch < pitch_min) {\n//                     pitch_min = node.model.note.pitch;\n//                 }\n//             }\n//\n//             return pitch_min;\n//         }\n//\n//         get_ambitus(interval?): number[] {\n//             return [this.get_pitch_min(interval), this.get_pitch_max(interval)];\n//         }\n//\n//         set_loop_bracket_lower(beat: number): void {\n//             this.clip_dao.set_loop_bracket_lower(beat);\n//         }\n//\n//         set_loop_bracket_upper(beat: number): void {\n//             this.clip_dao.set_loop_bracket_upper(beat);\n//         }\n//\n//         get_loop_bracket_lower(): number {\n//             return this.clip_dao.get_loop_bracket_lower()[0];\n//         }\n//\n//         get_loop_bracket_upper(): number {\n//             return this.clip_dao.get_loop_bracket_upper()[0];\n//         }\n//\n//         set_clip_endpoint_lower(beat: number): void {\n//             this.clip_dao.set_clip_endpoint_lower(beat);\n//         }\n//\n//         set_clip_endpoint_upper(beat: number): void {\n//             this.clip_dao.set_clip_endpoint_upper(beat);\n//         }\n//\n//         fire(): void {\n//             this.clip_dao.fire();\n//         }\n//\n//         stop(): void {\n//             this.clip_dao.stop();\n//         }\n//\n//         get_notes_within_markers(use_cache?: boolean): TreeModel.Node<n.Note>[] {\n//             if (!this.notes || !use_cache) {\n//                 this.load_notes_within_markers();\n//             }\n//             return this.notes;\n//         }\n//\n//         get_notes_within_loop_brackets(use_cache?: boolean): TreeModel.Node<n.Note>[] {\n//             if (!this.notes || !use_cache) {\n//                 this.load_notes_within_loop_brackets();\n//             }\n//             return this.notes;\n//         }\n//\n//         // TODO: only works virtual clips currently\n//         public append(note: TreeModel.Node<n.Note>) {\n//             this.clip_dao.append(note);\n//         }\n//\n//         public get_notes(beat_start: number, pitch_midi_min: number, beat_duration: number, pitch_midi_max: number): TreeModel.Node<n.Note>[] {\n//             return Clip._parse_notes(\n//                 this._get_notes(\n//                     beat_start,\n//                     pitch_midi_min,\n//                     beat_duration,\n//                     pitch_midi_max\n//                 )\n//             );\n//         }\n//\n//         public set_notes(notes: TreeModel.Node<n.Note>[]): void {\n//             this.clip_dao.set_notes(notes);\n//         }\n//\n//         // TODO: *actually* make private\n//         public _get_notes(beat_start: number, pitch_midi_min: number, beat_end: number, pitch_midi_max: number): string[] {\n//             return this.clip_dao.get_notes(\n//                 beat_start,\n//                 pitch_midi_min,\n//                 beat_end,\n//                 pitch_midi_max\n//             )\n//         }\n//\n//         public remove_notes(beat_start: number, pitch_midi_min: number, beat_duration: number, pitch_midi_max: number): void {\n//             let epsilon = 1/(48 * 2);\n//             this.clip_dao.remove_notes(\n//                 beat_start - epsilon,\n//                 pitch_midi_min,\n//                 beat_duration,\n//                 pitch_midi_max\n//             )\n//         }\n//\n//         public static parse_note_messages(messages: string[]) {\n//\n//             let notes: TreeModel.Node<n.Note>[] = [];\n//\n//             for (let i_mess in messages) {\n//                 if (i_mess == String(0)) {\n//                     continue\n//                 }\n//\n//                 if (i_mess == String(messages.length - 1)) {\n//                     continue\n//                 }\n//\n//                 let tree: TreeModel = new TreeModel();\n//\n//                 let splitted = messages[i_mess].split(' ');\n//\n//                 notes.push(\n//                     tree.parse(\n//                         {\n//                             id: -1, // TODO: hashing scheme for clip id and beat start\n//                             note: new n.Note(\n//                                 Number(splitted[0]),\n//                                 Number(splitted[1]),\n//                                 Number(splitted[2]),\n//                                 Number(splitted[3]),\n//                                 Number(splitted[4])\n//                             ),\n//                             children: [\n//\n//                             ]\n//                         }\n//                     )\n//                 )\n//             }\n//\n//             return notes\n//         }\n//\n//         // TODO: remove underscore prefix\n//         public static _parse_notes(notes: string[]): TreeModel.Node<n.Note>[] {\n//             let data: any = [];\n//             let notes_parsed = [];\n//\n//             let pitch;\n//             let beat_start;\n//             let beats_duration;\n//             let velocity;\n//             let b_muted;\n//\n//             let index_num_expected_notes = null;\n//\n//             for (var i = 0; i < notes.length; i++) {\n//\n//                 if (notes[i] === 'done') {\n//                     continue;\n//                 }\n//\n//                 if (notes[i] === 'note') {\n//                     data = [];\n//                     continue;\n//                 }\n//\n//                 if (notes[i] === 'notes') {\n//                     data = [];\n//                     continue;\n//                 }\n//\n//                 if (i === index_num_expected_notes) {\n//                     data = [];\n//                     continue;\n//                 }\n//\n//                 data.push(notes[i]);\n//\n//                 if (data.length === 5) {\n//\n//                     pitch = data[0];\n//                     beat_start = data[1];\n//                     beats_duration = data[2];\n//                     velocity = data[3];\n//                     b_muted = data[4];\n//\n//                     let tree: TreeModel = new TreeModel();\n//\n//                     notes_parsed.push(\n//                         tree.parse(\n//                             {\n//                                 id: -1, // TODO: hashing scheme for clip id and beat start\n//                                 note: new n.Note(\n//                                     pitch,\n//                                     beat_start,\n//                                     beats_duration,\n//                                     velocity,\n//                                     b_muted\n//                                 ),\n//                                 children: [\n//\n//                                 ]\n//                             }\n//                         )\n//                     );\n//                 }\n//             }\n//\n//             function compare(note_former,note_latter) {\n//                 if (note_former.model.note.beat_start < note_latter.model.note.beat_start)\n//                     return -1;\n//                 if (note_former.model.note.beat_start > note_latter.model.note.beat_start)\n//                     return 1;\n//                 return 0;\n//             }\n//\n//             notes_parsed.sort(compare);\n//\n//             // TODO: fail gracefully\n//             // if (notes_parsed.length !== num_expected_notes) {\n//             //     throw \"notes retrieved from clip less than expected\"\n//             // }\n//\n//             return notes_parsed;\n//         }\n//     }\n//\n//     export class ClipDao {\n//\n//         private clip_live;\n//         private messenger: Messenger;\n//         private deferlow: boolean;\n//         private key_route: string;\n//         private env: string;\n//         private notes_cached: string[];\n//\n//         constructor(clip_live: live.iLiveApiJs, messenger, deferlow?: boolean, key_route?: string, env?: string) {\n//             this.clip_live = clip_live;\n//             this.messenger = messenger;\n//             if (deferlow && !key_route) {\n//                 throw new Error('key route not specified when using deferlow');\n//             }\n//             this.deferlow = deferlow;\n//             this.key_route = key_route;\n//             this.env = env;\n//         }\n//\n//         set_path_deferlow(key_route_override: string, path_live: string): void {\n//             let mess: any[] = [key_route_override];\n//\n//             for (let word of utils.PathLive.to_message(path_live)) {\n//                 mess.push(word)\n//             }\n//\n//             this.messenger.message(mess)\n//         }\n//\n//         // TODO: check if these actually return arrays\n//         get_end_marker(): number {\n//             return this.clip_live.get('end_marker')[0];\n//         }\n//\n//         // TODO: check if these actually return arrays\n//         get_start_marker(): number {\n//             return this.clip_live.get('start_marker')[0];\n//         }\n//\n//         get_path(): string {\n//             return this.clip_live.get_path();\n//         }\n//\n//         set_loop_bracket_lower(beat: number) {\n//             if (this.deferlow) {\n//                 this.messenger.message([this.key_route, \"set\", \"loop_start\", beat])\n//             } else {\n//                 this.clip_live.set('loop_start', beat);\n//             }\n//         }\n//\n//         set_loop_bracket_upper(beat: number) {\n//             if (this.deferlow) {\n//                 this.messenger.message([this.key_route, \"set\", \"loop_end\", beat]);\n//             } else {\n//                 this.clip_live.set('loop_end', beat);\n//             }\n//         }\n//\n//         get_loop_bracket_lower(): number {\n//             return this.clip_live.get('loop_start');\n//         }\n//\n//         get_loop_bracket_upper(): number {\n//             return this.clip_live.get('loop_end');\n//         }\n//\n//         set_clip_endpoint_lower(beat: number) {\n//             if (this.deferlow) {\n//                 this.messenger.message([this.key_route, \"set\", \"start_marker\", beat]);\n//             } else {\n//                 this.clip_live.set('start_marker', beat);\n//             }\n//         }\n//\n//         set_clip_endpoint_upper(beat: number) {\n//             if (this.deferlow) {\n//                 this.messenger.message([this.key_route, \"set\", \"end_marker\", beat]);\n//             } else {\n//                 this.clip_live.set('end_marker', beat);\n//             }\n//         }\n//\n//         fire(): void {\n//             if (this.deferlow) {\n//                 this.messenger.message([this.key_route, \"call\", \"fire\"]);\n//             } else {\n//                 this.clip_live.call('fire');\n//             }\n//         };\n//\n//         stop(): void {\n//             if (this.deferlow) {\n//                 this.messenger.message([this.key_route, \"call\", \"stop\"]);\n//             } else {\n//                 this.clip_live.call('stop');\n//             }\n//         };\n//\n//         get_notes(beat_start, pitch_midi_min, beat_end, pitch_midi_max): string[] {\n//             if (this.env === 'node_for_max') {\n//                 return this.notes_cached\n//             } else {\n//                 return this.clip_live.call(\n//                     'get_notes',\n//                     beat_start,\n//                     pitch_midi_min,\n//                     beat_end,\n//                     pitch_midi_max\n//                 );\n//             }\n//         };\n//\n//         remove_notes(beat_start, pitch_midi_min, beat_end, pitch_midi_max): void {\n//             if (this.deferlow) {\n//                 this.messenger.message(\n//                     [\n//                         this.key_route,\n//                         \"call\",\n//                         \"remove_notes\",\n//                         beat_start,\n//                         pitch_midi_min,\n//                         beat_end,\n//                         pitch_midi_max\n//                     ]\n//                 );\n//             } else {\n//                 this.clip_live.call(\n//                     'remove_notes',\n//                     beat_start,\n//                     pitch_midi_min,\n//                     beat_end,\n//                     pitch_midi_max\n//                 );\n//             }\n//         };\n//\n//         set_notes(notes: TreeModel.Node<n.Note>[]): void {\n//             if (this.env === 'node_for_max') {\n//                 let notes_cached = [];\n//                 notes_cached.push('notes');\n//                 notes_cached.push(notes.length.toString());\n//                 for (let note of notes) {\n//                     notes_cached.push(note.model.note.pitch.toString());\n//                     notes_cached.push(note.model.note.beat_start.toString());\n//                     notes_cached.push(note.model.note.beats_duration.toString());\n//                     notes_cached.push(note.model.note.velocity.toString());\n//                     notes_cached.push(note.model.note.muted.toString());\n//                 }\n//                 notes_cached.push('done');\n//             } else if (this.deferlow) {\n//                 this.messenger.message([this.key_route, 'call', 'set_notes']);\n//                 this.messenger.message([this.key_route, 'call', 'notes', notes.length]);\n//                 for (let node of notes) {\n//                     this.messenger.message([\n//                         this.key_route,\n//                         'call',\n//                         'note',\n//                         node.model.note.pitch,\n//                         node.model.note.beat_start.toFixed(4),\n//                         node.model.note.beats_duration.toFixed(4),\n//                         node.model.note.velocity,\n//                         node.model.note.muted\n//                     ]);\n//                 }\n//                 this.messenger.message([this.key_route, 'call', 'done'])\n//             } else {\n//                 this.clip_live.call('set_notes');\n//                 this.clip_live.call('notes', notes.length);\n//                 for (let node of notes) {\n//                     this.clip_live.call(\n//                         \"note\",\n//                         node.model.note.pitch,\n//                         node.model.note.beat_start.toFixed(4),\n//                         node.model.note.beats_duration.toFixed(4),\n//                         node.model.note.velocity,\n//                         node.model.note.muted\n//                     );\n//                 }\n//                 this.clip_live.call(\"done\")\n//             }\n//         }\n//     }\n// }"]}