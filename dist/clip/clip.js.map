{"version":3,"file":"clip.js","sourceRoot":"","sources":["../../src/clip/clip.ts"],"names":[],"mappings":"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","sourcesContent":["// autowatch = 1;\n\n// var l = require('./logger.js');\n// var n = require('./note.js');\n// var tr = require('./tree.js');\n// var cd = require('./clip_dao.js');\n\nimport {note} from \"../note/note\";\nimport TreeModel = require(\"tree-model\");\n\nexport namespace clip {\n\n    export class Clip {\n\n        private clip_dao;\n\n        private notes: TreeModel.Node<note.Note>[];\n\n        constructor(clip_dao) {\n            this.clip_dao = clip_dao;\n        }\n\n        get_num_measures(): number {\n            return this.get_end_marker() / 4;\n        }\n\n        get_end_marker(): number {\n            return this.clip_dao.get_end_marker();\n        }\n\n        // TODO: annotations\n        load_notes(): void {\n            this.notes = this.get_notes(\n                0,\n                0,\n                this.get_end_marker(),\n                128\n            );\n        }\n\n        // TODO: annotations\n        get_pitch_max(): number {\n            let pitch_max = 0;\n\n            for (let note in this.notes) {\n                if (note.id.pitch > pitch_max) {\n                    pitch_max = note.id.pitch;\n                }\n            }\n\n            return pitch_max;\n        }\n\n        // TODO: annotations\n        get_pitch_min(): number {\n            let pitch_min = 128;\n\n            for (let note in this.notes) {\n                if (note.id.pitch < pitch_min) {\n                    pitch_min = note.id.pitch;\n                }\n            }\n\n            return pitch_min;\n        }\n\n        get_ambitus(): number[] {\n            return [this.get_pitch_min(), this.get_pitch_max()];\n        }\n\n        set_loop_bracket_lower(beat: number): void {\n            this.clip_dao.set_loop_bracket_lower(beat);\n        }\n\n        set_loop_bracket_upper(beat: number): void {\n            this.clip_dao.set_loop_bracket_upper(beat);\n        }\n\n        set_clip_endpoint_lower(beat: number): void {\n            this.clip_dao.set_clip_endpoint_lower(beat);\n        }\n\n        set_clip_endpoint_upper(beat: number): void {\n            this.clip_dao.set_clip_endpoint_upper(beat);\n        }\n\n        fire(): void {\n            this.clip_dao.fire();\n        }\n\n        stop(): void {\n            this.clip_dao.stop();\n        }\n\n        // TODO: return list of tree nodes\n        get_notes(beat_start: number, pitch_midi_min: number, beat_end: number, pitch_midi_max: number): TreeModel.Node<Node>[] {\n            if (this.notes === null) {\n                // let beat_start, pitch_midi_min, beat_end, pitch_midi_max;\n                // beat_start = 0;\n                // beat_end = this.get_end_marker();\n                // pitch_midi_min = 0;\n                // pitch_midi_max = 128;\n                return Clip._parse_notes(\n                    this._get_notes(\n                        beat_start,\n                        pitch_midi_min,\n                        beat_end,\n                        pitch_midi_max\n                    )\n                );\n            } else {\n                return this.notes;\n            }\n        }\n\n        private _get_notes(beat_start: number, pitch_midi_min: number, beat_end: number, pitch_midi_max: number): string[] {\n            return this.clip_dao.get_notes(\n                beat_start,\n                pitch_midi_min,\n                beat_end,\n                pitch_midi_max\n            )\n        }\n\n        // TODO: return list of tree nodes\n        private static _parse_notes(notes: string[]): TreeModel.Node<note.Note>[] {\n            let data: any = [];\n            let notes_parsed = [];\n\n            let pitch;\n            let beat_start;\n            let beats_duration;\n            let velocity;\n            let b_muted;\n\n            let index_num_expected_notes = null;\n\n            for (var i = 0; i < notes.length; i++) {\n\n                if (notes[i] === 'done') {\n                    continue;\n                }\n\n                if (notes[i] === 'note') {\n                    data = [];\n                    continue;\n                }\n\n                if (notes[i] === 'notes') {\n                    data = [];\n                    continue;\n                }\n\n                if (i === index_num_expected_notes) {\n                    data = [];\n                    continue;\n                }\n\n                data.push(notes[i]);\n\n                if (data.length === 5) {\n\n                    pitch = data[0];\n                    beat_start = data[1];\n                    beats_duration = data[2];\n                    velocity = data[3];\n                    b_muted = data[4];\n\n                    let tree: TreeModel = new TreeModel();\n\n                    notes_parsed.push(\n                        tree.parse(\n                            {\n                                id: new Note(\n                                    pitch,\n                                    beat_start,\n                                    beats_duration,\n                                    velocity,\n                                    b_muted\n                                ),\n                                children: [\n\n                                ]\n                            }\n                        )\n                    );\n                }\n            }\n\n            function compare(note_former,note_latter) {\n                if (note_former.data.beat_start < note_latter.data.beat_start)\n                    return -1;\n                if (note_former.data.beat_start > note_latter.data.beat_start)\n                    return 1;\n                return 0;\n            }\n\n            notes_parsed.sort(compare);\n\n            // TODO: fail gracefully\n            // if (notes_parsed.length !== num_expected_notes) {\n            //     throw \"notes retrieved from clip less than expected\"\n            // }\n\n            // l.log(notes_parsed);\n            return notes_parsed;\n        }\n\n    }\n}"]}