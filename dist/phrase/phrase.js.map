{"version":3,"file":"phrase.js","sourceRoot":"","sources":["../../src/phrase/phrase.ts"],"names":[],"mappings":";;AAAA,gCAAmC;AAInC,8BAA8B;AAC9B,IAAiB,MAAM,CAmEtB;AAnED,WAAiB,MAAM;IACnB;QAOI,gBAAY,UAAkB,EAAE,QAAgB,EAAE,IAAiB;YAC/D,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAC7B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC9B,CAAC;QAEM,kCAAiB,GAAxB,UAAyB,KAAkC,EAAE,iBAAiB;YAC1E,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,CACxC,KAAK,EACL,iBAAiB,CACpB,CAAC;QACN,CAAC;QAEM,mCAAkB,GAAzB;YACI,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC5C,CAAC;QAED,sCAAsC;QACtC,2EAA2E;QACpE,2BAAU,GAAjB,UAAkB,iBAA0B;YACxC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE,iBAAiB,CAAC,CAAC;QACpF,CAAC;QAEL,aAAC;IAAD,CAAC,AA/BD,IA+BC;IA/BY,aAAM,SA+BlB,CAAA;IAED;QAAA;QAgCA,CAAC;QA1BU,gCAAO,GAAd;YACI,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;gBACb,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aAC/B;iBAAM;gBACH,OAAO,IAAI,CAAC;aACf;QACL,CAAC;QAED,mCAAmC;QAC5B,6BAAI,GAAX;YACI,IAAI,eAAe,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAExD,IAAI,CAAC,CAAC,IAAI,eAAe,CAAC;YAE1B,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;gBAC9B,OAAO;oBACH,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;oBAC3B,IAAI,EAAE,KAAK;iBACd,CAAA;aACJ;iBAAM;gBACH,OAAO;oBACH,KAAK,EAAE,IAAI;oBACX,IAAI,EAAE,IAAI;iBACb,CAAA;aACJ;QACL,CAAC;QACL,qBAAC;IAAD,CAAC,AAhCD,IAgCC;IAhCY,qBAAc,iBAgC1B,CAAA;AACL,CAAC,EAnEgB,MAAM,GAAN,cAAM,KAAN,cAAM,QAmEtB","sourcesContent":["import n = require('../note/note');\nimport c = require('../clip/clip');\nimport TreeModel = require(\"tree-model\");\n\n// TODO: use namespaces better\nexport namespace phrase {\n    export class Phrase {\n\n        beat_start: number;\n        beat_end: number;\n        clip: c.clip.Clip;\n        note_iterator: n.note.NoteIterator;\n\n        constructor(beat_start: number, beat_end: number, clip: c.clip.Clip) {\n            this.beat_start = beat_start;\n            this.beat_end = beat_end;\n            this.clip = clip;\n            this.note_iterator = null;\n        }\n\n        public set_note_iterator(notes: TreeModel.Node<n.note.Note>, direction_forward): void {\n            this.note_iterator = new n.note.NoteIterator(\n                notes,\n                direction_forward\n            );\n        }\n\n        public get_interval_beats(): number[] {\n            return [this.beat_start, this.beat_end];\n        }\n\n        // TODO: make 'direction' a type alias\n        // TODO: why is this referencing an non-existant method? Have we regressed?\n        public load_notes(direction_forward: boolean) {\n            this.set_note_iterator(this._parse_notes(this._get_notes()), direction_forward);\n        }\n\n    }\n\n    export class PhraseIterator {\n        private phrases: Phrase[];\n        private clip: c.clip.Clip;\n        public direction_forward: boolean;\n        private i: number;\n\n        public current(): Phrase {\n            if (this.i > -1) {\n                return this.phrases[this.i];\n            } else {\n                return null;\n            }\n        }\n\n        // TODO: figure out how to annotate\n        public next() {\n            let value_increment = (this.direction_forward) ? 1 : -1;\n\n            this.i += value_increment;\n\n            if (this.i < this.phrases.length) {\n                return {\n                    value: this.phrases[this.i],\n                    done: false\n                }\n            } else {\n                return {\n                    value: null,\n                    done: true\n                }\n            }\n        }\n    }\n}"]}