{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils/utils.ts"],"names":[],"mappings":";;AAAA,IAAiB,KAAK,CAkDrB;AAlDD,WAAiB,KAAK;IAElB;QAAA;QA2BA,CAAC;QAzBG,sBAAsB;QACR,kBAAS,GAAvB,UAAwB,SAAiB;YACrC,IAAI,OAAO,GAAG,EAAE,CAAC;YAEjB,KAAiB,UAAoB,EAApB,KAAA,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,EAApB,cAAoB,EAApB,IAAoB,EAAE;gBAAlC,IAAI,IAAI,SAAA;gBACT,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;gBAEtC,IAAI,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE;oBACzB,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;iBACzB;qBAAM;oBACH,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAA;iBACjC;aACJ;YAED,OAAO,OAAO,CAAA;QAClB,CAAC;QAEa,mBAAU,GAAxB,UAAyB,SAAiB;YACtC,OAAO,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,CAAA;QACxC,CAAC;QAED,uBAAuB;QACT,kBAAS,GAAvB,UAAwB,gBAA0B;YAC9C,OAAO,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrE,CAAC;QACL,eAAC;IAAD,CAAC,AA3BD,IA2BC;IA3BY,cAAQ,WA2BpB,CAAA;IAEU,eAAS,GAAG,UAAC,GAAG,EAAE,MAAM;QAC/B,OAAO,CAAC,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,CAAA;IAC7C,CAAC,CAAC;IAES,kBAAY,GAAG,UAAC,GAAG,EAAE,MAAM;QAClC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,GAAC,MAAM,CAAC,CAAA;IACjC,CAAC,CAAC;IAES,qCAA+B,GAAG,UAAC,gBAAgB;QAC1D,4BAA4B;QAE5B,gBAAgB,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,YAAY,CAAC;QAE7D,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAE9B,IAAI,SAAS,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAE3C,OAAO,SAAS,CAAC;IACrB,CAAC,CAAC;AACN,CAAC,EAlDgB,KAAK,GAAL,aAAK,KAAL,aAAK,QAkDrB","sourcesContent":["export namespace utils {\n\n    export class PathLive  {\n\n        // pre-sending message\n        public static to_vector(path_live: string) {\n            let message = [];\n\n            for (let word of path_live.split(' ')) {\n                let cleansed = word.replace(/\"/g, \"\");\n\n                if (isNaN(Number(cleansed))) {\n                    message.push(cleansed)\n                } else {\n                    message.push(Number(cleansed))\n                }\n            }\n\n            return message\n        }\n\n        public static to_message(path_live: string) {\n            return PathLive.to_vector(path_live)\n        }\n\n        // parsing sent message\n        public static to_string(vector_path_live: string[]) {\n            return PathLive.to_message(vector_path_live.join(' ')).join(' ');\n        }\n    }\n\n    export let remainder = (top, bottom) => {\n        return ((top % bottom) + bottom) % bottom\n    };\n\n    export let division_int = (top, bottom) => {\n        return Math.floor(top/bottom)\n    };\n\n    export let path_clip_from_list_path_device = (list_path_device) => {\n        // list_path_device.shift();\n\n        list_path_device[list_path_device.length - 2] = 'clip_slots';\n\n        list_path_device.push('clip');\n\n        let path_clip = list_path_device.join(' ');\n\n        return path_clip;\n    };\n}\n"]}