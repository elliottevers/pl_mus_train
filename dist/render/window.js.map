{"version":3,"file":"window.js","sourceRoot":"","sources":["../../src/render/window.ts"],"names":[],"mappings":"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","sourcesContent":["import TreeModel = require(\"tree-model\");\nimport {message, message as m} from \"../message/messenger\"\nimport {clip, clip as c} from \"../clip/clip\";\nimport {note as n} from \"../note/note\";\nimport {live} from \"../live/live\";\nimport * as _ from \"lodash\";\nimport {log} from \"../log/logger\";\nimport {history} from \"../history/history\";\n// import {struct} from \"../train/struct\";\n// import {parse} from \"../parse/parse\";\nimport {trainer} from \"../train/trainer\";\nimport {parse} from \"../parse/parse\";\nimport {segment} from \"../segment/segment\";\nimport {algorithm} from \"../train/algorithm\";\nimport {iterate} from \"../train/iterate\";\n\nexport namespace window {\n\n    import LiveClipVirtual = live.LiveClipVirtual;\n    import Logger = log.Logger;\n    import HistoryUserInput = history.HistoryUserInput;\n    // import ParseTree = parse.ParseTree;\n    import Messenger = message.Messenger;\n    // import MatrixIterator = trainer.MatrixIterator;\n    // import ParseTree = parse.ParseTree;\n    import Segment = segment.Segment;\n    import Clip = clip.Clip;\n    import Algorithm = algorithm.Algorithm;\n    import MatrixIterator = iterate.MatrixIterator;\n\n    const red = [255, 0, 0];\n    const black = [0, 0, 0];\n    const region_yellow = [254, 254, 10];\n    const region_green = [33, 354, 6];\n    const region_red = [251, 1, 6];\n\n    interface Temporal {\n        get_message_render_region_past(interval_current);\n        get_message_render_region_present(interval_current);\n        get_message_render_region_future(interval_current);\n    }\n\n    export abstract class Window {\n        list_clips: Clip[];\n        height: number;\n        width: number;\n        messenger: Messenger;\n        length_beats: number;\n\n        protected constructor(height, width, messenger) {\n            this.height = height;\n            this.width = width;\n            this.messenger = messenger;\n        }\n\n        public clear() {\n            let msg_clear = [\"clear\"];\n            this.messenger.message(msg_clear);\n        }\n\n        // because it's a *list* of clips\n        public static coord_to_index_clip(coord): number {\n            return coord[0] + 1  // we prepend the root to the list\n        }\n\n        // TODO: this won't work for a parse tree\n        // public initialize_clips_matrix(segments: Segment[]) {\n        //     for (let i_row in this.matrix_clips) {\n        //         for (let i_col in this.matrix_clips[Number(i_row)]) {\n        //             let segment = segments[Number(i_col)];\n        //             let clip_dao_virtual = new LiveClipVirtual([]);\n        //             clip_dao_virtual.beat_start = segment.beat_start;\n        //             clip_dao_virtual.beat_end = segment.beat_end;\n        //             this.matrix_clips[Number(i_row)][Number(i_col)] = new c.Clip(clip_dao_virtual);\n        //         }\n        //     }\n        // }\n\n        public initialize_clips(algorithm: Algorithm, segments: Segment[]) {\n            let list_clips = [];\n            let depth = algorithm.get_depth();\n            let beat_start_song = segments[0].beat_start;\n            let beat_end_song = segments[segments.length - 1].beat_end;\n            for (let i in _.range(0, depth + 1)) {\n                let clip_dao_virtual = new LiveClipVirtual([]);\n                clip_dao_virtual.beat_start = beat_start_song;\n                clip_dao_virtual.beat_end = beat_end_song;\n                let clip_virtual = new c.Clip(clip_dao_virtual);\n                list_clips.push(clip_virtual)\n            }\n            this.list_clips = list_clips;\n        }\n\n        public set_length_beats(beats) {\n            this.length_beats = beats;\n        }\n\n        // public add_note_to_clip(note_to_add_to_clip, coord_current) {\n        //     this.matrix_clips[coord_current[0]][coord_current[1]].append(note_to_add_to_clip);\n        // }\n\n        public add_notes_to_clip(notes_to_add_to_clip, coord_current) {\n            let index_clip = Window.coord_to_index_clip(coord_current);\n            for (let note of notes_to_add_to_clip) {\n                this.list_clips[index_clip].append(note);\n            }\n        }\n\n        add_note_to_clip_root(note) {\n            this.list_clips[0].set_notes([note])\n        }\n\n        // public add(notes: TreeModel.Node<n.Note>[], coord_matrix_clip: number[], segment: Segment) {\n        //     let clip_dao_virtual = new LiveClipVirtual(notes);\n        //\n        //     clip_dao_virtual.beat_start = segment.beat_start;\n        //\n        //     clip_dao_virtual.beat_end = segment.beat_end;\n        //\n        //     let clip_virtual = new c.Clip(clip_dao_virtual);\n        //\n        //     this.matrix_clips[coord_matrix_clip[0]][coord_matrix_clip[1]] = clip_virtual;\n        // }\n\n        get_messages_render_clip(coord: number[]) {\n            let index_clip = Window.coord_to_index_clip(coord);\n            let clip_virtual = this.list_clips[index_clip];\n            let quadruplets = [];\n            for (let node of clip_virtual.get_notes_within_loop_brackets()) {\n                quadruplets.push(this.get_position_quadruplet(node, coord));\n            }\n            return quadruplets.map(function (tuplet) {\n                let message = <any>[\"paintrect\"].concat(tuplet);\n                message = message.concat(black);\n                return message;\n            })\n        };\n\n        get_position_quadruplet(node: TreeModel.Node<n.Note>, coord_clip: number[]) {\n            var dist_from_left_beat_start, dist_from_top_note_top, dist_from_left_beat_end, dist_from_top_note_bottom;\n\n            dist_from_left_beat_start = this.get_dist_from_left(node.model.note.beat_start);\n            dist_from_left_beat_end = this.get_dist_from_left(node.model.note.beat_start + node.model.note.beats_duration);\n            dist_from_top_note_top = this.get_dist_from_top(node.model.note.pitch, coord_clip);\n            dist_from_top_note_bottom = this.get_dist_from_top(node.model.note.pitch - 1, coord_clip);\n\n            return [dist_from_left_beat_start, dist_from_top_note_top, dist_from_left_beat_end, dist_from_top_note_bottom]\n        };\n\n        // render_tree(): void {\n        //     var messages = this.get_messages_render_tree();\n        //     for (var i=0; i < messages.length; i++) {\n        //         this.messenger.message(\n        //             messages[i]\n        //         )\n        //     }\n        // };\n\n        get_dist_from_top(pitch: number, coord: number[]): number {\n            // var clip = this.clips[index_clip];\n            let index_clip = Window.coord_to_index_clip(coord);\n            var clip = this.list_clips[index_clip];\n            // let offset = index_clip;\n            let offset = coord[0];\n            // let offset = coord_clip[1];\n            // TODO: make this configurable\n            if (false) {\n                // offset = this.clips.length - 1 - index_clip;\n                // offset = this.matrix_clips.get_num_rows() - 1 - coord_clip[0];\n                offset = this.list_clips.length - 1 - coord[0];\n\n            }\n            var dist = (clip.get_pitch_max() - pitch) * this.get_height_note(coord);\n            return dist + (this.get_height_clip() * offset);\n        };\n\n        beat_to_pixel = function (beat: number): number {\n            let num_pixels_width = this.width;\n            // var num_beats_in_clip = this.get_num_measures_clip() * this.beats_per_measure;\n            // let num_beats_window = this.num_measures * this.beats_per_measure;\n            return beat * (num_pixels_width / this.length_beats);\n        };\n\n        get_dist_from_left(beat: number): number {\n            return this.beat_to_pixel(beat);\n        };\n\n        get_offset_pixel_leftmost(): number {\n            return 0;\n        }\n\n        get_offset_pixel_topmost(): number {\n            return 0;\n        }\n\n        get_offset_pixel_rightmost(): number {\n            return this.width;\n        }\n\n        get_offset_pixel_bottommost(): number {\n            return this.height;\n        }\n\n        get_height_clip(): number {\n            // return this.height / this.matrix_clips.length;\n            return this.height / this.list_clips.length;\n        };\n\n        // TODO: make a virtual \"append\" clip method so we can get the ambitus across columns\n        // get_height_note(coord_clip: number[]): number {\n        //     let notes_row = [];\n        //     let interval_ambitus: number[] = [-Infinity, Infinity];\n        //     for (let i_row in this.matrix_clips) {\n        //         for (let i_col in this.matrix_clips[Number(i_row)]) {\n        //             if (Number(i_col) == 0) {\n        //                 interval_ambitus[0] = this.matrix_clips[coord_clip[0]][Number(i_col)].get_beat_start()\n        //             }\n        //             notes_row = notes_row.concat(this.matrix_clips[coord_clip[0]][Number(i_col)].get_notes_within_loop_brackets())\n        //             interval_ambitus[1] = this.matrix_clips[coord_clip[0]][Number(i_col)].get_beat_end()\n        //         }\n        //     }\n        //     let clip_dao_row_virtual = new LiveClipVirtual([]);\n        //     let clip_row_virtual = new Clip(clip_dao_row_virtual);\n        //     clip_row_virtual.set_notes(\n        //         notes_row\n        //     );\n        //     // let ambitus = this.get_ambitus(coord_clip);\n        //     let ambitus = clip_row_virtual.get_ambitus(interval_ambitus);\n        //     let dist_pitch = ambitus[1] - ambitus[0] + 1;\n        //     return this.get_height_clip() / dist_pitch;\n        // };\n\n        get_height_note(coord: number[]): number {\n            // let notes_row = [];\n            // let interval_ambitus: number[] = [-Infinity, Infinity];\n            // for (let i_row in this.matrix_clips) {\n            //     for (let i_col in this.matrix_clips[Number(i_row)]) {\n            //         if (Number(i_col) == 0) {\n            //             interval_ambitus[0] = this.matrix_clips[coord_clip[0]][Number(i_col)].get_beat_start()\n            //         }\n            //         notes_row = notes_row.concat(this.matrix_clips[coord_clip[0]][Number(i_col)].get_notes_within_loop_brackets())\n            //         interval_ambitus[1] = this.matrix_clips[coord_clip[0]][Number(i_col)].get_beat_end()\n            //     }\n            // }\n            // let clip_dao_row_virtual = new LiveClipVirtual([]);\n            // let clip_row_virtual = new Clip(clip_dao_row_virtual);\n            // clip_row_virtual.set_notes(\n            //     notes_row\n            // );\n\n            let index_clip = Window.coord_to_index_clip(coord);\n            let clip = this.list_clips[index_clip];\n            // let ambitus = this.get_ambitus(coord_clip);\n            let ambitus = clip.get_ambitus();\n            let dist_pitch = ambitus[1] - ambitus[0] + 1;\n            return this.get_height_clip() / dist_pitch;\n        };\n\n        // get_ambitus(coord_clips: number[]): number[] {\n        //     return this.matrix_clips[coord_clips[0]][coord_clips[1]].get_ambitus();\n        // };\n    }\n\n    export interface Renderable {\n        render_regions(\n            iterator_matrix_train,\n            matrix_target_iterator\n        )\n\n        render_notes(\n            history_user_input\n        )\n    }\n\n    // export interface TreeRenderable extends Renderable {\n    //\n    //     render_regions(iterator_matrix_train)\n    //\n    //     render_trees(list_parse_tree: ParseTree[])\n    // }\n\n    export class MatrixWindow extends Window implements Temporal {\n\n        constructor(height, width, messenger) {\n            super(height, width, messenger);\n        }\n\n        public render(iterator_matrix_train, matrix_target_iterator, algorithm, parse_matrix) {\n            this.clear();\n            this.render_regions(iterator_matrix_train, matrix_target_iterator, algorithm);\n            this.render_clips(iterator_matrix_train);\n            if (!algorithm.b_targeted()) {\n                this.render_trees(parse_matrix)\n            }\n        }\n\n        public render_trees(parse_matrix) {\n\n            let color: number[];\n            let messages: any[] = [];\n            let message: any[];\n\n            for (let coord of parse_matrix.coords_roots) {\n                for (let root of parse_matrix.get_roots_at_coord(coord)) {\n                    root.walk((node)=>{\n\n                        if (node.hasChildren()) {\n\n                            for (let child of node.children) {\n\n                                message = [\n                                    \"linesegment\",\n                                    this.get_centroid(child)[0],\n                                    this.get_centroid(child)[1],\n                                    this.get_centroid(node)[0],\n                                    this.get_centroid(node)[1]\n                                ];\n\n                                color = red;\n\n                                messages.push(message.concat(color));\n\n                            }\n                        }\n\n                        return true;\n                    });\n                }\n            }\n\n            return messages;\n        }\n\n        get_centroid(node: TreeModel.Node<n.NoteRenderable>): number[] {\n\n            let dist_from_left_beat_start, dist_from_left_beat_end, dist_from_top_note_top, dist_from_top_note_bottom;\n\n            // let index_clip = node.model.id;\n            let coord_clip = node.model.note.get_coordinates_matrix();\n\n            // TODO: determine how to get the index of the clip from just depth of the node\n\n            dist_from_left_beat_start = this.get_dist_from_left(node.model.note.beat_start);\n            dist_from_left_beat_end = this.get_dist_from_left(node.model.note.beat_start + node.model.note.beats_duration);\n            dist_from_top_note_top = this.get_dist_from_top(node.model.note.pitch, coord_clip);\n            dist_from_top_note_bottom = this.get_dist_from_top(node.model.note.pitch - 1, coord_clip);\n\n            return [\n                dist_from_left_beat_end - ((dist_from_left_beat_end - dist_from_left_beat_start) / 2),\n                dist_from_top_note_bottom - ((dist_from_top_note_bottom - dist_from_top_note_top) / 2)\n            ]\n        };\n\n        // render_tree(): void {\n        //     var messages = this.get_messages_render_tree();\n        //     for (var i=0; i < messages.length; i++) {\n        //         this.messenger.message(\n        //             messages[i]\n        //         )\n        //     }\n        // };\n\n        public render_clips(iterator_matrix_train) {\n            let messages_render_clips = this.get_messages_render_clips(iterator_matrix_train);\n            for (let messages_notes of messages_render_clips) {\n                for (let message_note of messages_notes) {\n                    this.messenger.message(message_note);\n                }\n            }\n        }\n\n        public get_messages_render_clips(iterator_matrix_train): any[][] {\n            let messages = [];\n\n            for (let i of _.range(0, iterator_matrix_train.get_state_current() + 1)) {\n\n                // let coord_clip: number[] = MatrixIterator.get_coord(i, this.matrix_clips[this.matrix_clips.length - 1].length);\n\n                let coord_clip: number[] = MatrixIterator.get_coord(i, iterator_matrix_train.num_columns);\n\n                messages.push(\n                    this.get_messages_render_clip(coord_clip)\n                )\n            }\n\n            return messages\n        }\n\n        // render_clips(): void {\n        //     var messages = this.get_messages_render_clips();\n        //     for (var i=0; i < messages.length; i++) {\n        //         this.messenger.message(\n        //             messages[i]\n        //         )\n        //     }\n        // };\n\n        // TODO: return signature\n        // get_messages_render_clips(history_user_input: HistoryUserInput)  {\n        //     var messages = [];\n        //     // for (let index_clip in this.clips) {\n        //     //     messages = messages.concat(this.get_messages_render_notes(Number(index_clip)))\n        //     // }\n        //     for (let index_clip in this.clips) {\n        //         messages = messages.concat(this.get_messages_render_notes(Number(index_clip)))\n        //     }\n        //     return messages;\n        // };\n\n        // get_messages_render_notes(clip: Clip) {\n        //     let quadruplets = [];\n        //     for (let node of clip.get_notes_within_loop_brackets()) {\n        //         quadruplets.push(this.get_position_quadruplet(node, index_clip));\n        //     }\n        //     return quadruplets.map(function (tuplet) {\n        //         let message = <any>[\"paintrect\"].concat(tuplet);\n        //         message = message.concat(black);\n        //         return message;\n        //     })\n        // };\n\n        public get_message_render_region_past(interval_current) {\n            let offset_left_start, offset_top_start, offset_left_end, offset_top_end;\n\n            offset_left_start = this.get_dist_from_left(this.get_offset_pixel_leftmost());\n            offset_left_end = this.get_dist_from_left(interval_current[0]);\n            offset_top_start = this.get_offset_pixel_topmost();\n            offset_top_end = this.get_offset_pixel_bottommost();\n\n            return [offset_left_start, offset_top_start, offset_left_end, offset_top_end]\n        }\n\n        public get_message_render_region_present(interval_current) {\n            let offset_left_start, offset_top_start, offset_left_end, offset_top_end;\n\n            offset_left_start = this.get_dist_from_left(interval_current[0]);\n            offset_left_end = this.get_dist_from_left(interval_current[1]);\n            offset_top_start = this.get_offset_pixel_topmost();\n            offset_top_end = this.get_offset_pixel_bottommost();\n\n            return [offset_left_start, offset_top_start, offset_left_end, offset_top_end]\n        }\n\n        public get_message_render_region_future(interval_current) {\n            let offset_left_start, offset_top_start, offset_left_end, offset_top_end;\n\n            offset_left_start = this.get_dist_from_left(interval_current[1]);\n            offset_left_end = this.get_dist_from_left(this.get_offset_pixel_rightmost());\n            offset_top_start = this.get_offset_pixel_topmost();\n            offset_top_end = this.get_offset_pixel_bottommost();\n\n            return [offset_left_start, offset_top_start, offset_left_end, offset_top_end]\n        }\n\n        public render_regions(iterator_matrix_train, matrix_target_iterator, algorithm) {\n            let coord = iterator_matrix_train.get_coord_current();\n            let target_iterator = matrix_target_iterator[coord[0]][coord[1]];\n            let subtargets = target_iterator.current().iterator_subtarget.subtargets.map((subtarget) => {\n                return subtarget.note\n            });\n            let interval_current = algorithm.determine_region_present(\n                subtargets\n            );\n\n            let quadruplet_region_past = this.get_message_render_region_past(interval_current);\n            let quadruplet_region_present = this.get_message_render_region_present(interval_current);\n            let quadruplet_region_future = this.get_message_render_region_future(interval_current);\n\n            quadruplet_region_past.unshift('paintrect');\n            quadruplet_region_past = quadruplet_region_past.concat(region_green);\n\n            quadruplet_region_present.unshift('paintrect');\n            quadruplet_region_present = quadruplet_region_present.concat(region_red);\n\n            quadruplet_region_future.unshift('paintrect');\n            quadruplet_region_future = quadruplet_region_future.concat(region_yellow);\n\n            for (let quadruplet of [quadruplet_region_past, quadruplet_region_present, quadruplet_region_future]) {\n                this.messenger.message(quadruplet);\n            }\n        }\n    }\n}"]}