{"version":3,"file":"window.js","sourceRoot":"","sources":["../../src/render/window.ts"],"names":[],"mappings":"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","sourcesContent":["import TreeModel = require(\"tree-model\");\nimport {message as m} from \"../message/messenger\"\nimport {clip as c} from \"../clip/clip\";\nimport {note as n} from \"../note/note\";\n\nexport namespace window {\n    export class Pwindow {\n        height: number;\n        width: number;\n        messenger: m.Messenger;\n        clips: c.Clip[];\n        beats_per_measure: number;\n        root_parse_tree: TreeModel.Node<n.Note>;\n        list_leaves_current: TreeModel.Node<n.Note>[];\n\n        constructor(height: number, width: number, messenger: m.Messenger) {\n            this.height = height;\n            this.width = width;\n            this.messenger = messenger;\n            this.clips = [];\n            // this.grans_per_measure = 24; // sixteenth and sixteenth triplets quantization\n            this.beats_per_measure = 4;\n            this.root_parse_tree = null;\n            this.list_leaves_current = null;\n            // need to count number of measures in clip\n            // then multiply that by 24 = granule/measure\n            // this is the min size of window in pixels\n            // make the width be an integer multiple of this, for convenience\n        }\n\n        // NB: this makes the assumption that the end marker is at the end of the clip\n        get_num_measures_clip(): number {\n            return this.clips[0].get_num_measures();\n        }\n\n        // TODO: make node have indices to both clip and note\n        get_centroid(node: TreeModel.Node<n.Note>): number[] {\n\n            var dist_from_left_beat_start, dist_from_left_beat_end, dist_from_top_note_top, dist_from_top_note_bottom;\n\n            // var index_clip = node.get_index_clip();\n            // var index_note = node.get_index_note();\n            // var clip = this.clips[index_clip];\n            // clip.load_notes();\n            // var note = clip.get_notes()[index_note];\n\n            var index_clip = node.depth;\n\n            // TODO: determine how to get the index of the clip from just depth of the node\n\n            dist_from_left_beat_start = this.get_dist_from_left(node.model.note.beat_start);\n            dist_from_left_beat_end = this.get_dist_from_left(node.model.note.beat_start + node.model.note.beats_duration);\n            dist_from_top_note_top = this.get_dist_from_top(node.model.note.pitch, index_clip);\n            dist_from_top_note_bottom = this.get_dist_from_top(node.model.note.pitch - 1, index_clip);\n\n            return [\n                dist_from_left_beat_end - ((dist_from_left_beat_end - dist_from_left_beat_start) / 2),\n                dist_from_top_note_bottom - ((dist_from_top_note_bottom - dist_from_top_note_top) / 2)\n            ]\n        };\n\n        // TODO: add capability to automatically determine parent/children relationships between adjacent tracks\n        add_clip(clip: c.Clip): void {\n            this.clips.push(clip);\n            if (this.clips.length === 1) {\n                // TODO: fix this, we're assuming the first clip has only the root note for now\n                // let tree: TreeModel = new TreeModel();\n                // this.root_parse_tree = tree.parse(\n                //     {\n                //         id: -1, // TODO: hashing scheme for clip id and beat start\n                //         note: clip.get_notes()[0],\n                //         children: []\n                //     }\n                // );\n                this.root_parse_tree = clip.get_notes()[0];\n                this.list_leaves_current = [\n                    this.root_parse_tree\n                ];\n                return\n            }\n            var notes_parent: TreeModel.Node<n.Note>[] = this.list_leaves_current;\n            var notes_child: TreeModel.Node<n.Note>[] = clip.get_notes();\n            var notes_diff = this.get_diff_notes(notes_parent, notes_child);\n            var notes_parent_diff = notes_diff['parent'];\n            var notes_child_diff = notes_diff['child'];\n            this.list_leaves_current = this.add_layer(notes_parent_diff, notes_child_diff);\n        };\n\n        // TODO: complete return signature\n        get_diff_notes(notes_parent: TreeModel.Node<n.Note>[], notes_child: TreeModel.Node<n.Note>[]) {\n            let same_start, same_duration, notes_parent_diff, notes_child_diff, index_start_diff, index_end_diff;\n\n            for (let i=0; i < notes_child.length; i++) {\n                same_start = (notes_child[i].model.note.beat_start === notes_parent[i].model.note.beat_start);\n                same_duration = (notes_child[i].model.note.beats_duration === notes_parent[i].model.note.beats_duration);\n                if (!(same_start && same_duration)) {\n                    index_start_diff = i;\n                    break;\n                }\n            }\n\n            for (let i=-1; i > -1 * (notes_child.length + 1); i--) {\n                same_start = (notes_child.slice(i)[0].model.note.beat_start === notes_parent.slice(i)[0].model.note.beat_start);\n                same_duration = (notes_child.slice(i)[0].model.note.beats_duration === notes_parent.slice(i)[0].model.note.beats_duration);\n                if (!(same_start && same_duration)) {\n                    index_end_diff = i;\n                    break;\n                }\n            }\n\n            notes_parent_diff = notes_parent.slice(index_start_diff, notes_parent.length + 1 - index_end_diff);\n            notes_child_diff = notes_child.slice(index_start_diff, notes_child.length + 1 - index_end_diff);\n\n            // TODO: write signature\n            return {\n                'parent': notes_parent_diff,\n                'child': notes_child_diff\n            }\n        };\n\n\n        render_tree(): void {\n            var messages = this.get_messages_render_tree();\n            for (var i=0; i < messages.length; i++) {\n                this.messenger.message(\n                    messages[i]\n                )\n            }\n        };\n\n        // TODO: how do we render when there is no singular root (i.e. parsing, not sampling, sentence)?\n        get_messages_render_tree() {\n            var messages = [];\n\n            this.root_parse_tree.walk((node)=>{\n                if (node.hasChildren()) {\n                    for (let child of node.children) {\n                        messages.push([\n                            \"linesegment\",\n                            this.get_centroid(child)[0],\n                            this.get_centroid(child)[1],\n                            this.get_centroid(node)[0],\n                            this.get_centroid(node)[1]\n                        ])\n                    }\n                }\n\n                return true;\n            });\n\n            // isRoot(): boolean;\n            // hasChildren(): boolean;\n            // addChild(child: Node<T>): Node<T>;\n            // addChildAtIndex(child: Node<T>, index: number): Node<T>;\n            // setIndex(index: number): Node<T>;\n            // getPath(): Array<Node<T>>;\n            // getIndex(): number;\n            //\n            // walk(options: Options, fn: NodeVisitorFunction<T>, ctx?: object): void;\n            // walk(fn: NodeVisitorFunction<T>, ctx?: object): void;\n            //\n            // all(options: Options, fn: NodeVisitorFunction<T>, ctx?: object): Array<Node<T>>;\n            // all(fn: NodeVisitorFunction<T>, ctx?: object): Array<Node<T>>;\n            //\n            // first(options: Options, fn: NodeVisitorFunction<T>, ctx?: object): Node<T> | undefined;\n            // first(fn: NodeVisitorFunction<T>, ctx?: object): Node<T> | undefined;\n            //\n            // drop(): Node<T>;\n\n            // this.parse_tree.traverseDown(iterator.bind(this));\n\n            return messages;\n        };\n\n        // NB: only works top down currently\n        private add_layer(notes_parent: TreeModel.Node<n.Note>[], notes_child: TreeModel.Node<n.Note>[]): TreeModel.Node<n.Note>[] {\n\n            // // TODO: fix this, we're assuming the first clip has only the root note for now\n            // if (notes_parents === null) {\n            //     this.parse_tree = new tr.Tree(null, notes_parents[0]);\n            //     return notes_parents;\n            // }\n\n            var note_parent_best, b_successful;\n\n            var num_successes = 0;\n\n            for (let node of notes_child) {\n                note_parent_best = node.model.note.get_best_candidate(notes_parent);\n                b_successful = node.model.note.choose();\n                if (b_successful) {\n                    note_parent_best.addChild(node);\n                    num_successes += 1;\n                }\n            }\n\n            var b_layer_successful = (num_successes === notes_child.length);\n\n            if (b_layer_successful) {\n                return notes_child // new leaves\n            } else {\n                throw 'adding layer unsuccessful'\n            }\n        };\n\n        render_clips(): void {\n            var messages = this.get_messages_render_clips();\n            for (var i=0; i < messages.length; i++) {\n                this.messenger.message(\n                    messages[i]\n                )\n            }\n        };\n\n        // TODO: return signature\n        get_messages_render_clips()  {\n            var messages = [];\n            for (let index_clip in this.clips) {\n                messages = messages.concat(this.get_messages_render_notes(Number(index_clip)))\n            }\n            return messages;\n        };\n\n        get_messages_render_notes(index_clip: number) {\n            var clip = this.clips[index_clip];\n            let quadruplets = [];\n            for (let node of clip.get_notes()) {\n                quadruplets.push(this.get_position_quadruplet(node, index_clip));\n            }\n            return quadruplets.map(function (tuplet) {\n                return [\"paintrect\"].concat(tuplet)\n            })\n        };\n\n        get_position_quadruplet(node: TreeModel.Node<n.Note>, index_clip: number) {\n            var dist_from_left_beat_start, dist_from_top_note_top, dist_from_left_beat_end, dist_from_top_note_bottom;\n\n            dist_from_left_beat_start = this.get_dist_from_left(node.model.note.beat_start);\n            dist_from_left_beat_end = this.get_dist_from_left(node.model.note.beat_start + node.model.note.beats_duration);\n            dist_from_top_note_top = this.get_dist_from_top(node.model.note.pitch, index_clip);\n            dist_from_top_note_bottom = this.get_dist_from_top(node.model.note.pitch - 1, index_clip);\n\n            return [dist_from_left_beat_start, dist_from_top_note_top, dist_from_left_beat_end, dist_from_top_note_bottom]\n        };\n\n        get_dist_from_top(pitch: number, index_clip: number): number {\n            var clip = this.clips[index_clip];\n            let offset = index_clip;\n            // TODO: make this configurable\n            if (true) {\n                offset = this.clips.length - 1 - index_clip;\n            }\n            var dist = (clip.get_pitch_max() - pitch) * this.get_height_note(index_clip);\n            return dist + (this.get_height_clip() * offset);\n\n        };\n\n        beat_to_pixel = function (beat: number): number {\n            var num_pixels_in_clip = this.width;\n            var num_beats_in_clip = this.get_num_measures_clip() * this.beats_per_measure;\n            return beat * (num_pixels_in_clip / num_beats_in_clip);\n        };\n\n        get_dist_from_left(beat: number): number {\n            return this.beat_to_pixel(beat);\n        };\n\n        get_height_clip(): number {\n            return this.height / this.clips.length;\n        };\n\n        get_height_note(index_clip: number): number {\n            var ambitus = this.get_ambitus(index_clip);\n            var dist_pitch = ambitus[1] - ambitus[0] + 1;\n            return this.get_height_clip() / dist_pitch;\n        };\n\n        get_ambitus(index_clip: number): number[] {\n            return this.clips[index_clip].get_ambitus();\n        };\n    }\n}"]}