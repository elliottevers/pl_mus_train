{"version":3,"file":"max_cli.js","sourceRoot":"","sources":["../src/max_cli.ts"],"names":[],"mappings":"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","sourcesContent":["import {cli} from \"./cli/cli\";\nimport {message} from \"./message/messenger\";\nimport Messenger = message.Messenger;\nvar _ = require('underscore');\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet executable: cli.Executable;\n\nlet messenger = new Messenger(env, 0);\n\nlet args: cli.Arg[] = [];\nlet options: cli.Option[] = [];\nlet flags: cli.Flag[] = [];\n\nlet path_binary;\n\nlet run = () => {\n    executable = new cli.Executable(\n        path_binary,\n        flags,\n        options,\n        args,\n        messenger,\n        false\n    );\n    executable.run()\n};\n\nlet set_arg = (name_arg, val_arg) => {\n    if (_.contains(args.map((arg) => {return arg.name}), name_arg)) {\n        let arg_existing = args.filter(arg => arg.name === name_arg)[0];\n        arg_existing.set(val_arg);\n    } else {\n        let arg = new cli.Arg(name_arg);\n        arg.set(val_arg);\n        args.push(arg);\n    }\n};\n\nlet set_flag = (name_flag, val_flag) => {\n    if (_.contains(flags.map((flag) => {return flag.name}), name_flag)) {\n        let flag_existing = flags.filter(flag => flag.name === name_flag)[0];\n        flag_existing.set(val_flag);\n    } else {\n        let flag = new cli.Flag(name_flag);\n        flag.set(val_flag);\n        flags.push(flag);\n    }\n};\n\nlet set_option = (name_opt, val_opt) => {\n    if (_.contains(options.map((opt) => {return opt.name}), name_opt)) {\n        let opt_existing = options.filter(opt => opt.name === name_opt)[0];\n        opt_existing.set(val_opt);\n    } else {\n        let opt = new cli.Option(name_opt, true);\n        opt.set(val_opt);\n        options.push(opt);\n    }\n};\n\nlet set_executable = (path) => {\n    path_binary = path;\n};\n\nlet test = () => {\n    set_arg('id_arg', 'argument_test_val');\n    set_option('o', 'option_test_val');\n    set_flag( 'f', 1);\n    set_arg('id_arg', 'argument_test_val_2');\n};\n\n// test();\n\nif (typeof Global !== \"undefined\") {\n    Global.max_cli = {};\n    Global.max_cli.set_arg = set_arg;\n    Global.max_cli.set_option = set_option;\n    Global.max_cli.set_flag = set_flag;\n    Global.max_cli.run = run;\n    Global.max_cli.set_executable = set_executable;\n}\n"]}