{"version":3,"file":"thaw.js","sourceRoot":"","sources":["../../src/serialize/thaw.ts"],"names":[],"mappings":";;AAAA,mCAAgC;AAEhC,yCAAsC;AAGtC,IAAiB,IAAI,CAoDpB;AApDD,WAAiB,IAAI;IACjB,IAAO,SAAS,GAAG,WAAI,CAAC,SAAS,CAAC;IAClC,IAAO,gBAAgB,GAAG,qBAAS,CAAC,gBAAgB,CAAC;IAGrD;QAAA;QA8CA,CAAC;QA5CiB,sBAAU,GAAxB,UAAyB,QAAgB,EAAE,GAAW;YAClD,IAAI,KAAK,GAAG,EAAE,CAAC;YACf,iDAAiD;YACjD,IAAI,MAAM,GAAG,WAAW,CAAC,iBAAiB,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;YAC1D,KAAoB,UAAmB,EAAnB,KAAA,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAnB,cAAmB,EAAnB,IAAmB,EAAE;gBAApC,IAAI,OAAO,SAAA;gBACZ,IAAI,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;gBAC1B,KAAoB,UAAgB,EAAhB,KAAA,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAhB,cAAgB,EAAhB,IAAgB,EAAE;oBAAjC,IAAI,OAAO,SAAA;oBACZ,KAA8B,UAAwB,EAAxB,KAAA,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,EAAxB,cAAwB,EAAxB,IAAwB,EAAE;wBAAnD,IAAI,iBAAiB,SAAA;wBACtB,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAA;qBAChC;iBAEJ;aACJ;YAED,OAAO,KAAK,CAAA;QAChB,CAAC;QAEa,6BAAiB,GAA/B,UAAgC,QAAgB,EAAE,GAAW;YACzD,IAAI,mBAAmB,GAAG,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;YAEnD,IAAI,WAAW,GAAG,mBAAmB,CAAC;YAEtC,iDAAiD;YACjD,KAAK,IAAI,KAAK,IAAI,mBAAmB,EAAE;gBACnC,IAAI,GAAG,GAAG,mBAAmB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC7C,KAAK,IAAI,KAAK,IAAI,GAAG,EAAE;oBACnB,IAAI,GAAG,GAAG,mBAAmB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC5D,IAAI,GAAG,KAAK,IAAI,EAAE;wBACd,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC;wBAC/C,SAAS;qBACZ;oBAED,IAAI,KAAK,GAAG,EAAE,CAAC;oBAEf,KAA4B,UAAG,EAAH,WAAG,EAAH,iBAAG,EAAH,IAAG,EAAE;wBAA5B,IAAI,eAAe,YAAA;wBACpB,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC,CAAA;qBAChD;oBAED,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK,CAAA;iBACpD;aACJ;YAED,OAAO,WAAW,CAAA;QACtB,CAAC;QACL,kBAAC;IAAD,CAAC,AA9CD,IA8CC;IA9CY,gBAAW,cA8CvB,CAAA;AACL,CAAC,EApDgB,IAAI,GAAJ,YAAI,KAAJ,YAAI,QAoDpB","sourcesContent":["import {file} from \"../io/file\";\nimport TreeModel = require(\"tree-model\");\nimport {serialize} from \"./serialize\";\nimport {note} from \"../note/note\";\n\nexport namespace thaw {\n    import from_json = file.from_json;\n    import deserialize_note = serialize.deserialize_note;\n    import Note = note.Note;\n\n    export class TrainThawer {\n\n        public static thaw_notes(filepath: string, env: string): TreeModel.Node<Note>[] {\n            let notes = [];\n            // TODO: this is only valid for forward iteration\n            let matrix = TrainThawer.thaw_notes_matrix(filepath, env);\n            for (let key_row of Object.keys(matrix)) {\n                let col = matrix[key_row];\n                for (let key_col of Object.keys(col)) {\n                    for (let note_deserialized of matrix[key_row][key_col]) {\n                        notes.push(note_deserialized)\n                    }\n\n                }\n            }\n\n            return notes\n        }\n\n        public static thaw_notes_matrix(filepath: string, env: string) {\n            let matrix_deserialized = from_json(filepath, env);\n\n            let matrix_test = matrix_deserialized;\n\n            // TODO: this is only valid for forward iteration\n            for (let i_row in matrix_deserialized) {\n                let row = matrix_deserialized[Number(i_row)];\n                for (let i_col in row) {\n                    let col = matrix_deserialized[Number(i_row)][Number(i_col)];\n                    if (col === null) {\n                        matrix_test[Number(i_row)][Number(i_col)] = [];\n                        continue;\n                    }\n\n                    let notes = [];\n\n                    for (let note_serialized of col) {\n                        notes.push(deserialize_note(note_serialized))\n                    }\n\n                    matrix_test[Number(i_row)][Number(i_col)] = notes\n                }\n            }\n\n            return matrix_test\n        }\n    }\n}"]}