{"version":3,"file":"thaw.js","sourceRoot":"","sources":["../../src/serialize/thaw.ts"],"names":[],"mappings":"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","sourcesContent":["import {trainer} from \"../train/trainer\";\nimport {file} from \"../io/file\";\nimport {algorithm} from \"../train/algorithm\";\nimport TreeModel = require(\"tree-model\");\nimport {serialize} from \"./serialize\";\nimport {note} from \"../note/note\";\nimport {log} from \"../log/logger\";\n\nexport namespace thaw {\n    import Trainer = trainer.Trainer;\n    import from_json = file.from_json;\n    import DETECT = algorithm.DETECT;\n    import PREDICT = algorithm.PREDICT;\n    import PARSE = algorithm.PARSE;\n    import deserialize_note = serialize.deserialize_note;\n    import Note = note.Note;\n    import DERIVE = algorithm.DERIVE;\n    import Logger = log.Logger;\n\n    export class TrainThawer {\n        env: string;\n\n        constructor(env: string) {\n            this.env = env;\n        }\n\n        public thaw(filepath: string, config): Trainer {\n\n            let trainer;\n\n            let matrix_deserialized = from_json(filepath, config['env']);\n\n            let logger = new Logger(config['env']);\n\n            logger.log(JSON.stringify(matrix_deserialized));\n\n            trainer =  new Trainer(\n                config['window'],\n                config['user_input_handler'],\n                config['trainable'],\n                config['track_target'],\n                config['track_user_input'],\n                config['song'],\n                config['segments'],\n                config['messenger']\n            );\n\n            trainer.advance(\n\n            );\n\n            switch (config['trainable'].get_name()) {\n                case DETECT: {\n                    let notes = [];\n                    // TODO: this is only valid for forward iteration\n                    for (let row of matrix_deserialized) {\n                        for (let col of row) {\n                            if (col === null) {\n                                continue;\n                            }\n                            for (let note_serialized of col) {\n                                notes.push(deserialize_note(note_serialized))\n                            }\n                        }\n                    }\n\n                    let notes_parsed = notes;\n\n                    let tree: TreeModel = new TreeModel();\n\n                    for (let note_parsed of notes_parsed) {\n                        let note_recovered = tree.parse(\n                            {\n                                id: -1, // TODO: hashing scheme for clip id and beat start\n                                note: new Note(\n                                    note_parsed.model.note.pitch,\n                                    note_parsed.model.note.beat_start,\n                                    note_parsed.model.note.beats_duration,\n                                    note_parsed.model.note.velocity,\n                                    note_parsed.model.note.muted\n                                ),\n                                children: [\n\n                                ]\n                            }\n                        );\n                        trainer.accept_input(\n                            [note_recovered]\n                        );\n                    }\n\n                    // trainer.pause();\n\n                    break;\n                }\n                case PREDICT: {\n                    break;\n                }\n                case PARSE: {\n                    let input_left = true;\n\n                    while (input_left) {\n                        let coord_current = trainer.iterator_matrix_train.get_coord_current();\n                        trainer.accept_input(\n                            matrix_deserialized[coord_current[0]][coord_current[1]].map((note_serialized) => {\n                                return deserialize_note(note_serialized)\n                            })\n                        );\n\n                        if (trainer.iterator_matrix_train.done) {\n                            input_left = false;\n                        }\n                    }\n\n                    // trainer.pause();\n\n                    break;\n                }\n                // go until we find a segment without user input\n                case DERIVE: {\n                    let input_left = true;\n\n                    while (input_left) {\n\n                        let coord_current = trainer.iterator_matrix_train.get_coord_current();\n\n                        if (matrix_deserialized[coord_current[0]][coord_current[1]].length === 0) {\n                            input_left = false;\n                            continue\n                        }\n\n                        trainer.accept_input(\n                            matrix_deserialized[coord_current[0]][coord_current[1]]\n                        );\n                    }\n\n                    // trainer.pause();\n\n                    break;\n                }\n            }\n\n\n            return trainer;\n        }\n    }\n}"]}