{"version":3,"file":"derive.js","sourceRoot":"","sources":["../../src/algorithm/derive.ts"],"names":[],"mappings":"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","sourcesContent":["import {segment} from \"../segment/segment\";\nimport {track} from \"../track/track\";\nimport {parsed} from \"./parsed\";\nimport {trainer} from \"../train/trainer\";\nimport {iterate} from \"../train/iterate\";\nimport {note} from \"../note/note\";\nimport {trainable} from \"./trainable\";\nimport {parse} from \"../parse/parse\";\nimport {window} from \"../render/window\";\nimport TreeModel = require(\"tree-model\");\nimport {message} from \"../message/messenger\";\n\nexport namespace derive {\n    import Parsed = parsed.Parsed;\n    import StructTrain = trainer.StructTrain;\n    import MatrixIterator = iterate.MatrixIterator;\n    import Note = note.Note;\n    import DERIVE = trainable.DERIVE;\n    import ParseTree = parse.ParseTree;\n    import StructParse = parse.StructParse;\n    import Segment = segment.Segment;\n    import MatrixWindow = window.MatrixWindow;\n    import Messenger = message.Messenger;\n\n    export class Derive extends Parsed {\n\n        public get_name(): string {\n            return DERIVE\n        }\n\n        get_coords_notes_to_grow(coords_note_input_current) {\n            return MatrixIterator.get_coords_above([coords_note_input_current[0], coords_note_input_current[1]])\n        }\n\n        grow_layer(notes_user_input_renderable, notes_to_grow) {\n            ParseTree.add_layer(\n                notes_to_grow,\n                notes_user_input_renderable,\n                -1\n            )\n        }\n\n        initialize_tracks(\n            segments: segment.Segment[],\n            track_target: track.Track,\n            track_user_input: track.Track,\n            struct_train: StructTrain\n        ) {\n            track_target.mute();\n        }\n\n        preprocess_struct_parse(struct_parse: StructParse, segments: Segment[]): StructParse {\n            // add the root to the tree immediately\n            struct_parse.set_root(\n                ParseTree.create_root_from_segments(\n                    segments\n                )\n            );\n\n            for (let i_segment in segments) {\n\n                let segment = segments[Number(i_segment)];\n\n                let note = segment.get_note();\n\n                let coord_current_virtual = [0, Number(i_segment)];\n\n                struct_parse.add(\n                    [note],\n                    coord_current_virtual,\n                    this\n                );\n            }\n\n            return struct_parse\n        }\n\n        initialize_render(\n            window: MatrixWindow,\n            segments: Segment[],\n            notes_target_track: TreeModel.Node<Note>[],\n            struct_train: StructTrain\n        ): MatrixWindow {\n            // first layer (root)\n            window.add_note_to_clip_root(\n                StructParse.create_root_from_segments(\n                    segments\n                )\n            );\n\n            for (let i_segment in segments) {\n\n                let segment = segments[Number(i_segment)];\n\n                let note_segment = segment.get_note();\n\n                let coord_current_virtual_second_layer = [0, Number(i_segment)];\n\n                // second layer\n                window.add_notes_to_clip(\n                    [note_segment],\n                    this.coord_to_index_clip_render(\n                        coord_current_virtual_second_layer\n                    )\n                )\n            }\n\n            return window\n        }\n\n        finish_parse(struct_parse: StructParse, segments: Segment[]): void {\n            return\n        }\n\n        update_roots(coords_roots_previous: number[][], coords_notes_previous: number[][], coord_notes_current: number[]) {\n            return coords_roots_previous\n        }\n\n        // the layer of segments don't count\n        get_num_layers_input(): number {\n            return this.depth - 1;\n        }\n\n        get_num_layers_clips_to_render(): number {\n            return this.depth + 1;\n        }\n    }\n}"]}