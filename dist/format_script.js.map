{"version":3,"file":"format_script.js","sourceRoot":"","sources":["../src/format_script.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AACjC,iDAA4C;AAC5C,IAAO,SAAS,GAAG,mBAAO,CAAC,SAAS,CAAC;AAarC,IAAI,GAAG,GAAW,KAAK,CAAC;AAExB,IAAI,GAAG,KAAK,KAAK,EAAE;IACf,IAAI,CAAC,sBAAsB,CAAC,CAAC;IAC7B,SAAS,GAAG,CAAC,CAAC;CACjB;AAID,0BAA0B;AAC1B,EAAE;AACF,IAAI,SAAoB,CAAC;AACzB,EAAE;AACF,4BAA4B;AAC5B,kCAAkC;AAClC,8BAA8B;AAC9B,EAAE;AACF,wBAAwB;AACxB,mBAAmB;AAEnB,oBAAoB;AACpB,+BAA+B;AAC/B,4BAA4B;AAC5B,uBAAuB;AACvB,iBAAiB;AACjB,mBAAmB;AACnB,gBAAgB;AAChB,qBAAqB;AACrB,eAAe;AACf,SAAS;AACT,mBAAmB;AACnB,KAAK;AACL,EAAE;AACF,yCAAyC;AACzC,wEAAwE;AACxE,2EAA2E;AAC3E,qCAAqC;AACrC,eAAe;AACf,2CAA2C;AAC3C,4BAA4B;AAC5B,0BAA0B;AAC1B,QAAQ;AACR,KAAK;AACL,EAAE;AACF,4CAA4C;AAC5C,4EAA4E;AAC5E,gFAAgF;AAChF,uCAAuC;AACvC,eAAe;AACf,8CAA8C;AAC9C,8BAA8B;AAC9B,4BAA4B;AAC5B,QAAQ;AACR,KAAK;AACL,EAAE;AACF,4CAA4C;AAC5C,2EAA2E;AAC3E,8EAA8E;AAC9E,qCAAqC;AACrC,eAAe;AACf,8CAA8C;AAC9C,4BAA4B;AAC5B,6BAA6B;AAC7B,QAAQ;AACR,KAAK;AACL,EAAE;AACF,oCAAoC;AACpC,+BAA+B;AAC/B,KAAK;AACL,EAAE;AACF,+BAA+B;AAC/B,0BAA0B;AAC1B,KAAK;AAEL,IAAI,IAAI,GAAG,UAAC,EAAE,EAAE,KAAK;IACjB,SAAS,GAAG,IAAI,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IAClC,IAAI,IAAI,GAAG,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IAC7B,2DAA2D;IAC3D,4CAA4C;IAC5C,mDAAmD;IACnD,IAAI,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IAClE,8CAA8C;IAC9C,6EAA6E;AACjF,CAAC,CAAC;AAEF,IAAI,IAAI,GAAG;IACP,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;AACvB,CAAC,CAAC;AAEF,UAAU;AAEV,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IAC/B,MAAM,CAAC,aAAa,GAAG,EAAE,CAAC;IAC1B,MAAM,CAAC,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC;CACpC","sourcesContent":["// import {cli} from \"./cli/cli\";\nimport {message} from \"./message/messenger\";\nimport Messenger = message.Messenger;\n// var _ = require('underscore');\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\ndeclare let patcher: any;\n\n// let script: cli.Script;\n//\nlet messenger: Messenger;\n//\n// let args: cli.Arg[] = [];\n// let options: cli.Option[] = [];\n// let flags: cli.Flag[] = [];\n//\n// let path_interpreter;\n// let path_script;\n\n// let run = () => {\n//     script = new cli.Script(\n//         path_interpreter,\n//         path_script,\n//         flags,\n//         options,\n//         args,\n//         messenger,\n//         true\n//     );\n//     script.run()\n// };\n//\n// let set_arg = (name_arg, val_arg) => {\n//     if (_.contains(args.map((arg) => {return arg.name}), name_arg)) {\n//         let arg_existing = args.filter(arg => arg.name === name_arg)[0];\n//         arg_existing.set(val_arg);\n//     } else {\n//         let arg = new cli.Arg(name_arg);\n//         arg.set(val_arg);\n//         args.push(arg);\n//     }\n// };\n//\n// let set_flag = (name_flag, val_flag) => {\n//     if (_.contains(flags.map((flag) => {return flag.name}), name_flag)) {\n//         let flag_existing = flags.filter(flag => flag.name === name_flag)[0];\n//         flag_existing.set(val_flag);\n//     } else {\n//         let flag = new cli.Flag(name_flag);\n//         flag.set(val_flag);\n//         flags.push(flag);\n//     }\n// };\n//\n// let set_option = (name_opt, val_opt) => {\n//     if (_.contains(options.map((opt) => {return opt.name}), name_opt)) {\n//         let opt_existing = options.filter(opt => opt.name === name_opt)[0];\n//         opt_existing.set(val_opt);\n//     } else {\n//         let opt = new cli.Option(name_opt);\n//         opt.set(val_opt);\n//         options.push(opt);\n//     }\n// };\n//\n// let set_interpreter = (path) => {\n//     path_interpreter = path;\n// };\n//\n// let set_script = (path) => {\n//     path_script = path;\n// };\n\nlet main = (id, index) => {\n    messenger = new Messenger(env, 0);\n    let name = [id, index, '#0'];\n    // let name_object = ['receive', name.join('_')].join(' ');\n    // patcher.newobject(\"newobj\", name_object);\n    // let obj = patcher.newobject(\"receive\", \"thing\");\n    let obj = patcher.newdefault(100, 100, \"receive\", name.join('_'));\n    // var i = this.patcher.newobject (\"message\");\n    // messenger.message(['script', 'newobject', 'newobj', '@text', name_object])\n};\n\nlet test = () => {\n    main('aur_viz', 1);\n};\n\n// test();\n\nif (typeof Global !== \"undefined\") {\n    Global.format_script = {};\n    Global.format_script.main = main;\n}\n"]}