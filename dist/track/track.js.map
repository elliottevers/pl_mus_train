{"version":3,"file":"track.js","sourceRoot":"","sources":["../../src/track/track.ts"],"names":[],"mappings":"AAAA,iDAAiD;AACjD,qCAAqC;AACrC,gDAAgD;AAChD,qCAAqC;AACrC,4CAA4C;AAC5C,mCAAmC;AACnC,EAAE;AACF,2BAA2B;AAC3B,yCAAyC;AACzC,+BAA+B;AAC/B,qCAAqC;AACrC,4CAA4C;AAC5C,+BAA+B;AAC/B,EAAE;AACF,2DAA2D;AAC3D,iEAAiE;AACjE,SAAS;AACT,oCAAoC;AACpC,+BAA+B;AAC/B,kDAAkD;AAClD,mBAAmB;AACnB,gBAAgB;AAChB,SAAS;AACT,8DAA8D;AAC9D,SAAS;AACT,qCAAqC;AACrC,SAAS;AACT,kEAAkE;AAClE,sHAAsH;AACtH,SAAS;AACT,sCAAsC;AACtC,kCAAkC;AAClC,2CAA2C;AAC3C,iFAAiF;AACjF,4BAA4B;AAC5B,iDAAiD;AACjD,uBAAuB;AACvB,oBAAoB;AACpB,SAAS;AACT,uDAAuD;AACvD,qCAAqC;AACrC,wDAAwD;AACxD,4BAA4B;AAC5B,wDAAwD;AACxD,6BAA6B;AAC7B,uBAAuB;AACvB,oBAAoB;AACpB,eAAe;AACf,SAAS;AACT,kCAAkC;AAClC,YAAY;AACZ,EAAE;AACF,2BAA2B;AAC3B,EAAE;AACF,4BAA4B;AAC5B,EAAE;AACF,6CAA6C;AAC7C,0CAA0C;AAC1C,YAAY;AACZ,EAAE;AACF,gGAAgG;AAChG,+BAA+B;AAC/B,+BAA+B;AAC/B,qCAAqC;AACrC,8EAA8E;AAC9E,yBAAyB;AACzB,4CAA4C;AAC5C,oBAAoB;AACpB,iBAAiB;AACjB,YAAY;AACZ,EAAE;AACF,+BAA+B;AAC/B,EAAE;AACF,YAAY;AACZ,EAAE;AACF,qCAAqC;AACrC,EAAE;AACF,YAAY;AACZ,EAAE;AACF,gCAAgC;AAChC,EAAE;AACF,YAAY;AACZ,EAAE;AACF,0BAA0B;AAC1B,EAAE;AACF,YAAY;AACZ,EAAE;AACF,kCAAkC;AAClC,EAAE;AACF,YAAY;AACZ,EAAE;AACF,0CAA0C;AAC1C,EAAE;AACF,YAAY;AACZ,EAAE;AACF,4CAA4C;AAC5C,EAAE;AACF,YAAY;AACZ,EAAE;AACF,gFAAgF;AAChF,uCAAuC;AACvC,EAAE;AACF,YAAY;AACZ,EAAE;AACF,wCAAwC;AACxC,kDAAkD;AAClD,YAAY;AACZ,EAAE;AACF,oCAAoC;AACpC,qDAAqD;AACrD,YAAY;AACZ,EAAE;AACF,8GAA8G;AAC9G,gDAAgD;AAChD,sCAAsC;AACtC,kDAAkD;AAClD,wDAAwD;AACxD,sDAAsD;AACtD,oBAAoB;AACpB,gBAAgB;AAChB,oCAAoC;AACpC,YAAY;AACZ,QAAQ;AACR,EAAE;AACF,mCAAmC;AACnC,8CAA8C;AAC9C,sCAAsC;AACtC,QAAQ;AACR,EAAE;AACF,0DAA0D;AAC1D,EAAE;AACF,kCAAkC;AAClC,yBAAyB;AACzB,EAAE;AACF,+DAA+D;AAC/D,oDAAoD;AACpD,kCAAkC;AAClC,YAAY;AACZ,EAAE;AACF,yCAAyC;AACzC,0CAA0C;AAC1C,YAAY;AACZ,EAAE;AACF,gDAAgD;AAChD,sCAAsC;AACtC,6CAA6C;AAC7C,wDAAwD;AACxD,sCAAsC;AACtC,yDAAyD;AACzD,6BAA6B;AAC7B,yDAAyD;AACzD,8BAA8B;AAC9B,wBAAwB;AACxB,oBAAoB;AACpB,gBAAgB;AAChB,oCAAoC;AACpC,YAAY;AACZ,EAAE;AACF,6BAA6B;AAC7B,wEAAwE;AACxE,iBAAiB;AACjB,sCAAsC;AACtC,iBAAiB;AACjB,qCAAqC;AACrC,iBAAiB;AACjB,wDAAwD;AACxD,iBAAiB;AACjB,kDAAkD;AAClD,iBAAiB;AACjB,4CAA4C;AAC5C,iBAAiB;AACjB,sDAAsD;AACtD,oDAAoD;AACpD,uBAAuB;AACvB,mBAAmB;AACnB,iBAAiB;AACjB,mCAAmC;AACnC,EAAE;AACF,uCAAuC;AACvC,+DAA+D;AAC/D,mCAAmC;AACnC,wCAAwC;AACxC,gBAAgB;AAChB,2BAA2B;AAC3B,YAAY;AACZ,QAAQ;AACR,EAAE;AACF,8BAA8B;AAC9B,EAAE;AACF,uCAAuC;AACvC,EAAE;AACF,6CAA6C;AAC7C,uCAAuC;AACvC,YAAY;AACZ,EAAE;AACF,6BAA6B;AAC7B,qEAAqE;AACrE,EAAE;AACF,mCAAmC;AACnC,EAAE;AACF,kCAAkC;AAClC,EAAE;AACF,qDAAqD;AACrD,EAAE;AACF,+CAA+C;AAC/C,EAAE;AACF,yCAAyC;AACzC,EAAE;AACF,mDAAmD;AACnD,iDAAiD;AACjD,oBAAoB;AACpB,gBAAgB;AAChB,EAAE;AACF,gCAAgC;AAChC,YAAY;AACZ,QAAQ;AACR,IAAI","sourcesContent":["// import {live as li, live} from \"../live/live\";\n// import {clip} from \"../clip/clip\";\n// import {message} from \"../message/messenger\";\n// import {note} from \"../note/note\";\n// import TreeModel = require(\"tree-model\");\n// const _ = require('underscore');\n//\n// export namespace track {\n//     import LiveApiJs = live.LiveApiJs;\n//     import Clip = clip.Clip;\n//     import ClipDao = clip.ClipDao;\n//     import Messenger = message.Messenger;\n//     import Note = note.Note;\n//\n//     // export let get_notes_on_track = (path_track) => {\n//     //     let index_track = Number(path_track.split(' ')[2]);\n//     //\n//     //     let track = new Track(\n//     //         new TrackDao(\n//     //             new li.LiveApiJs(path_track)\n//     //         )\n//     //     );\n//     //\n//     //     let num_clip_slots = track.get_num_clip_slots();\n//     //\n//     //     let notes_amassed = [];\n//     //\n//     //     for (let i_clipslot of _.range(0, num_clip_slots)) {\n//     //         let path_clipslot = ['live_set', 'tracks', index_track, 'clip_slots', Number(i_clipslot)].join(' ');\n//     //\n//     //         let clip = new Clip(\n//     //             new ClipDao(\n//     //                 new li.LiveApiJs(\n//     //                     path_clipslot.split(' ').concat(['clip']).join(' ')\n//     //                 ),\n//     //                 new Messenger('max', 0)\n//     //             )\n//     //         );\n//     //\n//     //         notes_amassed = notes_amassed.concat(\n//     //             clip.get_notes(\n//     //                 clip.get_loop_bracket_lower(),\n//     //                 0,\n//     //                 clip.get_loop_bracket_upper(),\n//     //                 128\n//     //             )\n//     //         );\n//     //     }\n//     //\n//     //     return notes_amassed\n//     // };\n//\n//     export class Track {\n//\n//         public track_dao;\n//\n//         constructor(track_dao: TrackDao) {\n//             this.track_dao = track_dao;\n//         }\n//\n//         public static get_clip_at_index(index_track: number, index_clip_slot: number): Clip {\n//             return new Clip(\n//                 new ClipDao(\n//                     new LiveApiJs(\n//                         path_clipslot.split(' ').concat(['clip']).join(' ')\n//                     ),\n//                     new Messenger(env, 0)\n//                 )\n//             );\n//         }\n//\n//         public get_index() {\n//\n//         }\n//\n//         public load_clip_slots() {\n//\n//         }\n//\n//         public load_clips() {\n//\n//         }\n//\n//         public load() {\n//\n//         }\n//\n//         public delete_clips() {\n//\n//         }\n//\n//         public create_clip_at_index() {\n//\n//         }\n//\n//         public get_clip_slot_at_index() {\n//\n//         }\n//\n//         // TODO: should return null if the there aren't even that many scenes\n//         public get_clip_at_index() {\n//\n//         }\n//\n//         public get_num_clip_slots() {\n//             return this.get_clip_slots().length\n//         }\n//\n//         public get_clip_slots() {\n//             return this.track_dao.get_clip_slots()\n//         }\n//\n//         // NB: assumes that the clips form a perfect partition of the duration inside the start, end marker\n//         get_notes(): TreeModel.Node<Note>[] {\n//             let notes_amassed = [];\n//             for (let clip of this.clip_slots) {\n//                 notes_amassed = notes_amassed.concat(\n//                     clip.get_notes_within_markers()\n//                 )\n//             }\n//             return notes_amassed;\n//         }\n//     }\n//\n//     export interface iTrackDao {\n//         get_notes(): TreeModel.Node<Note>[]\n//         get_clip_slots(int: number)\n//     }\n//\n//     export class TrackDaoVirtual implements iTrackDao {\n//\n//         num_clip_slots: number;\n//         clips: Clip[];\n//\n//         constructor(num_clip_slots: number, clips: Clip[]) {\n//             this.num_clip_slots = num_clip_slots;\n//             this.clips = clips;\n//         }\n//\n//         get_num_clip_slots(): number {\n//             return this.num_clip_slots;\n//         }\n//\n//         get_notes(): TreeModel.Node<Note>[] {\n//             let notes_amassed = [];\n//             for (let clip of this.clips) {\n//                 notes_amassed = notes_amassed.concat(\n//                     clip.get_notes(\n//                         clip.get_loop_bracket_lower(),\n//                         0,\n//                         clip.get_loop_bracket_upper(),\n//                         128\n//                     )\n//                 )\n//             }\n//             return notes_amassed;\n//         }\n//\n//         get_clip_slots() {\n//             // let data_clip_slots = this.live_api.get(\"clip_slots\");\n//             //\n//             // let clip_slots = [];\n//             //\n//             // let clip_slot = [];\n//             //\n//             // for (let i_datum in data_clip_slots) {\n//             //\n//             //     let datum = Number(i_datum);\n//             //\n//             //     clip_slot.push(datum);\n//             //\n//             //     if (Number(i_datum) % 2 === 1) {\n//             //         clip_slots.push(clip_slot)\n//             //     }\n//             // }\n//             //\n//             // return clip_slots\n//\n//             let data: string[] = [];\n//             for (let i of _.range(0, this.num_clip_slots)) {\n//                 data.push('id');\n//                 data.push(String(i));\n//             }\n//             return data;\n//         }\n//     }\n//\n//     export class TrackDao {\n//\n//         private live_api: LiveApiJs;\n//\n//         constructor(live_api: LiveApiJs) {\n//             this.live_api = live_api\n//         }\n//\n//         get_clip_slots() {\n//             let data_clip_slots = this.live_api.get(\"clip_slots\");\n//\n//             let clip_slots = [];\n//\n//             let clip_slot = [];\n//\n//             for (let i_datum in data_clip_slots) {\n//\n//                 let datum = Number(i_datum);\n//\n//                 clip_slot.push(datum);\n//\n//                 if (Number(i_datum) % 2 === 1) {\n//                     clip_slots.push(clip_slot)\n//                 }\n//             }\n//\n//             return clip_slots\n//         }\n//     }\n// }"]}