{"version":3,"file":"collect_parameters.js","sourceRoot":"","sources":["../../src/scripts/collect_parameters.ts"],"names":[],"mappings":";;AAAA,kDAA6C;AAC7C,IAAO,SAAS,GAAG,mBAAO,CAAC,SAAS,CAAC;AAarC,IAAI,GAAG,GAAW,KAAK,CAAC;AAExB,IAAI,GAAG,KAAK,KAAK,EAAE;IACf,IAAI,CAAC,sBAAsB,CAAC,CAAC;IAC7B,SAAS,GAAG,CAAC,CAAC;CACjB;AAED,IAAI,sBAAsB,GAAG,EAAE,CAAC;AAEhC,IAAI,KAAK,GAAG;IACR,sBAAsB,GAAG,EAAE,CAAC;AAChC,CAAC,CAAC;AAEF,IAAI,MAAM,GAAG,UAAC,UAAkB,EAAE,QAAgB;IAC9C,sBAAsB,CAAC,UAAU,CAAC,GAAG,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAC7D,CAAC,CAAC;AAEF,IAAI,GAAG,GAAG;IAEN,IAAI,SAAS,GAAG,IAAI,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IAEtC,IAAI,WAAW,GAAG,EAAE,CAAC;IAErB,KAAuB,UAAmC,EAAnC,KAAA,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,EAAnC,cAAmC,EAAnC,IAAmC,EAAE;QAAvD,IAAI,UAAU,SAAA;QACf,IAAI,sBAAsB,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;YAC1C,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;SAE/B;KACJ;IAED,SAAS,CAAC,OAAO,CAAC,CAAC,iBAAiB,EAAE,IAAI,CAAC,GAAG,OAAR,IAAI,EAAQ,WAAW,EAAE,CAAC,CAAC;IACjE,SAAS,CAAC,OAAO,CAAC,CAAC,iBAAiB,EAAE,IAAI,CAAC,GAAG,OAAR,IAAI,EAAQ,WAAW,EAAE,CAAC,CAAC;IACjE,SAAS,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAA;AACtC,CAAC,CAAC;AAEF,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IAC/B,MAAM,CAAC,kBAAkB,GAAG,EAAE,CAAC;IAC/B,MAAM,CAAC,kBAAkB,CAAC,MAAM,GAAG,MAAM,CAAC;IAC1C,MAAM,CAAC,kBAAkB,CAAC,KAAK,GAAG,KAAK,CAAC;IACxC,MAAM,CAAC,kBAAkB,CAAC,GAAG,GAAG,GAAG,CAAC;CACvC","sourcesContent":["import {message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\ndeclare let Dict: any;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet pitches_discretization = {};\n\nlet reset = () => {\n    pitches_discretization = {};\n};\n\nlet accept = (pitch_midi: number, velocity: number) => {\n    pitches_discretization[pitch_midi] = velocity > 0 ? 1 : 0\n};\n\nlet run = () => {\n\n    let messenger = new Messenger(env, 0);\n\n    let pitches_set = [];\n\n    for (let pitch_midi of Object.keys(pitches_discretization)) {\n        if (pitches_discretization[pitch_midi] === 1) {\n            pitches_set.push(pitch_midi)\n\n        }\n    }\n\n    messenger.message(['note_midi_lower', Math.min(...pitches_set)]);\n    messenger.message(['note_midi_upper', Math.max(...pitches_set)]);\n    messenger.message(['run', 'bang'])\n};\n\nif (typeof Global !== \"undefined\") {\n    Global.collect_parameters = {};\n    Global.collect_parameters.accept = accept;\n    Global.collect_parameters.reset = reset;\n    Global.collect_parameters.run = run;\n}\n"]}