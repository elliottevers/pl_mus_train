{"version":3,"file":"handle_user_input.js","sourceRoot":"","sources":["../../src/scripts/handle_user_input.ts"],"names":[],"mappings":";;AAAA,kDAA2D;AAC3D,IAAO,SAAS,GAAG,mBAAO,CAAC,SAAS,CAAC;AACrC,qCAA8C;AAK9C,wCAAkC;AAClC,qCAAuC;AAKvC,IAAO,MAAM,GAAG,YAAG,CAAC,MAAM,CAAC;AAiB3B,IAAI,GAAG,GAAW,KAAK,CAAC;AAExB,IAAI,GAAG,KAAK,KAAK,EAAE;IACf,IAAI,CAAC,sBAAsB,CAAC,CAAC;IAC7B,SAAS,GAAG,CAAC,CAAC;CACjB;AAED,IAAI,SAAS,GAAc,IAAI,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AAEjD,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC;AAE7B,IAAI,QAAQ,GAAG,IAAI,WAAC,CAAC,OAAO,CACxB,IAAI,WAAE,CAAC,SAAS,CAAC,UAAU,EAAE,GAAG,CAAC,EACjC,IAAI,mBAAC,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE,MAAM,CAAC,EAC/B,IAAI,CACP,CAAC;AAEF,IAAI,IAAI,GAAW,IAAI,WAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAIxC,IAAI,WAAqC,CAAC;AAE1C,IAAI,eAAuB,CAAC;AAE5B,IAAI,YAAoB,CAAC;AAEzB,IAAI,eAAwB,CAAC;AAE7B,IAAI,gBAAiC,CAAC;AAEtC,IAAI,mBAAsC,CAAC;AAE3C,IAAI,mBAAsC,CAAC;AAE3C,IAAI,wBAAgC,CAAC;AAErC,IAAI,gBAAwB,CAAC;AAI7B,IAAI,cAAwC,CAAC;AAM7C,IAAI,OAAO,GAAG;IAEV,WAAW,GAAG,eAAe,CAAC,SAAS,CACnC,eAAe,CAAC,UAAU,EAC1B,CAAC,EACD,eAAe,CAAC,QAAQ,GAAG,eAAe,CAAC,UAAU,EACrD,GAAG,CACN,CAAC;IAEF,WAAW,CACP,WAAW,EACX,eAAe,CAAC,UAAU,EAC1B,eAAe,CAAC,QAAQ,CAC3B,CAAC;AACN,CAAC,CAAC;AAEF,sBAAsB;AACtB,cAAc;AACd,0BAA0B;AAC1B,KAAK;AACL,EAAE;AACF,uBAAuB;AACvB,EAAE;AACF,KAAK;AACL,EAAE;AACF,sBAAsB;AACtB,EAAE;AACF,KAAK;AAEL,IAAI,IAAI,GAAG,UAAC,QAAQ;IAChB,uBAAuB;IACvB,wBAAwB;IACxB,mBAAmB;IACnB,QAAQ;IACR,IAAI;IACJ,IAAI,MAAM,GAAG,IAAI,WAAW,CACxB,GAAG,CACN,CAAC;IACF,IAAI,YAAY,GAAG,MAAM,CAAC,IAAI,CAC1B,QAAQ,CACX,CAAC;IACF,wBAAwB;AAC5B,CAAC,CAAC;AAEF,IAAI,IAAI,GAAG,UAAC,QAAQ;IAChB,oBAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5B,YAAY,CAAC,eAAe,EAAE,IAAI,CAAC,CAAA;AACvC,CAAC,CAAC;AAEF,IAAI,OAAO,GAAG,IAAI,YAAY,CAC1B,MAAM,CACT,CAAC;AAEF,OAAO,CAAC,MAAM,CACV,OAAO,EACP,eAAe,CAClB,CAAC;AAEF,IAAI,MAAM,GAAG,IAAI,WAAW,CACxB,MAAM,CACT,CAAC;AAEF,IAAI,YAAY,GAAG,MAAM,CAAC,IAAI,CAC1B,eAAe,CAClB,CAAC;AAEF,YAAY,CAAC,MAAM,EAElB,CAAC","sourcesContent":["import {message as m, message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {live, live as li} from \"../live/live\";\nimport {clip as c} from \"../clip/clip\";\nimport {window as w} from \"../render/window\";\nimport {note as n} from \"../note/note\";\nimport TreeModel = require(\"tree-model\");\nimport {log} from \"../log/logger\";\nimport {song as s} from \"../song/song\";\nimport {segment} from \"../segment/segment\";\nimport Segment = segment.Segment;\nimport SegmentIterator = segment.SegmentIterator;\nimport {utils} from \"../utils/utils\";\nimport Logger = log.Logger;\nimport LiveClipVirtual = live.LiveClipVirtual;\nimport {parse} from \"../parse/parse\";\nimport TreeDepthIterator = parse.TreeDepthIterator;\nimport ParseTreeIterator = parse.ParseTreeIterator;\nimport ParseMatrix = parse.ParseMatrix;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet messenger: Messenger = new Messenger(env, 0);\n\nlet logger = new Logger(env);\n\nlet song_dao = new s.SongDao(\n    new li.LiveApiJs(\"live_set\", env),\n    new m.Messenger(env, 0, \"song\"),\n    true\n);\n\nlet song: s.Song = new s.Song(song_dao);\n\nexport let pwindow: w.Pwindow;\n\nlet elaboration: TreeModel.Node<n.Note>[];\n\nlet clip_user_input: c.Clip;\n\nlet clip_segment: c.Clip;\n\nlet segment_current: Segment;\n\nlet segment_iterator: SegmentIterator;\n\nlet tree_depth_iterator: TreeDepthIterator;\n\nlet parse_tree_iterator: ParseTreeIterator;\n\nlet layer_parse_tree_current: number;\n\nlet depth_parse_tree: number;\n\nexport let parse_matrix: ParseMatrix;\n\nlet notes_segments: TreeModel.Node<n.Note>[];\n\n\n\n\n\nlet confirm = () => {\n\n    elaboration = clip_user_input.get_notes(\n        segment_current.beat_start,\n        0,\n        segment_current.beat_end - segment_current.beat_start,\n        128\n    );\n\n    add_to_tree(\n        elaboration,\n        segment_current.beat_start,\n        segment_current.beat_end\n    );\n};\n\n// let start = () => {\n//     message\n//     this.messenger.mess\n// };\n//\n// let resume = () => {\n//\n// };\n//\n// let pause = () => {\n//\n// };\n\nlet load = (filename) => {\n    // start_session_train(\n    //     ParseMatrix.load(\n    //         filename\n    //     )\n    // )\n    let thawer = new TrainThawer(\n        env\n    );\n    let train_thawed = thawer.thaw(\n        filename\n    );\n    // train_thawed.resume()\n};\n\nlet save = (filename) => {\n    parse_matrix.save(filename);\n    stop_session(clip_user_input, song)\n};\n\nlet freezer = new TrainFreezer(\n    'node'\n);\n\nfreezer.freeze(\n    trainer,\n    '/path/to/file'\n);\n\nlet thawer = new TrainThawer(\n    'node'\n);\n\nlet train_thawed = thawer.thaw(\n    '/path/to/file'\n);\n\ntrain_thawed.render(\n\n);"]}