{"version":3,"file":"track_test.js","sourceRoot":"","sources":["../../src/scripts/track_test.ts"],"names":[],"mappings":";;AAEA,qCAA8C;AAE9C,IAAO,SAAS,GAAG,WAAI,CAAC,SAAS,CAAC;AAClC,wCAAkC;AAClC,IAAO,MAAM,GAAG,YAAG,CAAC,MAAM,CAAC;AAQ3B,wCAAqC;AACrC,IAAO,QAAQ,GAAG,aAAK,CAAC,QAAQ,CAAC;AACjC,IAAO,KAAK,GAAG,aAAK,CAAC,KAAK,CAAC;AAa3B,IAAI,GAAG,GAAW,KAAK,CAAC;AAExB,IAAI,GAAG,KAAK,KAAK,EAAE;IACf,IAAI,CAAC,sBAAsB,CAAC,CAAC;IAC7B,SAAS,GAAG,CAAC,CAAC;CACjB;AAGD,IAAI,IAAI,GAAG;IACP,IAAI,KAAK,GAAG,IAAI,KAAK,CACjB,IAAI,QAAQ,CACR,IAAI,SAAS,CACT,mBAAmB,CACtB,CACJ,CACJ,CAAC;IAEF,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC;IAE7B,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC,CAAC;AAC3C,CAAC,CAAC;AAEF,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IAC/B,MAAM,CAAC,UAAU,GAAG,EAAE,CAAC;IACvB,MAAM,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;CACjC","sourcesContent":["import {message as m, message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {live, live as li} from \"../live/live\";\nimport {clip, clip as c} from \"../clip/clip\";\nimport LiveApiJs = live.LiveApiJs;\nimport {log} from \"../log/logger\";\nimport Logger = log.Logger;\nimport {io} from \"../io/io\";\nimport Exporter = io.Exporter;\nimport {utils} from \"../utils/utils\";\nimport {harmony} from \"../music/harmony\";\nimport Harmony = harmony.Harmony;\nimport ClipDao = clip.ClipDao;\nimport Clip = clip.Clip;\nimport {track} from \"../track/track\";\nimport TrackDao = track.TrackDao;\nimport Track = track.Track;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\ndeclare let Dict: any;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\n\nlet test = () => {\n    let track = new Track(\n        new TrackDao(\n            new LiveApiJs(\n                'live_set tracks 2'\n            )\n        )\n    );\n\n    let logger = new Logger(env);\n\n    logger.log(track.get_num_clip_slots());\n};\n\nif (typeof Global !== \"undefined\") {\n    Global.track_test = {};\n    Global.track_test.test = test;\n}\n"]}