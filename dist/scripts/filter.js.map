{"version":3,"file":"filter.js","sourceRoot":"","sources":["../../src/scripts/filter.ts"],"names":[],"mappings":";;AAAA,kDAA2D;AAC3D,IAAO,SAAS,GAAG,mBAAO,CAAC,SAAS,CAAC;AACrC,qCAA8C;AAC9C,qCAA6C;AAC7C,IAAO,SAAS,GAAG,WAAI,CAAC,SAAS,CAAC;AAQlC,IAAO,OAAO,GAAG,WAAI,CAAC,OAAO,CAAC;AAC9B,IAAO,IAAI,GAAG,WAAI,CAAC,IAAI,CAAC;AAaxB,IAAI,GAAG,GAAW,KAAK,CAAC;AAExB,IAAI,GAAG,KAAK,KAAK,EAAE;IACf,IAAI,CAAC,sBAAsB,CAAC,CAAC;IAC7B,SAAS,GAAG,CAAC,CAAC;CACjB;AAED,IAAI,cAAc,GAAG,EAAE,CAAC;AACxB,IAAI,cAAc,GAAG,EAAE,CAAC;AACxB,+BAA+B;AAE/B,IAAI,QAAQ,GAAG;IACX,IAAI,WAAW,GAAG,IAAI,WAAE,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IAElD,IAAI,gBAAgB,GAAG,WAAW,CAAC,QAAQ,EAAE,CAAC;IAE9C,IAAI,gBAAgB,GAAG,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAEnD,IAAI,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;IAEnD,IAAI,SAAS,GAAG,CAAC,UAAU,EAAE,QAAQ,EAAE,gBAAgB,EAAE,YAAY,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAE9F,OAAO,IAAI,IAAI,CACX,IAAI,OAAO,CACP,IAAI,SAAS,CACT,SAAS,CACZ,EACD,IAAI,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CACxB,CACJ,CAAC;AACN,CAAC,CAAC;AAEF,IAAI,IAAI,GAAG;IAEP,IAAI,IAAI,GAAG,QAAQ,EAAE,CAAC;IAEtB,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;QAC7B,cAAc,GAAG,IAAI,CAAC,SAAS,CAC3B,IAAI,CAAC,gBAAgB,EAAE,EACvB,CAAC,EACD,IAAI,CAAC,cAAc,EAAE,EACrB,GAAG,CACN,CAAA;KACJ;IAED,IAAI,CAAC,YAAY,CACb,IAAI,CAAC,gBAAgB,EAAE,EACvB,CAAC,EACD,IAAI,CAAC,cAAc,EAAE,EACrB,GAAG,CACN,CAAC;IAEF,IAAI,CAAC,SAAS,CACV,cAAc,CACjB,CAAA;AAEL,CAAC,CAAC;AAEF,IAAI,MAAM,GAAG,UAAC,WAAmB;IAE7B,IAAI,IAAI,GAAG,QAAQ,EAAE,CAAC;IAEtB,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;QAC7B,cAAc,GAAG,IAAI,CAAC,SAAS,CAC3B,IAAI,CAAC,gBAAgB,EAAE,EACvB,CAAC,EACD,IAAI,CAAC,cAAc,EAAE,EACrB,GAAG,CACN,CAAA;KACJ;IAED,IAAI,CAAC,YAAY,CACb,IAAI,CAAC,gBAAgB,EAAE,EACvB,CAAC,EACD,IAAI,CAAC,cAAc,EAAE,EACrB,GAAG,CACN,CAAC;IAGF,IAAI,CAAC,SAAS,CACV,cAAc,CAAC,MAAM,CAAC,UAAC,IAAI;QACvB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,IAAI,WAAW,CAAA;IACxD,CAAC,CAAC,CACL,CAAA;AACL,CAAC,CAAC;AAEF,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IAC/B,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC;IACnB,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;IAC9B,MAAM,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;CAC7B","sourcesContent":["import {message as m, message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {live, live as li} from \"../live/live\";\nimport {clip, clip as c} from \"../clip/clip\";\nimport LiveApiJs = live.LiveApiJs;\nimport {log} from \"../log/logger\";\nimport Logger = log.Logger;\nimport {io} from \"../io/io\";\nimport Exporter = io.Exporter;\nimport {utils} from \"../utils/utils\";\nimport {harmony} from \"../music/harmony\";\nimport Harmony = harmony.Harmony;\nimport ClipDao = clip.ClipDao;\nimport Clip = clip.Clip;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\ndeclare let Dict: any;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet notes_original = [];\nlet notes_filtered = [];\n// let cached: boolean = false;\n\nlet get_clip = () => {\n    let this_device = new li.LiveApiJs('this_device');\n\n    let path_this_device = this_device.get_path();\n\n    let list_this_device = path_this_device.split(' ');\n\n    let index_this_track = Number(list_this_device[2]);\n\n    let path_clip = ['live_set', 'tracks', index_this_track, 'clip_slots', '0', 'clip'].join(' ');\n\n    return new Clip(\n        new ClipDao(\n            new LiveApiJs(\n                path_clip\n            ),\n            new Messenger(env, 0)\n        )\n    );\n};\n\nlet undo = () => {\n\n    let clip = get_clip();\n\n    if (notes_original.length === 0) {\n        notes_original = clip.get_notes(\n            clip.get_start_marker(),\n            0,\n            clip.get_end_marker(),\n            128\n        )\n    }\n\n    clip.remove_notes(\n        clip.get_start_marker(),\n        0,\n        clip.get_end_marker(),\n        128\n    );\n\n    clip.set_notes(\n        notes_original\n    )\n\n};\n\nlet filter = (length_beat: number) => {\n\n    let clip = get_clip();\n\n    if (notes_original.length === 0) {\n        notes_original = clip.get_notes(\n            clip.get_start_marker(),\n            0,\n            clip.get_end_marker(),\n            128\n        )\n    }\n\n    clip.remove_notes(\n        clip.get_start_marker(),\n        0,\n        clip.get_end_marker(),\n        128\n    );\n\n\n    clip.set_notes(\n        notes_original.filter((node) => {\n            return node.model.note.beats_duration >= length_beat\n        })\n    )\n};\n\nif (typeof Global !== \"undefined\") {\n    Global.filter = {};\n    Global.filter.filter = filter;\n    Global.filter.undo = undo;\n}\n"]}