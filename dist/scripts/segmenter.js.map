{"version":3,"file":"segmenter.js","sourceRoot":"","sources":["../../src/scripts/segmenter.ts"],"names":[],"mappings":"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","sourcesContent":["import {message as m, message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {live, live as li} from \"../live/live\";\nimport {log} from \"../log/logger\";\nimport Logger = log.Logger;\nimport {utils} from \"../utils/utils\";\nimport {segment} from \"../segment/segment\";\nimport Segment = segment.Segment;\nimport {song as module_song} from \"../song/song\";\nimport SongDao = module_song.SongDao;\nimport Song = module_song.Song;\nimport LiveApiJs = live.LiveApiJs;\nimport {track as module_track} from \"../track/track\";\nimport TrackDao = module_track.TrackDao;\nimport Track = module_track.Track;\nimport {scene as module_scen} from \"../scene/scene\";\nimport Scene = module_scen.Scene;\nimport {clip_slot as module_clipslot} from \"../clip_slot/clip_slot\";\nimport ClipSlot = module_clipslot.ClipSlot;\nimport {clip} from \"../clip/clip\";\nimport ClipDao = clip.ClipDao;\nimport Clip = clip.Clip;\nimport ClipSlotDao = module_clipslot.ClipSlotDao;\nconst _ = require('underscore');\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\ndeclare let Dict: any;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet messenger = new Messenger(env, 0);\n\n// get the first clip and use its start and end markers to determine the length of the entire song\nlet get_length_beats = () => {\n    let this_device = new LiveApiJs('this_device');\n\n    let track = new Track(\n        new TrackDao(\n            new LiveApiJs(\n                utils.get_path_track_from_path_device(this_device.get_path())\n            ),\n            messenger\n        )\n    );\n\n    track.load_clip_slots();\n\n    let clip_slot = track.get_clip_slot_at_index(0);\n\n    clip_slot.load_clip();\n\n    let clip = clip_slot.get_clip();\n\n    // let clip: Clip = utils.get_clip_on_this_device_at_index(0);\n\n    return clip.get_end_marker() - clip.get_start_marker()\n\n    // let segments_first_clip = new Clip(\n    //     new ClipDao(\n    //         new LiveApiJs(\n    //             this_device.get_path().split(' ').slice(0, 3).concat(['clip_slots', '0', 'clip']).join(' ')\n    //         ),\n    //         new Messenger(env, 0)\n    //     )\n    // );\n    //\n    // return segments_first_clip.get_end_marker() - segments_first_clip.get_start_marker()\n};\n\nlet expand_segments = () => {\n    let this_device = new li.LiveApiJs('this_device');\n    //\n    // let path_this_device = this_device.get_path();\n    //\n    // let list_this_device = path_this_device.split(' ');\n    //\n    // let index_this_track = Number(list_this_device[2]);\n\n    let track = new Track(\n        new TrackDao(\n            new LiveApiJs(\n                utils.get_path_track_from_path_device(this_device.get_path())\n            ),\n            messenger\n        )\n    );\n\n    expand_track(track.get_path())\n};\n\nlet contract_segments = () => {\n    let this_device = new li.LiveApiJs('this_device');\n    //\n    // let path_this_device = this_device.get_path();\n    //\n    // let list_this_device = path_this_device.split(' ');\n    //\n    // let index_this_track = Number(list_this_device[2]);\n\n    let track = new Track(\n        new TrackDao(\n            new LiveApiJs(\n                utils.get_path_track_from_path_device(this_device.get_path())\n            ),\n            messenger\n        )\n    );\n\n    contract_track(track.get_path())\n};\n\nlet expand_selected_track = () => {\n    expand_track('live_set view selected_track')\n};\n\nlet contract_selected_track = () => {\n    contract_track('live_set view selected_track')\n};\n\n// Assumption: all clips on \"segment track have same length\"\n\n// NB: works without highlighting any tracks\n// aggregate all the notes in the track's clips\n// delete all the track's clips\n// set the notes inside of the single clip\nlet contract_track = (path_track) => {\n\n    let logger = new Logger(env);\n\n    // let thing = new ClipSlot(\n    //     new ClipSlotDao(\n    //         new LiveApiJs('id 267'),\n    //         messenger\n    //     )\n    // );\n    //\n    // thing.load_clip()\n    //\n    // logger.log(JSON.stringify(thing.get_clip().get_start_marker()));\n    //\n    // logger.log(JSON.stringify(thing.get_clip().get_end_marker()));\n    //\n    //\n    // return;\n\n    // length of first clip\n    let length_beats = get_length_beats();\n\n    let track = new Track(\n        new TrackDao(\n            new li.LiveApiJs(\n                path_track\n            ),\n            messenger\n        )\n    );\n\n    // clip_slots and clips\n    track.load_clips();\n\n    let notes = track.get_notes();\n\n    // logger.log(JSON.stringify(notes));\n\n    track.delete_clips();\n\n    track.create_clip_at_index(0, length_beats);\n\n    let clip_slot = track.get_clip_slot_at_index(0);\n\n    clip_slot.load_clip();\n\n    let clip = clip_slot.get_clip();\n\n    clip.set_notes(notes);\n\n    clip.set_endpoint_markers(0, length_beats);\n\n    clip.set_endpoints_loop(0, length_beats);\n\n\n\n    // for (let clip_slot of track.get_clip_slots()) {\n    //\n    //     if (clip_slot.get_index() === 0) {\n    //         continue\n    //     }\n    //\n    //     if (clip_slot.b_has_clip()) {\n    //         let clip = clip_slot.clip;\n    //         clip_slot.clip.get_notes_within_markers()\n    //     }\n    //\n    //\n    // }\n\n\n\n    // TODO: the following is one layer of abstraction below the DAO\n    // let track = new li.LiveApiJs(path_track);\n\n    // let list_path_track_with_index = track.get_path().split(' ').map((el) => {\n    //     return el.replace('\\\"', '')\n    // });\n    //\n    // let index_track = Number(list_path_track_with_index[2]);\n    //\n    // track = new li.LiveApiJs(list_path_track_with_index.join(' '));\n    //\n    // let num_clipslots = track.get(\"clip_slots\").length/2;\n\n    // let notes_amassed = [];\n    //\n    // // first, amass all notes of clips and delete all clips\n    //\n    // for (let i_clipslot of _.range(0, num_clipslots)) {\n    //     let path_clipslot = ['live_set', 'tracks', index_track, 'clip_slots', Number(i_clipslot)].join(' ');\n    //\n    //     let api_clipslot_segment = new li.LiveApiJs(path_clipslot);\n    //\n    //     let clip_segment = new Clip(\n    //         new ClipDao(\n    //             new li.LiveApiJs(\n    //                 path_clipslot.split(' ').concat(['clip']).join(' ')\n    //             ),\n    //             new Messenger(env, 0)\n    //         )\n    //     );\n    //     notes_amassed = notes_amassed.concat(\n    //         clip_segment.get_notes(\n    //             clip_segment.get_loop_bracket_lower(),\n    //             0,\n    //             clip_segment.get_loop_bracket_upper(),\n    //             128\n    //         )\n    //     );\n    //\n    //     api_clipslot_segment.call('delete_clip')\n    // }\n    //\n    // // create one clip of length \"length_beats\"\n    //\n    // let path_clipslot_contracted = ['live_set', 'tracks', String(index_track), 'clip_slots', String(0)];\n    //\n    // let api_clipslot_contracted = new li.LiveApiJs(\n    //     path_clipslot_contracted.join(' ')\n    // );\n    //\n    // api_clipslot_contracted.call('create_clip', String(length_beats));\n    //\n    // let clip_contracted = new Clip(\n    //     new ClipDao(\n    //         new li.LiveApiJs(\n    //             path_clipslot_contracted.concat(['clip']).join(' ')\n    //         ),\n    //         new Messenger(env, 0)\n    //     )\n    // );\n    //\n    // // add the amassed notes to it\n    //\n    // clip_contracted.set_notes(\n    //     notes_amassed\n    // )\n};\n\n// export let get_notes_on_track = (path_track) => {\n//     let index_track = Number(path_track.split(' ')[2]);\n//\n//     let track = new li.LiveApiJs(path_track);\n//\n//     let num_clipslots = track.get(\"clip_slots\").length/2;\n//\n//     let notes_amassed = [];\n//\n//     for (let i_clipslot of _.range(0, num_clipslots)) {\n//         let path_clipslot = ['live_set', 'tracks', index_track, 'clip_slots', Number(i_clipslot)].join(' ');\n//\n//         let clip = new Clip(\n//             new ClipDao(\n//                 new li.LiveApiJs(\n//                     path_clipslot.split(' ').concat(['clip']).join(' ')\n//                 ),\n//                 new Messenger(env, 0)\n//             )\n//         );\n//\n//         notes_amassed = notes_amassed.concat(\n//             clip.get_notes(\n//                 clip.get_loop_bracket_lower(),\n//                 0,\n//                 clip.get_loop_bracket_upper(),\n//                 128\n//             )\n//         );\n//     }\n//\n//     return notes_amassed\n// };\n\n\n// TODO: we can't export this, because it could be called from a different track than the one the segments are on...\n// NB: assumes the device that calls this is on the track of segments\nlet get_notes_segments = () => {\n    let this_device = new li.LiveApiJs('this_device');\n\n    let track_segments = new Track(\n        new TrackDao(\n            new LiveApiJs(\n                utils.get_path_track_from_path_device(this_device.get_path())\n            ),\n            messenger\n        )\n    );\n\n    track_segments.load_clips();\n\n    return track_segments.get_notes();\n};\n\n// 'live_set view highlighted_clip_slot'\n\nlet test = () => {\n\n};\n\nlet expand_selected_audio_track = () => {\n    expand_track_audio('live_set view selected_track')\n};\n\nlet contract_selected_audio_track = () => {\n    contract_track_audio('live_set view selected_track')\n};\n\n// NB: we assume all training data starts on the first beat\nlet contract_track_audio = (path_track) => {\n\n    let length_beats = get_length_beats();\n\n    let track = new Track(\n        new TrackDao(\n            new li.LiveApiJs(path_track),\n            messenger\n        )\n    );\n\n    track.load_clips();\n\n    let clip_slots = track.get_clip_slots();\n\n    for (let i_clip_slot_audio in clip_slots) {\n\n        let clip_slot_audio = clip_slots[Number(i_clip_slot_audio)];\n\n        if (Number(i_clip_slot_audio) === 0) {\n            clip_slot_audio.clip.set_endpoint_markers(0, length_beats);\n\n            continue\n        }\n\n        if (clip_slot_audio.b_has_clip()) {\n            clip_slot_audio.delete_clip()\n        }\n    }\n\n    // let track = new li.LiveApiJs(path_track);\n\n    // let list_path_track_with_index = track.get_path().split(' ').map((el) => {\n    //     return el.replace('\\\"', '')\n    // });\n\n    // let index_track = Number(list_path_track_with_index[2]);\n    //\n    // track = new li.LiveApiJs(list_path_track_with_index.join(' '));\n\n    // let num_clipslots = track.get(\"clip_slots\").length/2;\n\n    // let notes_segments = get_notes_segments();\n\n    // for (let i_clipslot of _.range(1, num_clipslots)) {\n    //     let path_clipslot = ['live_set', 'tracks', index_track, 'clip_slots', Number(i_clipslot)].join(' ');\n    //\n    //     let api_clipslot_segment = new li.LiveApiJs(path_clipslot);\n    //\n    //     api_clipslot_segment.call('delete_clip')\n    // }\n    //\n    // let path_clipslot_contracted = ['live_set', 'tracks', String(index_track), 'clip_slots', String(0)];\n    //\n    // let clip_contracted = new Clip(\n    //     new ClipDao(\n    //         new li.LiveApiJs(\n    //             path_clipslot_contracted.concat(['clip']).join(' ')\n    //         ),\n    //         new Messenger(env, 0)\n    //     )\n    // );\n    //\n    // clip_contracted.set_endpoints_loop(0, length_beats);\n};\n\nlet expand_track_audio = (path_track) => {\n\n    // let length_beats = get_length_beats();\n\n    // let clipslot_audio = new li.LiveApiJs(path_clip_slot);\n\n    // let track = new li.LiveApiJs(clipslot_audio.get_path().split(' ').slice(0, 3).join(' '));\n\n    // let index_track = clipslot_audio.get_path().split(' ')[2];\n\n    // let num_clipslots = track.get(\"clip_slots\").length/2;\n\n    let track = new Track(\n        new TrackDao(\n            new LiveApiJs(\n                path_track\n            ),\n            messenger\n        )\n    );\n\n    let clip_slot_audio = track.get_clip_slot_at_index(0);\n\n    // TODO: we won't need to do this since we will be creating new ones anyway\n    // track.load();\n\n    let notes_segments = get_notes_segments();\n\n    let song = new Song(\n        new SongDao(\n            new li.LiveApiJs(\n                'live_set'\n            ),\n            new Messenger(env, 0),\n            true\n        )\n    );\n\n    song.set_path_deferlow('set_path_song');\n\n    for (let i_clipslot of _.range(1, notes_segments.length)) {\n        let note_segment = notes_segments[Number(i_clipslot)];\n        // let notes_segments\n        // let clip_slot = new ClipSlot(\n        //     new ClipSlotDao(\n        //         // utils.get_clipslot_at_index(Number(i_clipslot))\n        //     )\n        // );\n\n        let scene: Scene = song.get_scene_at_index(Number(i_clipslot));\n\n        // if (track.get_clip_slot_at_index(Number(i_clipslot)) === null) {\n        //     let scen\n        // }\n\n        let scene_exists = scene !== null;\n\n        if (scene_exists) {\n            song.create_scene_at_index(Number(i_clipslot))\n        }\n\n        // let clipslot = new li.LiveApiJs(path_clipslot);\n\n        let clip_slot = track.get_clip_slot_at_index(Number(i_clipslot));\n\n        // let clip_slot = new ClipSlot(\n        //     new ClipSlotDao(\n        //         new LiveApiJs(\n        //             utils.get_path_clip_slot_at\n        //         )\n        //     )\n        // )\n\n        // let has_clip = clipslot.get(\"has_clip\")[0] === 1;\n\n        if (clip_slot.b_has_clip()) {\n            // clipslot.call(\"delete_clip\")\n            clip_slot.delete_clip()\n        }\n\n\n\n\n\n\n\n        // let path_clipslot = ['live_set', 'tracks', index_track, 'clip_slots', Number(i_clipslot)].join(' ');\n        //\n        // let scene = new li.LiveApiJs(\n        //     ['live_set', 'scenes', String(Number(i_clipslot))].join(' ')\n        // );\n\n        // let scene_exists = Number(scene.get_id()) !== 0;\n\n        // if (!scene_exists) {\n        //     song.call('create_scene', String(Number(i_clipslot)))\n        // }\n\n        // let clipslot = new li.LiveApiJs(path_clipslot);\n        //\n        // let has_clip = clipslot.get(\"has_clip\")[0] === 1;\n        //\n        // if (has_clip) {\n        //     clipslot.call(\"delete_clip\")\n        // }\n\n        clip_slot_audio.duplicate_clip_to(clip_slot);\n\n        // clipslot_audio.call(\"duplicate_clip_to\", ['id', clipslot.get_id()].join(' '));\n\n        // let clip = new Clip(\n        //     new ClipDao(\n        //         new LiveApiJs(\n        //             path_clipslot.split(' ').concat(['clip']).join(' ')\n        //         ),\n        //         new Messenger(env, 0)\n        //     )\n        // );\n\n        let clip = Track.get_clip_at_index(\n            track.get_index(),\n            Number(i_clipslot),\n            messenger\n        );\n\n        let segment = new Segment(note_segment);\n\n        clip.set_endpoints_loop(\n            segment.beat_start,\n            segment.beat_end\n        )\n    }\n};\n\n// let notes_segments = io.Importer.import('segment');\n\nlet expand_track = (path_track) => {\n\n    let logger = new Logger(env);\n\n    let track = new Track(\n        new TrackDao(\n            new LiveApiJs(\n                path_track\n            ),\n            messenger\n        )\n    );\n\n    track.load_clips();\n\n    let clip_slot = track.get_clip_slot_at_index(0);\n\n    clip_slot.load_clip();\n\n    let clip = clip_slot.get_clip();\n\n    let notes_clip = clip.get_notes(\n        clip.get_loop_bracket_lower(),\n        0,\n        clip.get_loop_bracket_upper(),\n        128\n    );\n\n    let notes_segments = get_notes_segments();\n\n    // logger.log(JSON.stringify(notes_segments));\n\n    let segments: Segment[] = [];\n\n    for (let note of notes_segments) {\n        segments.push(\n            new Segment(\n                note\n            )\n        )\n    }\n\n    let song_read = new Song(\n        new SongDao(\n            new li.LiveApiJs(\n                'live_set'\n            ),\n            new Messenger(env, 0),\n            false\n        )\n    );\n\n    let length_beats = get_length_beats();\n\n    song_read.load_scenes();\n\n    for (let i_segment in segments) {\n\n        let segment = segments[Number(i_segment)];\n\n        let scene = song_read.get_scene_at_index(Number(i_segment));\n\n        let scene_exists = scene !== null;\n\n        if (!scene_exists) {\n            song_read.create_scene_at_index(Number(i_segment))\n        }\n\n        let clip_slot = Track.get_clip_slot_at_index(\n            track.get_index(),\n            Number(i_segment),\n            messenger\n        );\n\n        clip_slot.load_clip();\n\n        if (Number(i_segment) === 0) {\n            clip_slot.delete_clip()\n        }\n\n        clip_slot.create_clip(length_beats);\n\n        clip_slot.load_clip();\n\n        let clip = clip_slot.get_clip();\n\n        clip.set_endpoints_loop(\n            segment.get_endpoints_loop()[0],\n            segment.get_endpoints_loop()[1]\n        );\n\n        clip.set_endpoint_markers(\n            0,\n            length_beats\n        );\n\n        let notes_within_segment = notes_clip.filter(\n            node => node.model.note.beat_start >= segment.get_endpoints_loop()[0] && node.model.note.get_beat_end() <= segment.get_endpoints_loop()[1]\n        );\n\n        clip.set_notes(notes_within_segment)\n    }\n\n};\n\nif (typeof Global !== \"undefined\") {\n    Global.segmenter = {};\n    Global.segmenter.expand_selected_track = expand_selected_track;\n    Global.segmenter.contract_selected_track = contract_selected_track;\n    Global.segmenter.contract_segments = contract_segments;\n    Global.segmenter.expand_segments = expand_segments;\n    Global.segmenter.expand_selected_audio_track = expand_selected_audio_track;\n    Global.segmenter.contract_selected_audio_track = contract_selected_audio_track;\n    Global.segmenter.test = test;\n}\n"]}