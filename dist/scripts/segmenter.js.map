{"version":3,"file":"segmenter.js","sourceRoot":"","sources":["../../src/scripts/segmenter.ts"],"names":[],"mappings":"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","sourcesContent":["import {message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {live as li} from \"../live/live\";\nimport {log} from \"../log/logger\";\nimport Logger = log.Logger;\nimport {utils} from \"../utils/utils\";\nimport {clip} from \"../clip/clip\";\nimport Clip = clip.Clip;\nimport ClipDao = clip.ClipDao;\nimport {io} from \"../io/io\";\nimport {segment} from \"../segment/segment\";\nimport Segment = segment.Segment;\nimport {song} from \"../song/song\";\nimport SongDao = song.SongDao;\nimport Song = song.Song;\nconst _ = require('underscore');\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\ndeclare let Dict: any;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet length_beats: number;\n\nlet set_length_beats = (beats) => {\n    length_beats = beats\n};\n\n\nlet segment_clip = () => {\n\n    // extract segments from sole clip\n\n    // delete clip\n\n    // for each list of notes, create a clip, then set notes\n\n    // 1) create a bunch of empty clips below the currently selected one\n\n    // get track index of highlighted clip\n\n    let clipslot_highlighted = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot'\n    );\n\n    let path_track = clipslot_highlighted.get_path();\n\n    let index_track = path_track.split(' ')[2];\n\n    let clip_highlighted = new Clip(\n        new ClipDao(\n            new li.LiveApiJs(\n                'live_set view highlighted_clip_slot clip'\n            ),\n            new Messenger(env, 0)\n        )\n    );\n\n    let notes_clip = clip_highlighted.get_notes(\n        clip_highlighted.get_loop_bracket_lower(),\n        0,\n        clip_highlighted.get_loop_bracket_upper(),\n        128\n    );\n\n    let notes_segments = io.Importer.import('segment');\n\n    let segments: Segment[] = [];\n\n    for (let note of notes_segments) {\n        segments.push(\n            new Segment(\n                note\n            )\n        )\n    }\n\n\n    let logger = new Logger(env);\n\n    // logger.log(String(segments.length));\n\n    // let song = new Song(\n    //     let song = new SongDao(\n    let song = new li.LiveApiJs(\n        'live_set'\n    );\n        //     new Messenger(env, 0),\n        //     false\n        // );\n    // );\n\n\n\n    // return\n\n\n    // for (let i of _.range(0, segments.length + 1)) {\n    for (let i_segment in segments) {\n\n        let segment = segments[Number(i_segment)];\n\n        let path_clipslot = ['live_set', 'tracks', String(index_track), 'clip_slots', String(Number(i_segment))];\n\n        let path_live = path_clipslot.join(' ');\n\n        let scene = new li.LiveApiJs(\n            ['live_set', 'scenes', String(Number(i_segment))].join(' ')\n        );\n\n        let scene_exists = Number(scene.get_id()) !== 0;\n\n        // logger.log(scene.get_path());\n\n        if (!scene_exists) {\n            song.call('create_scene', String(Number(i_segment)))\n        }\n\n        let clipslot = new li.LiveApiJs(\n            path_live\n        );\n\n        if (Number(i_segment) === 0) {\n            clipslot.call('delete_clip', String(length_beats));\n        }\n\n        clipslot.call('create_clip', String(length_beats));\n\n        let path_clip = path_clipslot.concat('clip').join(' ');\n\n        let clip = new Clip(\n            new ClipDao(\n                new li.LiveApiJs(\n                    path_clip\n                ),\n                new Messenger(env, 0)\n            )\n        );\n\n        clip.set_loop_bracket_lower(\n            segment.get_endpoints_loop()[0]\n        );\n\n        clip.set_loop_bracket_upper(\n            segment.get_endpoints_loop()[1]\n        );\n\n        let notes_within_segment = notes_clip.filter(\n            node => segment.get_endpoints_loop()[0] <= node.model.note.beat_start && node.model.note.beat_start < segment.get_endpoints_loop()[0] + segment.get_endpoints_loop()[1]\n        );\n\n        clip.set_notes(notes_within_segment)\n\n    }\n\n    // logger.log(clipslot_highlighted.get_id());\n    //\n    // logger.log(clipslot_highlighted.get_path());\n\n};\n\nif (typeof Global !== \"undefined\") {\n    Global.segmenter = {};\n    Global.segmenter.segment_clip = segment_clip;\n    Global.segmenter.set_length_beats = set_length_beats;\n}\n"]}