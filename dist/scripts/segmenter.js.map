{"version":3,"file":"segmenter.js","sourceRoot":"","sources":["../../src/scripts/segmenter.ts"],"names":[],"mappings":"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","sourcesContent":["// import {message as m, message} from \"../message/messenger\";\n// import Messenger = message.Messenger;\n// import {live, live as li} from \"../live/live\";\n// import {log} from \"../log/logger\";\n// import Logger = log.Logger;\n// import {utils} from \"../utils/utils\";\n// import {clip as c, clip} from \"../clip/clip\";\n// import Clip = clip.Clip;\n// import ClipDao = clip.ClipDao;\n// import {io} from \"../io/io\";\n// import {segment} from \"../segment/segment\";\n// import Segment = segment.Segment;\n// import {song} from \"../song/song\";\n// import SongDao = song.SongDao;\n// import Song = song.Song;\n// import LiveApiJs = live.LiveApiJs;\n// import {track} from \"../track/track\";\n// import TrackDao = track.TrackDao;\n// import Track = track.Track;\n// import {clip_slot} from \"../clip_slot/clip_slot\";\n// import ClipSlot = clip_slot.ClipSlot;\n// import ClipSlotDao = clip_slot.ClipSlotDao;\n// import {scene} from \"../scene/scene\";\n// import Scene = scene.Scene;\n// // import get_notes_on_track = track.get_notes_on_track;\n// const _ = require('underscore');\n//\n// declare let autowatch: any;\n// declare let inlets: any;\n// declare let outlets: any;\n// declare function outlet(n: number, o: any): void;\n// declare function post(message?: any): void;\n// declare let Dict: any;\n//\n// export {}\n//\n// declare let Global: any;\n//\n// let env: string = 'max';\n//\n// if (env === 'max') {\n//     post('recompile successful');\n//     autowatch = 1;\n// }\n//\n// // get the first clip and use its start and end markers to determine the length of the entire song\n// let get_length_beats = () => {\n//     // let this_device = new LiveApiJs('this_device');\n//\n//     let clip: Clip = utils.get_clip_on_this_device_at_index(0);\n//\n//     return clip.get_end_marker() - clip.get_start_marker()\n//\n//     // let segments_first_clip = new Clip(\n//     //     new ClipDao(\n//     //         new LiveApiJs(\n//     //             this_device.get_path().split(' ').slice(0, 3).concat(['clip_slots', '0', 'clip']).join(' ')\n//     //         ),\n//     //         new Messenger(env, 0)\n//     //     )\n//     // );\n//     //\n//     // return segments_first_clip.get_end_marker() - segments_first_clip.get_start_marker()\n// };\n//\n// let expand_segments = () => {\n//     let this_device = new li.LiveApiJs('this_device');\n//\n//     let path_this_device = this_device.get_path();\n//\n//     let list_this_device = path_this_device.split(' ');\n//\n//     let index_this_track = Number(list_this_device[2]);\n//\n//     expand_clip(['live_set', 'tracks', index_this_track, 'clip_slots', 0].join(' '))\n// };\n//\n// let contract_segments = () => {\n//     let this_device = new li.LiveApiJs('this_device');\n//\n//     let path_this_device = this_device.get_path();\n//\n//     let list_this_device = path_this_device.split(' ');\n//\n//     let index_this_track = Number(list_this_device[2]);\n//\n//     contract_track(['live_set', 'tracks', index_this_track].join(' '))\n// };\n//\n// let expand_highlighted_clip = () => {\n//     expand_clip('live_set view highlighted_clip_slot')\n// };\n//\n// let contract_selected_track = () => {\n//     contract_track('live_set view selected_track')\n// };\n//\n// // Assumption: all clips on \"segment track have same length\"\n//\n// // NB: works without highlighting any tracks\n// // aggregate all the notes in the track's clips\n// // delete all the track's clips\n// // set the notes inside of the single clip\n// let contract_track = (path_track) => {\n//\n//     // length of first clip\n//     let length_beats = get_length_beats();\n//\n//     let track = new Track(\n//         new TrackDao(\n//             new li.LiveApiJs(\n//                 path_track\n//             )\n//         )\n//     );\n//\n//     // clip_slots and clips\n//     track.load();\n//\n//     let notes = track.get_notes();\n//\n//     track.delete_clips();\n//\n//     track.create_clip_at_index(0);\n//\n//     let clip = track.get_clip_at_index(0);\n//\n//     clip.set_notes(notes);\n//\n//     // for (let clip_slot of track.get_clip_slots()) {\n//     //\n//     //     if (clip_slot.get_index() === 0) {\n//     //         continue\n//     //     }\n//     //\n//     //     if (clip_slot.b_has_clip()) {\n//     //         let clip = clip_slot.clip;\n//     //         clip_slot.clip.get_notes_within_markers()\n//     //     }\n//     //\n//     //\n//     // }\n//\n//\n//\n//     // TODO: the following is one layer of abstraction below the DAO\n//     // let track = new li.LiveApiJs(path_track);\n//\n//     // let list_path_track_with_index = track.get_path().split(' ').map((el) => {\n//     //     return el.replace('\\\"', '')\n//     // });\n//     //\n//     // let index_track = Number(list_path_track_with_index[2]);\n//     //\n//     // track = new li.LiveApiJs(list_path_track_with_index.join(' '));\n//     //\n//     // let num_clipslots = track.get(\"clip_slots\").length/2;\n//\n//     let notes_amassed = [];\n//\n//     // first, amass all notes of clips and delete all clips\n//\n//     for (let i_clipslot of _.range(0, num_clipslots)) {\n//         let path_clipslot = ['live_set', 'tracks', index_track, 'clip_slots', Number(i_clipslot)].join(' ');\n//\n//         let api_clipslot_segment = new li.LiveApiJs(path_clipslot);\n//\n//         let clip_segment = new Clip(\n//             new ClipDao(\n//                 new li.LiveApiJs(\n//                     path_clipslot.split(' ').concat(['clip']).join(' ')\n//                 ),\n//                 new Messenger(env, 0)\n//             )\n//         );\n//         notes_amassed = notes_amassed.concat(\n//             clip_segment.get_notes(\n//                 clip_segment.get_loop_bracket_lower(),\n//                 0,\n//                 clip_segment.get_loop_bracket_upper(),\n//                 128\n//             )\n//         );\n//\n//         api_clipslot_segment.call('delete_clip')\n//     }\n//\n//     // create one clip of length \"length_beats\"\n//\n//     let path_clipslot_contracted = ['live_set', 'tracks', String(index_track), 'clip_slots', String(0)];\n//\n//     let api_clipslot_contracted = new li.LiveApiJs(\n//         path_clipslot_contracted.join(' ')\n//     );\n//\n//     api_clipslot_contracted.call('create_clip', String(length_beats));\n//\n//     let clip_contracted = new Clip(\n//         new ClipDao(\n//             new li.LiveApiJs(\n//                 path_clipslot_contracted.concat(['clip']).join(' ')\n//             ),\n//             new Messenger(env, 0)\n//         )\n//     );\n//\n//     // add the amassed notes to it\n//\n//     clip_contracted.set_notes(\n//         notes_amassed\n//     )\n// };\n//\n// // export let get_notes_on_track = (path_track) => {\n// //     let index_track = Number(path_track.split(' ')[2]);\n// //\n// //     let track = new li.LiveApiJs(path_track);\n// //\n// //     let num_clipslots = track.get(\"clip_slots\").length/2;\n// //\n// //     let notes_amassed = [];\n// //\n// //     for (let i_clipslot of _.range(0, num_clipslots)) {\n// //         let path_clipslot = ['live_set', 'tracks', index_track, 'clip_slots', Number(i_clipslot)].join(' ');\n// //\n// //         let clip = new Clip(\n// //             new ClipDao(\n// //                 new li.LiveApiJs(\n// //                     path_clipslot.split(' ').concat(['clip']).join(' ')\n// //                 ),\n// //                 new Messenger(env, 0)\n// //             )\n// //         );\n// //\n// //         notes_amassed = notes_amassed.concat(\n// //             clip.get_notes(\n// //                 clip.get_loop_bracket_lower(),\n// //                 0,\n// //                 clip.get_loop_bracket_upper(),\n// //                 128\n// //             )\n// //         );\n// //     }\n// //\n// //     return notes_amassed\n// // };\n//\n//\n// // TODO: we can't export this, because it could be called from a different track than the one the segments are on...\n// // NB: assumes the device that calls this is on the track of segments\n// let get_notes_segments = () => {\n//     // let this_device = new li.LiveApiJs('this_device');\n//     // let path_this_track = this_device.get_path().split(' ').slice(0, 3).join(' ');\n//     let track_segments = utils.get_this_track();\n//     track.load();\n//     return track.get_notes();\n//     // return get_notes_on_track(path_this_track)\n// };\n//\n// // 'live_set view highlighted_clip_slot'\n//\n// let test = () => {\n//\n// };\n//\n// let expand_highlighted_audio_clip = () => {\n//     expand_clip_audio('live_set view highlighted_clip_slot')\n// };\n//\n// let contract_selected_audio_track = () => {\n//     contract_track_audio('live_set view selected_track')\n// };\n//\n// // NB: we assume all training data starts on the first beat\n// let contract_track_audio = (path_track) => {\n//\n//     let length_beats = get_length_beats();\n//\n//     let track = new Track(\n//         new TrackDao(\n//             new li.LiveApiJs(path_track)\n//         )\n//     );\n//\n//     track.load();\n//\n//     let clip_slots = track.get_clip_slots();\n//\n//     for (let i_clip_slot_audio in clip_slots) {\n//\n//         let clip_slot_audio = clip_slots[Number(i_clip_slot_audio)];\n//\n//         if (Number(i_clip_slot_audio) === 0) {\n//             clip_slot_audio.clip.set_endpoint_markers(0, length_beats);\n//\n//             continue\n//         }\n//\n//         if (clip_slot_audio.b_has_clip()) {\n//             clip_slot_audio.delete_clip()\n//         }\n//     }\n//\n//     // let track = new li.LiveApiJs(path_track);\n//\n//     // let list_path_track_with_index = track.get_path().split(' ').map((el) => {\n//     //     return el.replace('\\\"', '')\n//     // });\n//\n//     // let index_track = Number(list_path_track_with_index[2]);\n//     //\n//     // track = new li.LiveApiJs(list_path_track_with_index.join(' '));\n//\n//     // let num_clipslots = track.get(\"clip_slots\").length/2;\n//\n//     // let notes_segments = get_notes_segments();\n//\n//     // for (let i_clipslot of _.range(1, num_clipslots)) {\n//     //     let path_clipslot = ['live_set', 'tracks', index_track, 'clip_slots', Number(i_clipslot)].join(' ');\n//     //\n//     //     let api_clipslot_segment = new li.LiveApiJs(path_clipslot);\n//     //\n//     //     api_clipslot_segment.call('delete_clip')\n//     // }\n//     //\n//     // let path_clipslot_contracted = ['live_set', 'tracks', String(index_track), 'clip_slots', String(0)];\n//     //\n//     // let clip_contracted = new Clip(\n//     //     new ClipDao(\n//     //         new li.LiveApiJs(\n//     //             path_clipslot_contracted.concat(['clip']).join(' ')\n//     //         ),\n//     //         new Messenger(env, 0)\n//     //     )\n//     // );\n//     //\n//     // clip_contracted.set_endpoints_loop(0, length_beats);\n// };\n//\n// let expand_track_audio = (path_track) => {\n//\n//     // let length_beats = get_length_beats();\n//\n//     // let clipslot_audio = new li.LiveApiJs(path_clip_slot);\n//\n//     // let track = new li.LiveApiJs(clipslot_audio.get_path().split(' ').slice(0, 3).join(' '));\n//\n//     // let index_track = clipslot_audio.get_path().split(' ')[2];\n//\n//     // let num_clipslots = track.get(\"clip_slots\").length/2;\n//\n//     let track = new Track(\n//         new TrackDao(\n//             new LiveApiJs(\n//                 path_track\n//             )\n//         )\n//     );\n//\n//     let clip_slot_audio = track.get_clip_slot_at_index(0);\n//\n//     // TODO: we won't need to do this since we will be creating new ones anyway\n//     // track.load();\n//\n//     let notes_segments = get_notes_segments();\n//\n//     let song = new Song(\n//         new SongDao(\n//             new li.LiveApiJs(\n//                 'live_set'\n//             )\n//         )\n//     );\n//\n//     for (let i_clipslot of _.range(1, notes_segments.length)) {\n//         let note_segment = notes_segments[Number(i_clipslot)];\n//         // let notes_segments\n//         // let clip_slot = new ClipSlot(\n//         //     new ClipSlotDao(\n//         //         // utils.get_clipslot_at_index(Number(i_clipslot))\n//         //     )\n//         // );\n//\n//         let scene: Scene = song.get_scene_at_index(Number(i_clipslot));\n//\n//         // if (track.get_clip_slot_at_index(Number(i_clipslot)) === null) {\n//         //     let scen\n//         // }\n//\n//         let scene_exists = scene !== null;\n//\n//         if (scene_exists) {\n//             song.create_scene_at_index(Number(i_clipslot))\n//         }\n//\n//         // let clipslot = new li.LiveApiJs(path_clipslot);\n//\n//         let clip_slot = track.get_clip_slot_at_index(Number(i_clipslot));\n//\n//         // let clip_slot = new ClipSlot(\n//         //     new ClipSlotDao(\n//         //         new LiveApiJs(\n//         //             utils.get_path_clip_slot_at\n//         //         )\n//         //     )\n//         // )\n//\n//         // let has_clip = clipslot.get(\"has_clip\")[0] === 1;\n//\n//         if (clip_slot.b_has_clip()) {\n//             // clipslot.call(\"delete_clip\")\n//             clip_slot.delete_clip()\n//         }\n//\n//\n//\n//\n//\n//\n//\n//         // let path_clipslot = ['live_set', 'tracks', index_track, 'clip_slots', Number(i_clipslot)].join(' ');\n//         //\n//         // let scene = new li.LiveApiJs(\n//         //     ['live_set', 'scenes', String(Number(i_clipslot))].join(' ')\n//         // );\n//\n//         // let scene_exists = Number(scene.get_id()) !== 0;\n//\n//         // if (!scene_exists) {\n//         //     song.call('create_scene', String(Number(i_clipslot)))\n//         // }\n//\n//         // let clipslot = new li.LiveApiJs(path_clipslot);\n//         //\n//         // let has_clip = clipslot.get(\"has_clip\")[0] === 1;\n//         //\n//         // if (has_clip) {\n//         //     clipslot.call(\"delete_clip\")\n//         // }\n//\n//         clip_slot_audio.duplicate_clip_to(clip_slot)\n//\n//         // clipslot_audio.call(\"duplicate_clip_to\", ['id', clipslot.get_id()].join(' '));\n//\n//         // let clip = new Clip(\n//         //     new ClipDao(\n//         //         new LiveApiJs(\n//         //             path_clipslot.split(' ').concat(['clip']).join(' ')\n//         //         ),\n//         //         new Messenger(env, 0)\n//         //     )\n//         // );\n//\n//         let clip = Track.get_clip_at_index(Number(i_clipslot));\n//\n//         let segment = new Segment(note_segment);\n//\n//         clip.set_endpoints_loop(\n//             segment.beat_start,\n//             segment.beat_end\n//         )\n//     }\n// };\n//\n// // let notes_segments = io.Importer.import('segment');\n//\n// let expand_track = (path_clip_slot) => {\n//\n//     let clipslot_highlighted = new li.LiveApiJs(\n//         path_clip_slot\n//     );\n//\n//     let path_track = clipslot_highlighted.get_path();\n//\n//     let index_track = path_track.split(' ')[2];\n//\n//     let clip_highlighted = new Clip(\n//         new ClipDao(\n//             new li.LiveApiJs(\n//                 [path_clip_slot, 'clip'].join(' ')\n//             ),\n//             new Messenger(env, 0)\n//         )\n//     );\n//\n//     let notes_clip = clip_highlighted.get_notes(\n//         clip_highlighted.get_loop_bracket_lower(),\n//         0,\n//         clip_highlighted.get_loop_bracket_upper(),\n//         128\n//     );\n//\n//     let notes_segments = get_notes_segments();\n//\n//     let segments: Segment[] = [];\n//\n//     for (let note of notes_segments) {\n//         segments.push(\n//             new Segment(\n//                 note\n//             )\n//         )\n//     }\n//\n//     let song = new li.LiveApiJs(\n//         'live_set'\n//     );\n//\n//     // let logger = new Logger(env);\n//\n//     let length_beats = get_length_beats();\n//\n//     for (let i_segment in segments) {\n//\n//         let segment = segments[Number(i_segment)];\n//\n//         let path_clipslot = ['live_set', 'tracks', String(index_track), 'clip_slots', String(Number(i_segment))];\n//\n//         let path_live = path_clipslot.join(' ');\n//\n//         let scene = new li.LiveApiJs(\n//             ['live_set', 'scenes', String(Number(i_segment))].join(' ')\n//         );\n//\n//         let scene_exists = Number(scene.get_id()) !== 0;\n//\n//         if (!scene_exists) {\n//             song.call('create_scene', String(Number(i_segment)))\n//         }\n//\n//         let clipslot = new li.LiveApiJs(\n//             path_live\n//         );\n//\n//         if (Number(i_segment) === 0) {\n//             clipslot.call('delete_clip');\n//         }\n//\n//         clipslot.call('create_clip', String(length_beats));\n//\n//         let path_clip = path_clipslot.concat('clip').join(' ');\n//\n//         let clip = new Clip(\n//             new ClipDao(\n//                 new li.LiveApiJs(\n//                     path_clip\n//                 ),\n//                 new Messenger(env, 0)\n//             )\n//         );\n//\n//         clip.set_endpoints_loop(\n//             segment.get_endpoints_loop()[0],\n//             segment.get_endpoints_loop()[1]\n//         );\n//\n//         clip.set_endpoint_markers(\n//             segment.get_endpoints_loop()[0],\n//             segment.get_endpoints_loop()[1]\n//         );\n//\n//         let notes_within_segment = notes_clip.filter(\n//             node => node.model.note.beat_start >= segment.get_endpoints_loop()[0] && node.model.note.get_beat_end() <= segment.get_endpoints_loop()[1]\n//         );\n//\n//         clip.set_notes(notes_within_segment)\n//     }\n//\n// };\n//\n// if (typeof Global !== \"undefined\") {\n//     Global.segmenter = {};\n//     Global.segmenter.expand_highlighted_clip = expand_highlighted_clip;\n//     Global.segmenter.contract_selected_track = contract_selected_track;\n//     Global.segmenter.contract_segments = contract_segments;\n//     Global.segmenter.expand_segments = expand_segments;\n//     Global.segmenter.expand_highlighted_audio_clip = expand_highlighted_audio_clip;\n//     Global.segmenter.contract_selected_audio_track = contract_selected_audio_track;\n//     Global.segmenter.test = test;\n// }\n"]}