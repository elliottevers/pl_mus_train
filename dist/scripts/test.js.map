{"version":3,"file":"test.js","sourceRoot":"","sources":["../../src/scripts/test.ts"],"names":[],"mappings":"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","sourcesContent":["import {note as n} from \"../../src/note/note\";\nimport TreeModel = require(\"tree-model\");\nimport {user_input} from \"../../src/control/user_input\";\nimport UserInputHandler = user_input.UserInputHandler;\nimport {message} from \"../../src/message/messenger\";\nimport Messenger = message.Messenger;\nimport {live} from \"../../src/live/live\";\nimport LiveClipVirtual = live.LiveClipVirtual;\nimport {segment} from \"../../src/segment/segment\";\nimport Segment = segment.Segment;\nimport {clip} from \"../../src/clip/clip\";\nimport Clip = clip.Clip;\nimport {algorithm} from \"../../src/train/algorithm\";\nimport Detect = algorithm.Detect;\nimport {freeze, thaw} from \"../../src/serialize/serialize\";\nimport TrainFreezer = freeze.TrainFreezer;\nimport TrainThawer = thaw.TrainThawer;\nimport {window} from \"../../src/render/window\";\nimport ListWindow = window.ListWindow;\nimport {trainer} from \"../../src/train/trainer\";\nimport Trainer = trainer.Trainer;\nimport {modes_control, modes_texture} from \"../../src/constants/constants\";\nimport POLYPHONY = modes_texture.POLYPHONY;\nimport INSTRUMENTAL = modes_control.INSTRUMENTAL;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet test = () => {\n\n\n    let tree: TreeModel = new TreeModel();\n\n    let segment_note_1 = tree.parse(\n        {\n            id: -1, // TODO: hashing scheme for clip id and beat start\n            note: new n.Note(\n                51,\n                1,\n                4,\n                90,\n                0\n            ),\n            children: [\n\n            ]\n        }\n    );\n\n    let segment_note_2 = tree.parse(\n        {\n            id: -1, // TODO: hashing scheme for clip id and beat start\n            note: new n.Note(\n                51,\n                5,\n                4,\n                90,\n                0\n            ),\n            children: [\n\n            ]\n        }\n    );\n\n\n\n    let note_target_1_subtarget_1 = tree.parse(\n        {\n            id: -1, // TODO: hashing scheme for clip id and beat start\n            note: new n.Note(\n                51,\n                1,\n                2,\n                90,\n                0\n            ),\n            children: [\n\n            ]\n        }\n    );\n\n    let note_target_1_subtarget_2 = tree.parse(\n        {\n            id: -1, // TODO: hashing scheme for clip id and beat start\n            note: new n.Note(\n                53,\n                1,\n                2,\n                90,\n                0\n            ),\n            children: [\n\n            ]\n        }\n    );\n\n\n\n    let note_target_2_subtarget_1 = tree.parse(\n        {\n            id: -1, // TODO: hashing scheme for clip id and beat start\n            note: new n.Note(\n                52,\n                3,\n                2,\n                90,\n                0\n            ),\n            children: [\n\n            ]\n        }\n    );\n\n    let note_target_2_subtarget_2 = tree.parse(\n        {\n            id: -1, // TODO: hashing scheme for clip id and beat start\n            note: new n.Note(\n                54,\n                3,\n                2,\n                90,\n                0\n            ),\n            children: [\n\n            ]\n        }\n    );\n\n\n\n    let note_target_3_subtarget_1 = tree.parse(\n        {\n            id: -1, // TODO: hashing scheme for clip id and beat start\n            note: new n.Note(\n                53,\n                5,\n                2,\n                90,\n                0\n            ),\n            children: [\n\n            ]\n        }\n    );\n\n    let note_target_3_subtarget_2 = tree.parse(\n        {\n            id: -1, // TODO: hashing scheme for clip id and beat start\n            note: new n.Note(\n                55,\n                5,\n                2,\n                90,\n                0\n            ),\n            children: [\n\n            ]\n        }\n    );\n\n\n\n    let note_target_4_subtarget_1 = tree.parse(\n        {\n            id: -1, // TODO: hashing scheme for clip id and beat start\n            note: new n.Note(\n                54,\n                7,\n                2,\n                90,\n                0\n            ),\n            children: [\n\n            ]\n        }\n    );\n\n    let note_target_4_subtarget_2 = tree.parse(\n        {\n            id: -1, // TODO: hashing scheme for clip id and beat start\n            note: new n.Note(\n                56,\n                7,\n                2,\n                90,\n                0\n            ),\n            children: [\n\n            ]\n        }\n    );\n\n\n    let mode_texture = POLYPHONY;\n    let mode_control = INSTRUMENTAL;\n\n    let user_input_handler = new UserInputHandler(\n        mode_texture,\n        mode_control\n    );\n\n    let messenger = new Messenger('node', 0);\n\n    let window_local = new ListWindow(\n        384,\n        384,\n        messenger\n    );\n\n    let algorithm_train = new Detect(\n        user_input_handler\n    );\n\n// stubs\n    let song = {\n        set_overdub: (int) => {},\n        set_session_record: (int) => {}\n    };\n\n    let clip_user_input = {\n        fire: () => {},\n        stop: () => {},\n        set_endpoints_loop: (former, latter) => {}\n    };\n\n    let notes_segments = [\n        segment_note_1,\n        segment_note_2\n    ];\n\n    let notes_target_clip = [\n        note_target_1_subtarget_1,\n        note_target_1_subtarget_2,\n        note_target_2_subtarget_1,\n        note_target_2_subtarget_2,\n        note_target_3_subtarget_1,\n        note_target_3_subtarget_2,\n        note_target_4_subtarget_1,\n        note_target_4_subtarget_2\n    ];\n\n    let segments: Segment[] = [];\n\n    for (let note of notes_segments) {\n        segments.push(\n            new Segment(\n                note\n            )\n        )\n    }\n\n    let clip_dao_virtual = new LiveClipVirtual(notes_target_clip);\n\n    let clip_target_virtual = new Clip(clip_dao_virtual);\n\n    let trainer_local = new Trainer(\n        window_local,\n        user_input_handler,\n        algorithm_train,\n        clip_user_input,\n        clip_target_virtual,\n        song,\n        segments,\n        messenger\n    );\n\n// test case - 2 segments, 2 notes a piece\n\n    trainer_local.init(\n\n    );\n\n    trainer_local.accept_input(\n        [note_target_1_subtarget_1]\n    );\n\n    trainer_local.accept_input(\n        [note_target_1_subtarget_2]\n    );\n\n    trainer_local.accept_input(\n        [note_target_2_subtarget_1]\n    );\n\n    trainer_local.accept_input(\n        [note_target_2_subtarget_2]\n    );\n\n    trainer_local.accept_input(\n        [note_target_3_subtarget_1]\n    );\n\n    trainer_local.clear_window(\n\n    );\n\n    let freezer = new TrainFreezer(\n        'node'\n    );\n\n    freezer.freeze(\n        trainer_local,\n        '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync/tk_music_ts/cache/train.json',\n        env\n    );\n\n    let thawer = new TrainThawer(\n        'node'\n    );\n\n    let config = {\n        'window': window_local,\n        'user_input_handler': user_input_handler,\n        'algorithm': algorithm_train,\n        'clip_user_input': clip_user_input,\n        'clip_target_virtual': clip_target_virtual,\n        'song': song,\n        'segments': segments,\n        'messenger': messenger\n    };\n\n    let train_thawed = thawer.thaw(\n        '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync/tk_music_ts/cache/train.json',\n        config\n    );\n\n    train_thawed.render_window(\n\n    );\n\n\n// verify that it looks correct in window\n\n};\n\n\n// test();\n\nif (typeof Global !== \"undefined\") {\n    Global.test = {};\n    Global.test.test = test;\n}\n"]}