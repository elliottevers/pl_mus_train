{"version":3,"file":"scene_iterator.js","sourceRoot":"","sources":["../../src/scripts/scene_iterator.ts"],"names":[],"mappings":";;AAAA,kDAA6C;AAC7C,IAAO,SAAS,GAAG,mBAAO,CAAC,SAAS,CAAC;AACrC,qCAAwC;AACxC,wCAAkC;AAClC,IAAO,MAAM,GAAG,YAAG,CAAC,MAAM,CAAC;AAE3B,qCAAiD;AACjD,IAAO,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;AAC/B,IAAO,OAAO,GAAG,WAAW,CAAC,OAAO,CAAC;AACrC,wCAAqC;AACrC,IAAO,KAAK,GAAG,aAAK,CAAC,KAAK,CAAC;AAC3B,IAAO,aAAa,GAAG,aAAK,CAAC,aAAa,CAAC;AAC3C,IAAO,QAAQ,GAAG,aAAK,CAAC,QAAQ,CAAC;AACjC,8CAA8C;AAC9C,IAAM,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAahC,IAAI,GAAG,GAAW,KAAK,CAAC;AAExB,IAAI,GAAG,KAAK,KAAK,EAAE;IACf,IAAI,CAAC,sBAAsB,CAAC,CAAC;IAC7B,SAAS,GAAG,CAAC,CAAC;CACjB;AAED,aAAa;AAEb,IAAI,IAAI,GAAG,IAAI,IAAI,CACf,IAAI,OAAO,CACP,IAAI,WAAE,CAAC,SAAS,CACZ,UAAU,CACb,EACD,IAAI,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,EACrB,KAAK,CACR,CACJ,CAAC;AAGF,IAAI,UAAU,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;AAEvC,IAAI,MAAM,GAAG,EAAE,CAAC;AAEhB,KAAc,UAAsB,EAAtB,KAAA,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,EAAtB,cAAsB,EAAtB,IAAsB,EAAE;IAAjC,IAAI,CAAC,SAAA;IACN,IAAI,UAAU,GAAG,CAAC,UAAU,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC7D,IAAI,OAAK,GAAG,IAAI,KAAK,CACjB,IAAI,QAAQ,CACR,IAAI,WAAE,CAAC,SAAS,CACZ,UAAU,CACb,CACJ,CACJ,CAAC;IACF,MAAM,CAAC,IAAI,CAAC,OAAK,CAAC,CAAA;CACrB;AAED,IAAI,cAAc,GAAG,IAAI,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAErD,IAAI,aAAoB,CAAC;AAEzB,IAAI,IAAI,GAAG;IACP,IAAI,QAAQ,GAAG,cAAc,CAAC,IAAI,EAAE,CAAC;IAErC,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC;IAE7B,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;IAErC,IAAI,QAAQ,CAAC,IAAI,EAAE;QACf,IAAI,CAAC,IAAI,EAAE,CAAC;QAEZ,OAAM;KACT;IAED,aAAa,GAAG,QAAQ,CAAC,KAAK,CAAC;IAE/B,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC7B,CAAC,CAAC;AAGF,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IAC/B,MAAM,CAAC,cAAc,GAAG,EAAE,CAAC;IAC3B,MAAM,CAAC,cAAc,CAAC,IAAI,GAAG,IAAI,CAAC;CACrC","sourcesContent":["import {message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {live as li} from \"../live/live\";\nimport {log} from \"../log/logger\";\nimport Logger = log.Logger;\nimport {utils} from \"../utils/utils\";\nimport {song as module_song} from \"../song/song\";\nimport Song = module_song.Song;\nimport SongDao = module_song.SongDao;\nimport {scene} from \"../scene/scene\";\nimport Scene = scene.Scene;\nimport SceneIterator = scene.SceneIterator;\nimport SceneDao = scene.SceneDao;\n// import {Segment} from \"../segment/segment\";\nconst _ = require('underscore');\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\ndeclare let Dict: any;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\n// initialize\n\nlet song = new Song(\n    new SongDao(\n        new li.LiveApiJs(\n            'live_set'\n        ),\n        new Messenger(env, 0),\n        false\n    )\n);\n\n\nlet num_scenes = song.get_num_scenes();\n\nlet scenes = [];\n\nfor (let i of _.range(0, num_scenes)) {\n    let path_scene = ['live_set', 'scenes', Number(i)].join(' ');\n    let scene = new Scene(\n        new SceneDao(\n            new li.LiveApiJs(\n                path_scene\n            )\n        )\n    );\n    scenes.push(scene)\n}\n\nlet scene_iterator = new SceneIterator(scenes, true);\n\nlet scene_current: Scene;\n\nlet next = () => {\n    let obj_next = scene_iterator.next();\n\n    let logger = new Logger(env);\n\n    logger.log(JSON.stringify(obj_next));\n\n    if (obj_next.done) {\n        song.stop();\n\n        return\n    }\n\n    scene_current = obj_next.value;\n\n    scene_current.fire(true);\n};\n\n\nif (typeof Global !== \"undefined\") {\n    Global.scene_iterator = {};\n    Global.scene_iterator.next = next;\n}\n\n\n"]}