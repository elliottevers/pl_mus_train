{"version":3,"file":"clip_importer.js","sourceRoot":"","sources":["../../src/scripts/clip_importer.ts"],"names":[],"mappings":";;AAAA,kDAA6C;AAC7C,IAAO,SAAS,GAAG,mBAAO,CAAC,SAAS,CAAC;AACrC,qCAAwC;AACxC,qCAA6C;AAC7C,wCAAkC;AAClC,IAAO,MAAM,GAAG,YAAG,CAAC,MAAM,CAAC;AAC3B,+BAA4B;AAC5B,IAAO,IAAI,GAAG,WAAI,CAAC,IAAI,CAAC;AACxB,IAAO,OAAO,GAAG,WAAI,CAAC,OAAO,CAAC;AAa9B,IAAI,GAAG,GAAW,KAAK,CAAC;AAExB,IAAI,GAAG,KAAK,KAAK,EAAE;IACf,IAAI,CAAC,sBAAsB,CAAC,CAAC;IAC7B,SAAS,GAAG,CAAC,CAAC;CACjB;AAED,IAAI,YAAoB,CAAC;AAEzB,IAAI,gBAAgB,GAAG,UAAC,KAAK;IACzB,YAAY,GAAG,KAAK,CAAA;AACxB,CAAC,CAAC;AAEF,IAAI,WAAW,GAAG,UAAC,SAAS;IAExB,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC;IAE7B,qGAAqG;IAErG,IAAI,oBAAoB,GAAG,IAAI,WAAE,CAAC,SAAS,CACvC,qCAAqC,CACxC,CAAC;IAGF,IAAI,gBAAgB,GAAG,IAAI,WAAE,CAAC,SAAS,CACnC,0CAA0C,CAC7C,CAAC;IAEF,IAAI,IAAU,CAAC;IAEf,IAAI,WAAW,GAAG,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,CAAC;IAE1D,IAAI,CAAC,WAAW,EAAE;QACd,yCAAyC;QACzC,oBAAoB,CAAC,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;QAE/D,gBAAgB,GAAG,IAAI,WAAE,CAAC,SAAS,CAC/B,0CAA0C,CAC7C,CAAC;KACL;IAED,IAAI,GAAG,IAAI,IAAI,CACX,IAAI,OAAO,CACP,gBAAgB,EAChB,IAAI,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CACxB,CACJ,CAAC;IAEF,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IAEtB,IAAI,CAAC,WAAW,CAAC,OAAE,CAAC,cAAc,CAAC,CAAC;IAEpC,IAAI,KAAK,GAAG,WAAC,CAAC,IAAI,CAAC,mBAAmB,CAClC,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAC5C,CAAC;IAEF,IAAI,CAAC,YAAY,CACb,IAAI,CAAC,gBAAgB,EAAE,EACvB,CAAC,EACD,IAAI,CAAC,cAAc,EAAE,EACrB,GAAG,CACN,CAAC;IAEF,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IAEtB,IAAI,SAAS,GAAG,IAAI,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IAEtC,SAAS,CAAC,OAAO,CAAC,CAAC,eAAe,CAAC,CAAC,CAAA;AACxC,CAAC,CAAC;AAEF,IAAI,IAAI,GAAG;AAEX,CAAC,CAAC;AAGF,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IAC/B,MAAM,CAAC,aAAa,GAAG,EAAE,CAAC;IAC1B,MAAM,CAAC,aAAa,CAAC,WAAW,GAAG,WAAW,CAAC;IAC/C,MAAM,CAAC,aAAa,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;CAC5D","sourcesContent":["import {message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {live as li} from \"../live/live\";\nimport {clip, clip as c} from \"../clip/clip\";\nimport {log} from \"../log/logger\";\nimport Logger = log.Logger;\nimport {io} from \"../io/io\";\nimport Clip = clip.Clip;\nimport ClipDao = clip.ClipDao;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\ndeclare let Dict: any;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet length_beats: number;\n\nlet set_length_beats = (beats) => {\n    length_beats = beats\n};\n\nlet import_part = (name_part) => {\n\n    let logger = new Logger(env);\n\n    // TODO: this works when we want to create a clip from scratch - figure out how to work into workflow\n\n    let clipslot_highlighted = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot'\n    );\n\n\n    let clip_highlighted = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot clip'\n    );\n\n    let clip: Clip;\n\n    let clip_exists = Number(clip_highlighted.get_id()) !== 0;\n\n    if (!clip_exists) {\n        // TODO: get the beat of end of last note\n        clipslot_highlighted.call('create_clip', String(length_beats));\n\n        clip_highlighted = new li.LiveApiJs(\n            'live_set view highlighted_clip_slot clip'\n        );\n    }\n\n    clip = new Clip(\n        new ClipDao(\n            clip_highlighted,\n            new Messenger(env, 0)\n        )\n    );\n\n    let dict = new Dict();\n\n    dict.import_json(io.file_json_comm);\n\n    let notes = c.Clip.parse_note_messages(\n        dict.get([name_part, 'notes'].join('::'))\n    );\n\n    clip.remove_notes(\n        clip.get_start_marker(),\n        0,\n        clip.get_end_marker(),\n        128\n    );\n\n    clip.set_notes(notes);\n\n    let messenger = new Messenger(env, 0);\n\n    messenger.message(['part_imported'])\n};\n\nlet test = () => {\n\n};\n\n\nif (typeof Global !== \"undefined\") {\n    Global.clip_importer = {};\n    Global.clip_importer.import_part = import_part;\n    Global.clip_importer.set_length_beats = set_length_beats;\n}\n"]}