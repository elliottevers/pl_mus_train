{"version":3,"file":"python_cli_proxy.js","sourceRoot":"","sources":["../../src/scripts/python_cli_proxy.ts"],"names":[],"mappings":"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","sourcesContent":["import {message as m, message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {live, live as li} from \"../live/live\";\nimport {clip, clip as c} from \"../clip/clip\";\nimport LiveApiJs = live.LiveApiJs;\nimport {log} from \"../log/logger\";\nimport Logger = log.Logger;\nimport {io} from \"../io/io\";\nimport Exporter = io.Exporter;\nimport {utils} from \"../utils/utils\";\nimport {harmony} from \"../music/harmony\";\nimport Harmony = harmony.Harmony;\nimport ClipDao = clip.ClipDao;\nimport Clip = clip.Clip;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\ndeclare let Dict: any;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet messenger = new Messenger(env, 0);\n\nlet commands: string[] = [];\n\nlet logger = new Logger(env);\n\nlet includes = (array, s) => {\n    // logger.log(JSON.stringify(array));\n    return array.indexOf(s) > -1\n};\n\nlet reset = () => {\n    commands = [];\n};\n\nlet set_arg = () => {\n    //@ts-ignore\n    let list_args = Array.prototype.slice.call(arguments);\n\n    let command = ['set_arg'].concat(list_args).join(' ');\n\n    if (!includes(commands, command)) {\n        commands.push(command)\n    }\n};\n\nlet set_option = () => {\n    //@ts-ignore\n    let list_args = Array.prototype.slice.call(arguments);\n\n    let command = ['set_option'].concat(list_args).join(' ');\n\n    if (!includes(commands, command)) {\n        commands.push(command)\n    }\n};\n\nlet set_flag = () => {\n    //@ts-ignore\n    let list_args = Array.prototype.slice.call(arguments);\n\n    let command = ['set_flag'].concat(list_args).join(' ');\n\n    if (!includes(commands, command)) {\n        commands.push(command)\n    }\n};\n\nlet set_path_script = () => {\n    //@ts-ignore\n    let list_args = Array.prototype.slice.call(arguments);\n\n    let command = ['set_path_script'].concat(list_args).join(' ');\n\n    if (!includes(commands, command)) {\n        commands.push(command)\n    }\n};\n\nlet message_commands = () => {\n    for (let command of commands) {\n        messenger.message(['commands'].concat(command.split(' ')))\n    }\n};\n\nlet run = () => {\n    messenger.message(['start', 'bang']);\n    message_commands();\n    messenger.message(['run', 'bang']);\n};\n\nif (typeof Global !== \"undefined\") {\n    Global.python_cli_proxy = {};\n    Global.python_cli_proxy.run = run;\n    Global.python_cli_proxy.set_arg = set_arg;\n    Global.python_cli_proxy.set_option = set_option;\n    Global.python_cli_proxy.set_flag = set_flag;\n    Global.python_cli_proxy.set_path_script = set_path_script;\n    Global.python_cli_proxy.reset = reset;\n    Global.python_cli_proxy.message_commands = message_commands;\n}\n"]}