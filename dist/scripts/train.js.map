{"version":3,"file":"train.js","sourceRoot":"","sources":["../../src/scripts/train.ts"],"names":[],"mappings":"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","sourcesContent":["import {message as m, message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {map} from \"../control/map\";\nimport FretMapper = map.FretMapper;\nimport {trainer as tr} from \"../train/trainer\";\nimport Trainer = tr.Trainer;\nimport {freeze, thaw} from \"../serialize/serialize\";\nimport TrainThawer = thaw.TrainThawer;\nimport {algorithm} from \"../train/algorithm\";\nimport Detect = algorithm.Detect;\nimport {live as li, live} from \"../live/live\";\nimport LiveClipVirtual = live.LiveClipVirtual;\nimport {segment} from \"../segment/segment\";\nimport Segment = segment.Segment;\nimport {modes_control, modes_texture} from \"../constants/constants\";\nimport INSTRUMENTAL = modes_control.INSTRUMENTAL;\nimport {clip as c, clip} from \"../clip/clip\";\nimport Clip = clip.Clip;\nimport {user_input} from \"../control/user_input\";\nimport UserInputHandler = user_input.UserInputHandler;\nimport POLYPHONY = modes_texture.POLYPHONY;\nimport TrainFreezer = freeze.TrainFreezer;\nimport {window as w} from \"../render/window\";\nimport MatrixWindow = w.MatrixWindow;\nimport LiveApiJs = live.LiveApiJs;\nimport {log} from \"../log/logger\";\nimport Logger = log.Logger;\nimport MONOPHONY = modes_texture.MONOPHONY;\nimport VOCAL = modes_control.VOCAL;\nimport {utils} from \"../utils/utils\";\nimport path_clip_from_list_path_device = utils.path_clip_from_list_path_device;\nimport DETECT = algorithm.DETECT;\nimport PREDICT = algorithm.PREDICT;\nimport PARSE = algorithm.PARSE;\nimport DERIVE = algorithm.DERIVE;\nimport Predict = algorithm.Predict;\nimport Derive = algorithm.Derive;\nimport Parse = algorithm.Parse;\nimport FREESTYLE = algorithm.FREESTYLE;\nimport {song as sng} from \"../song/song\";\nimport Song = sng.Song;\nimport SongDao = sng.SongDao;\nimport {note as n} from \"../note/note\";\nimport TreeModel = require(\"tree-model\");\nimport {scene} from \"../scene/scene\";\nimport SceneDao = scene.SceneDao;\nimport Scene = scene.Scene;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\n// let accept = (user_input, ground_truth) => {\n//     messenger.message([FretMapper.get_interval(user_input ,ground_truth)])\n// };\nlet logger = new Logger(env);\nlet messenger_render = new Messenger(env, 0, 'render');\nlet mode_texture, mode_control, depth_tree, clip_user_input, clip_user_input_synchronous, song, algorithm_train, user_input_handler, window, clip_target, segments, trainer;\n\nlet set_mode_texture = (option) => {\n    switch (option) {\n        case POLYPHONY: {\n            mode_texture = option;\n            break;\n        }\n        case MONOPHONY: {\n            mode_texture = option;\n            break;\n        }\n        default: {\n            post('error setting texture')\n        }\n    }\n};\n\nlet set_mode_control = (option) => {\n    switch (option) {\n        case VOCAL: {\n            mode_control = option;\n            break;\n        }\n        case INSTRUMENTAL: {\n            mode_control = option;\n            break;\n        }\n        default: {\n            post('error setting control')\n        }\n    }\n};\n\nlet set_algorithm_train = (option) => {\n\n    user_input_handler = new UserInputHandler(\n        mode_texture,\n        mode_control\n    );\n\n    switch (option) {\n        case FREESTYLE: {\n            // algorithm_train = new Freestyle(\n            //     user_input_handler\n            // );\n            break;\n        }\n        case DETECT: {\n            algorithm_train = new Detect(\n                user_input_handler\n            );\n            break;\n        }\n        case PREDICT: {\n            algorithm_train = new Predict(\n                user_input_handler\n            );\n            break;\n        }\n        case PARSE: {\n            algorithm_train = new Parse(\n                user_input_handler\n            );\n            break;\n        }\n        case DERIVE: {\n            algorithm_train = new Derive(\n                user_input_handler\n            );\n            break;\n        }\n        default: {\n            post('error setting algorithm')\n        }\n    }\n\n    window = new MatrixWindow(\n        384,\n        384,\n        messenger_render,\n        algorithm_train\n    );\n};\n\nlet set_depth_tree = (depth) => {\n    algorithm_train.set_depth(\n        depth\n    );\n};\n\nlet set_clip_user_input = () => {\n    let live_api = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot clip'\n    );\n\n    clip_user_input_synchronous = new c.Clip(\n        new c.ClipDao(\n            live_api,\n            new m.Messenger(env, 0),\n            false\n        )\n    );\n\n    clip_user_input = new c.Clip(\n        new c.ClipDao(\n            live_api,\n            new m.Messenger(env, 0),\n            true,\n            'clip_user_input'\n        )\n    );\n\n    clip_user_input.set_path_deferlow(\n        'set_path_clip_user_input'\n    )\n};\n\n// for (let i of _.range(0, num_scenes)) {\n//     let path_scene = ['live_set', 'scenes', Number(i)].join(' ');\n//     let scene = new Scene(\n//         new SceneDao(\n//             new li.LiveApiJs(\n//                 path_scene\n//             )\n//         )\n//     );\n//     scenes.push(scene)\n// }\n\nconst _ = require('underscore');\n\nlet set_segments = () => {\n    // @ts-ignore\n    let list_path_device = Array.prototype.slice.call(arguments);\n\n    // get path of device\n\n    // path of track\n\n    // get path of all clips on track\n\n    // get all their notes and put into \"notes_segments\"\n\n    let this_device = new li.LiveApiJs('this_device');\n\n    let path_this_device = this_device.get_path();\n\n    let list_this_device = path_this_device.split(' ');\n\n    let index_track = Number(list_path_device[2]);\n\n    let this_track = new li.LiveApiJs(list_this_device.slice(0, 3).join(' '));\n\n    let num_clipslots = this_track.get(\"clip_slots\").length/2;\n\n    let notes_segments = [];\n\n    for (let i_clipslot of _.range(0, num_clipslots)) {\n        let path_clip = ['live_set', 'tracks', index_track, 'clipslots', Number(i_clipslot), 'clip'].join(' ');\n        let clip_segment = new c.Clip(\n            new c.ClipDao(\n                new li.LiveApiJs(\n                    path_clip\n                ),\n                new m.Messenger(env, 0),\n                false\n            )\n        );\n        notes_segments = notes_segments.concat(\n            clip_segment.get_notes(\n                clip_segment.get_loop_bracket_lower(),\n                0,\n                clip_segment.get_loop_bracket_upper(),\n                128\n            )\n        )\n    }\n\n    return\n\n    let segments_local: Segment[] = [];\n\n    for (let i_note in notes_segments) {\n        let note = notes_segments[Number(i_note)];\n        let path_scene = ['live_set', 'scenes', Number(i_note)].join(' ');\n        let segment_local = new Segment(\n            note\n        );\n        segment_local.set_scene(\n            new Scene(\n                new SceneDao(\n                    new li.LiveApiJs(\n                        path_scene\n                    )\n                )\n            )\n        );\n        segments_local.push(\n            segment_local\n        )\n\n    }\n\n    segments = segments_local;\n};\n\nlet test = () => {\n\n};\n\n// TODO: send this via bus based on options in radio\nlet set_clip_target = () => {\n    // @ts-ignore\n    let list_path_device = Array.prototype.slice.call(arguments);\n\n    let live_api: LiveApiJs;\n\n    live_api = new li.LiveApiJs(\n        path_clip_from_list_path_device(list_path_device)\n    );\n\n    clip_target = new c.Clip(\n        new c.ClipDao(\n            live_api,\n            new m.Messenger(env, 0),\n            false\n        )\n    );\n};\n\nlet begin = () => {\n    song = new Song(\n        new SongDao(\n            new li.LiveApiJs(\n                'live_set',\n            ),\n            new Messenger(env, 0),\n            false\n        )\n    );\n\n    trainer = new Trainer(\n        window,\n        user_input_handler,\n        algorithm_train,\n        clip_user_input,\n        clip_target,\n        song,\n        segments,\n        messenger_render\n    );\n\n    trainer.init();\n\n    trainer.render_window();\n};\n\nlet pause = () => {\n    trainer.pause()\n};\n\nlet resume = () => {\n    trainer.resume()\n};\n\nlet user_input_command = (command: string) => {\n    // TODO: there is literally one character difference between the two algorithms - please abstract\n    switch(algorithm_train.get_name()) {\n        case PARSE: {\n            switch(command) {\n                case 'confirm': {\n                    let notes = clip_user_input_synchronous.get_notes(\n                        trainer.segment_current.beat_start,\n                        0,\n                        trainer.segment_current.beat_end - trainer.segment_current.beat_start,\n                        128\n                    );\n\n                    trainer.accept_input(notes);\n\n                    break;\n                }\n                case 'reset': {\n                    let coords_current = trainer.iterator_matrix_train.get_coord_current();\n\n                    clip_user_input.set_notes(\n                        trainer.history_user_input.get(\n                            [coords_current[0] + 1, coords_current[1]]\n                        )\n                    );\n\n                    break;\n                }\n                case 'erase': {\n                    clip_user_input.remove_notes(\n                        trainer.segment_current.beat_start,\n                        0,\n                        trainer.segment_current.beat_end - trainer.segment_current.beat_start,\n                        128\n                    );\n                    break;\n                }\n                default: {\n                    logger.log('command not recognized')\n                }\n            }\n            break;\n        }\n        case DERIVE: {\n            switch(command) {\n                case 'confirm': {\n                    let notes = clip_user_input_synchronous.get_notes(\n                        trainer.segment_current.beat_start,\n                        0,\n                        trainer.segment_current.beat_end - trainer.segment_current.beat_start,\n                        128\n                    );\n\n                    trainer.accept_input(notes);\n\n                    break;\n                }\n                case 'reset': {\n                    let coords_current = trainer.iterator_matrix_train.get_coord_current();\n\n                    clip_user_input.set_notes(\n                        trainer.history_user_input.get(\n                            [coords_current[0] - 1, coords_current[1]]\n                        )\n                    );\n\n                    break;\n                }\n                case 'erase': {\n                    clip_user_input.remove_notes(\n                        trainer.segment_current.beat_start,\n                        0,\n                        trainer.segment_current.beat_end - trainer.segment_current.beat_start,\n                        128\n                    );\n                    break;\n                }\n                default: {\n                    logger.log('command not recognized')\n                }\n            }\n            break;\n        }\n        default: {\n            logger.log('command not supported for this type of algorithm')\n        }\n    }\n};\n\nlet user_input_midi = (pitch: number, velocity: number) => {\n    switch(algorithm_train.get_name()) {\n        case DETECT: {\n            let tree: TreeModel = new TreeModel();\n            let note = tree.parse(\n                {\n                    id: -1,\n                    note: new n.Note(\n                        pitch,\n                        -Infinity,\n                        Infinity,\n                        velocity,\n                        0\n                    ),\n                    children: [\n\n                    ]\n                }\n            );\n            trainer.accept_input(\n                [note]\n            );\n            break;\n        }\n        case PREDICT: {\n            let tree: TreeModel = new TreeModel();\n            let note = tree.parse(\n                {\n                    id: -1,\n                    note: new n.Note(\n                        pitch,\n                        -Infinity,\n                        Infinity,\n                        velocity,\n                        0\n                    ),\n                    children: [\n\n                    ]\n                }\n            );\n            trainer.accept_input(\n                [note]\n            );\n            break;\n        }\n        default: {\n            logger.log('command not supported for this type of algorithm')\n        }\n    }\n};\n\nlet load = () => {\n\n    // TODO: logic to determine, from project folder, name of file\n\n    let freezer = new TrainFreezer(\n        env\n    );\n\n    freezer.freeze(\n        trainer,\n        '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync/tk_music_ts/cache/train_detect.json'\n    );\n};\n\nlet save = () => {\n\n    // TODO: logic to determine, from project folder, name of file\n\n    let config = {\n        'window': window,\n        'user_input_handler': user_input_handler,\n        'algorithm': algorithm_train,\n        'clip_user_input': clip_user_input,\n        'clip_target': clip_target,\n        'song': song,\n        'segments': segments,\n        'messenger': messenger_render,\n        'env': env\n    };\n\n    let thawer = new TrainThawer(\n        env\n    );\n\n    let train_thawed = thawer.thaw(\n        '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync/tk_music_ts/cache/train_detect.json',\n        config\n    );\n\n    train_thawed.render_window(\n\n    );\n};\n\nif (typeof Global !== \"undefined\") {\n    Global.train = {};\n    Global.train.load = load;\n    Global.train.save = save;\n    Global.train.begin = begin;\n    Global.train.pause = pause;\n    Global.train.resume = resume;\n    Global.train.user_input_command = user_input_command;\n    Global.train.user_input_midi = user_input_midi;\n    Global.train.set_segments = set_segments;\n    Global.train.set_clip_user_input = set_clip_user_input;\n    Global.train.set_clip_target = set_clip_target;\n    Global.train.set_depth_tree = set_depth_tree;\n    Global.train.set_algorithm_train = set_algorithm_train;\n    Global.train.set_mode_control = set_mode_control;\n    Global.train.set_mode_texture = set_mode_texture;\n}\n"]}