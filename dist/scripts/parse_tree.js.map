{"version":3,"file":"parse_tree.js","sourceRoot":"","sources":["../../src/scripts/parse_tree.ts"],"names":[],"mappings":"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","sourcesContent":["import {message as m, message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {live, live as li} from \"../live/live\";\nimport {clip as c} from \"../clip/clip\";\nimport {window as w} from \"../render/window\";\nimport {note as n} from \"../note/note\";\nimport TreeModel = require(\"tree-model\");\nimport {log} from \"../log/logger\";\nimport {song as s} from \"../song/song\";\nimport {phrase} from \"../phrase/phrase\";\n// import Phrase = phrase.Phrase;\n// import Note = note.Note;\nimport {segment} from \"../segment/segment\";\nimport Segment = segment.Segment;\nimport SegmentIterator = segment.SegmentIterator;\nimport {utils} from \"../utils/utils\";\nimport Logger = log.Logger;\nimport LiveClipVirtual = live.LiveClipVirtual;\nimport {parse} from \"../parse/parse\";\nimport TreeDepthIterator = parse.TreeDepthIterator;\nimport ParseTreeIterator = parse.ParseTreeIterator;\nimport ParseMatrix = parse.ParseMatrix;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet messenger: Messenger = new Messenger(env, 0);\n\nlet logger = new Logger(env);\n\nlet song_dao = new s.SongDao(\n    new li.LiveApiJs(\"live_set\"),\n    new m.Messenger(env, 0, \"song\"),\n    true\n);\n\nlet song: s.Song = new s.Song(song_dao);\n\nlet pwindow: w.Pwindow;\n\nlet elaboration: TreeModel.Node<n.Note>[];\n\nlet clip_user_input: c.Clip;\n\nlet clip_segment: c.Clip;\n\n// let logger = new log.Logger(env);\n\nlet segment_current: Segment;\n\nlet segment_iterator: SegmentIterator;\n\nlet tree_depth_iterator: TreeDepthIterator;\n\nlet parse_tree_iterator: ParseTreeIterator;\n\nlet layer_parse_tree_current: number;\n\nlet depth_parse_tree: number;\n\nlet parse_matrix: ParseMatrix;\n\n\nlet add_to_tree = (notes, beat_start, beat_end) => {\n    // parse_tree_iterator.next();\n\n    pwindow.elaborate(\n        notes,\n        beat_start,\n        beat_end,\n        tree_depth_iterator.get_index_current()\n    );\n\n    parse_matrix.set_notes(\n        tree_depth_iterator.get_index_current(),\n        segment_iterator.get_index_current(),\n        notes\n    );\n\n    let messages_notes = pwindow.get_messages_render_clips();\n\n    let messages_tree = pwindow.get_messages_render_tree();\n\n    let msg_clear = [\"clear\"];\n    msg_clear.unshift('render');\n    messenger.message(msg_clear);\n\n    for (let message of messages_notes) {\n        message.unshift('render');\n        messenger.message(message);\n    }\n\n    for (let message of messages_tree) {\n        message.unshift('render');\n        messenger.message(message);\n    }\n\n    let segment_next = parse_tree_iterator.next();\n\n    let val_segment_next = segment_next.value;\n\n    layer_parse_tree_current = tree_depth_iterator.get_index_current();\n\n    if (segment_next.done) {\n\n        song.set_overdub(0);\n\n        song.set_session_record(0);\n\n        clip_user_input.stop();\n\n        return\n    }\n\n    segment_current = val_segment_next;\n\n    // TODO: send messages to deferlow object\n    let interval = segment_current.get_endpoints_loop();\n\n    clip_user_input.set_endpoints_loop(\n        interval[0],\n        interval[1]\n    );\n};\n\nlet confirm = () => {\n\n    elaboration = clip_user_input.get_notes(\n        segment_current.beat_start,\n        0,\n        segment_current.beat_end - segment_current.beat_start,\n        128\n    );\n\n    add_to_tree(\n        elaboration,\n        segment_current.beat_start,\n        segment_current.beat_end\n    );\n\n    // logger.log(JSON.stringify(layer_parse_tree_current));\n\n    // pwindow.elaborate(\n    //     elaboration,\n    //     segment_current.beat_start,\n    //     segment_current.beat_end,\n    //     layer_parse_tree_current\n    // );\n    //\n    // // logger.log(JSON.stringify(tree_depth_iterator.get_index_current()));\n    // // logger.log(JSON.stringify(segment_iterator.get_index_current()));\n    //\n    // parse_matrix.set_notes(\n    //     tree_depth_iterator.get_index_current(),\n    //     segment_iterator.get_index_current(),\n    //     elaboration\n    // );\n    //\n    // let messages_notes = pwindow.get_messages_render_clips();\n    //\n    // let messages_tree = pwindow.get_messages_render_tree();\n    //\n    // let msg_clear = [\"clear\"];\n    // msg_clear.unshift('render');\n    // messenger.message(msg_clear);\n    //\n    // for (let message of messages_notes) {\n    //     message.unshift('render');\n    //     messenger.message(message);\n    // }\n    //\n    // for (let message of messages_tree) {\n    //     message.unshift('render');\n    //     messenger.message(message);\n    // }\n\n    // let segment_next = parse_tree_iterator.next();\n    //\n    // let val_segment_next = segment_next.value;\n    //\n    // layer_parse_tree_current = tree_depth_iterator.get_index_current();\n\n    // if (segment_next.done) {\n    //\n    //     song.set_overdub(0);\n    //\n    //     song.set_session_record(0);\n    //\n    //     clip_user_input.stop();\n    //\n    //     return\n    // }\n    //\n    // segment_current = val_segment_next;\n    //\n    // // TODO: send messages to deferlow object\n    // let interval = segment_current.get_endpoints_loop();\n    //\n    // clip_user_input.set_endpoints_loop(\n    //     interval[0],\n    //     interval[1]\n    // );\n};\n\nlet reset = () => {\n    clip_user_input.set_notes(\n        // segment_current.get_notes()\n        parse_matrix.get_notes(\n            tree_depth_iterator.get_index_current(),\n            segment_iterator.get_index_current()\n        )\n    );\n};\n\nlet erase = () => {\n    let epsilon = 1/(48 * 2);\n\n    clip_user_input.remove_notes(\n        segment_current.beat_start - epsilon,\n        0,\n        segment_current.beat_end - segment_current.beat_start,\n        128\n    );\n};\n\nfunction set_clip_segment() {\n\n    let vector_path_live = Array.prototype.slice.call(arguments);\n\n    let live_api_clip_segment = new li.LiveApiJs(\n        utils.PathLive.to_string(vector_path_live)\n    );\n\n    clip_segment = new c.Clip(\n        new c.ClipDao(\n            live_api_clip_segment,\n            new m.Messenger(env, 0),\n            false\n        )\n    );\n\n    // TODO: in information retreival phase, save the start and end points of the song and retreive them here\n    clip_segment.set_clip_endpoint_lower(\n        1\n    );\n\n    clip_segment.set_clip_endpoint_upper(\n        16 * 4\n    )\n}\n\nlet set_depth_tree = (depth) => {\n    depth_parse_tree = depth;\n};\n\nlet begin_train = () => {\n\n    let notes_segments: TreeModel.Node<n.Note>[] = clip_segment.get_notes_within_markers();\n\n    // let tree: TreeModel = new TreeModel();\n    //\n    // let note_root = tree.parse(\n    //     {\n    //         id: -1, // TODO: hashing scheme for clip id and beat start\n    //         note: new n.Note(\n    //             notes_segments[0].model.note.pitch,\n    //             notes_segments[0].model.note.beat_start,\n    //             notes_segments[notes_segments.length - 1].model.note.get_beat_end() - notes_segments[0].model.note.beat_start,\n    //             90,\n    //             0\n    //         ),\n    //         children: [\n    //\n    //         ]\n    //     }\n    // );\n    //\n    // let dim = 16 * 6 * 4;\n    //\n    // pwindow = new w.Pwindow(\n    //     dim,\n    //     dim,\n    //     new m.Messenger(env, 0)\n    // );\n    //\n    // pwindow.set_root(\n    //     note_root\n    // );\n\n    // layer_parse_tree_current = 1;\n\n    let segments: Segment[] = [];\n\n    for (let note of notes_segments) {\n        let clip_dao_virtual = new LiveClipVirtual([note]);\n        let clip_segment_virtual = new c.Clip(clip_dao_virtual);\n        segments.push(\n            new Segment(\n                note.model.note.beat_start,\n                note.model.note.get_beat_end(),\n                clip_segment_virtual\n            )\n        )\n    }\n\n    parse_matrix = new ParseMatrix(\n        depth_parse_tree,\n        segments.length\n    );\n\n    segment_iterator = new SegmentIterator(\n        segments,\n        true\n    );\n\n    tree_depth_iterator = new TreeDepthIterator(\n        depth_parse_tree,\n        true\n    );\n\n    parse_tree_iterator = new ParseTreeIterator(\n        segment_iterator,\n        tree_depth_iterator\n    );\n\n    let tree: TreeModel = new TreeModel();\n\n    let note_root = tree.parse(\n        {\n            id: -1, // TODO: hashing scheme for clip id and beat start\n            note: new n.Note(\n                notes_segments[0].model.note.pitch,\n                notes_segments[0].model.note.beat_start,\n                notes_segments[notes_segments.length - 1].model.note.get_beat_end() - notes_segments[0].model.note.beat_start,\n                90,\n                0\n            ),\n            children: [\n\n            ]\n        }\n    );\n\n    let dim = 16 * 6 * 4;\n\n    pwindow = new w.Pwindow(\n        dim,\n        dim,\n        new m.Messenger(env, 0)\n    );\n\n    // initialize\n    // tree_depth_iterator.next();\n\n    parse_tree_iterator.next();\n\n    pwindow.set_root(\n        note_root\n    );\n\n    // tree_depth_iterator.next();\n\n    for (let i in notes_segments) {\n        add_to_tree(\n            [\n                notes_segments[Number(i)]\n            ],\n            notes_segments[Number(i)].model.note.beat_start,\n            notes_segments[Number(i)].model.note.get_beat_end()\n        )\n        // parse_tree_iterator.next();\n        //\n        // pwindow.elaborate(\n        //     [notes_segments[Number(i)]],\n        //     notes_segments[Number(i)].model.note.beat_start,\n        //     notes_segments[Number(i)].model.note.get_beat_end(),\n        //     tree_depth_iterator.get_index_current()\n        // );\n        //\n        // parse_matrix.set_notes(\n        //     tree_depth_iterator.get_index_current(),\n        //     Number(i),\n        //     [notes_segments[Number(i)]]\n        // );\n        //\n        // let messages_notes = pwindow.get_messages_render_clips();\n        //\n        // let messages_tree = pwindow.get_messages_render_tree();\n        //\n        // let msg_clear = [\"clear\"];\n        // msg_clear.unshift('render');\n        // messenger.message(msg_clear);\n        //\n        // for (let message of messages_notes) {\n        //     message.unshift('render');\n        //     messenger.message(message);\n        // }\n        //\n        // for (let message of messages_tree) {\n        //     message.unshift('render');\n        //     messenger.message(message);\n        // }\n    }\n\n    // layer_parse_tree_current = tree_depth_iterator.get_index_current();\n\n    // parse_tree_iterator = new ParseTreeIterator(\n    //     segment_iterator,\n    //     tree_depth_iterator\n    // );\n\n    // let val_segment_next = parse_tree_iterator.next();\n    //\n    // segment_current = val_segment_next.value;\n    //\n    // layer_parse_tree_current = tree_depth_iterator.get_index_current();\n\n    // for (let i in notes_segments) {\n    //     parse_matrix.set_notes(\n    //         tree_depth_iterator.get_index_current(),\n    //         Number(i),\n    //         [notes_segments[Number(i)]]\n    //     );\n    // }\n\n    // let interval = segment_current.get_endpoints_loop();\n\n    // clip_user_input.set_endpoints_loop(interval[0], interval[1]);\n\n    song.set_overdub(1);\n\n    song.set_session_record(1);\n\n    // TODO: uncomment\n    clip_user_input.fire();\n};\n\nlet pause_train = () => {\n    clip_user_input.stop();\n};\n\nlet resume_train = () => {\n    clip_user_input.fire();\n};\n\nlet set_clip_user_input = () => {\n    let live_api_user_input = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot clip'\n    );\n\n    // TODO: get notes from segment clip\n\n    let notes_segments: TreeModel.Node<n.Note>[] = clip_segment.get_notes_within_markers();\n\n    let key_route = 'clip_user_input';\n\n    clip_user_input = new c.Clip(\n        new c.ClipDao(\n            live_api_user_input,\n            new m.Messenger(env, 0),\n            true,\n            key_route\n        )\n    );\n\n    clip_user_input.set_path_deferlow(\n        'set_path_clip_user_input'\n    );\n\n    let beats_duration_song = 16 * 4;\n\n    clip_user_input.remove_notes(\n        notes_segments[0].model.note.beat_start,\n        0,\n        beats_duration_song,\n        128\n    );\n\n    clip_user_input.set_notes(\n        notes_segments\n    );\n};\n\nif (typeof Global !== \"undefined\") {\n    Global.parse_tree = {};\n    Global.parse_tree.confirm = confirm;\n    Global.parse_tree.reset = reset;\n    Global.parse_tree.erase = erase;\n    Global.parse_tree.set_clip_user_input = set_clip_user_input;\n    Global.parse_tree.set_clip_segment = set_clip_segment;\n    Global.parse_tree.begin_train = begin_train;\n    Global.parse_tree.pause_train = pause_train;\n    Global.parse_tree.resume_train = resume_train;\n    Global.parse_tree.set_depth_tree = set_depth_tree;\n}\n"]}