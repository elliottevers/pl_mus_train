{"version":3,"file":"extract_beatmap.js","sourceRoot":"","sources":["../../src/scripts/extract_beatmap.ts"],"names":[],"mappings":";;AAAA,kDAA6C;AAC7C,IAAO,SAAS,GAAG,mBAAO,CAAC,SAAS,CAAC;AACrC,qCAAwC;AAIxC,wCAAqC;AACrC,wCAAqC;AACrC,IAAO,QAAQ,GAAG,aAAK,CAAC,QAAQ,CAAC;AACjC,IAAO,KAAK,GAAG,aAAK,CAAC,KAAK,CAAC;AAe3B,IAAI,GAAG,GAAW,KAAK,CAAC;AAExB,IAAI,GAAG,KAAK,KAAK,EAAE;IACf,IAAI,CAAC,sBAAsB,CAAC,CAAC;IAC7B,SAAS,GAAG,CAAC,CAAC;CACjB;AAED,IAAI,SAAS,GAAG,IAAI,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AAGtC,IAAI,sBAAsB,GAAG;IAEzB,IAAI,WAAW,GAAG,IAAI,WAAE,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IAElD,IAAI,KAAK,GAAG,IAAI,KAAK,CACjB,IAAI,QAAQ,CACR,IAAI,WAAE,CAAC,SAAS,CACZ,aAAK,CAAC,+BAA+B,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAChE,EACD,SAAS,CACZ,CACJ,CAAC;IAEF,KAAK,CAAC,eAAe,EAAE,CAAC;IAExB,IAAI,SAAS,GAAG,KAAK,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;IAEhD,SAAS,CAAC,SAAS,EAAE,CAAC;IAEtB,IAAI,iBAAiB,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;IAE7C,gCAAgC;IAChC,EAAE;IACF,6EAA6E;IAC7E,EAAE;IACF,4DAA4D;IAC5D,EAAE;IACF,0DAA0D;IAC1D,EAAE;IACF,qEAAqE;IACrE,EAAE;IACF,0EAA0E;IAC1E,EAAE;IACF,UAAU;IAEV,IAAI,iBAAiB,GAAG,iBAAiB,CAAC,gBAAgB,EAAE,CAAC;IAE7D,IAAI,eAAe,GAAG,iBAAiB,CAAC,cAAc,EAAE,CAAC;IAEzD,IAAI,kBAAkB,GAAG,iBAAiB,CAAC,sBAAsB,EAAE,CAAC;IAEpE,IAAI,kBAAkB,GAAG,iBAAiB,CAAC,sBAAsB,EAAE,CAAC;IAEpE,IAAI,YAAY,GAAG,CAAC,iBAAiB,CAAC,cAAc,EAAE,GAAG,iBAAiB,CAAC,gBAAgB,EAAE,CAAC,CAAC;IAE/F,SAAS,CAAC,OAAO,CAAC,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,CAAC,CAAC;IAE5D,SAAS,CAAC,OAAO,CAAC,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC,CAAC;IAExD,SAAS,CAAC,OAAO,CAAC,CAAC,oBAAoB,EAAE,kBAAkB,CAAC,CAAC,CAAC;IAE9D,SAAS,CAAC,OAAO,CAAC,CAAC,oBAAoB,EAAE,kBAAkB,CAAC,CAAC,CAAC;IAE9D,SAAS,CAAC,OAAO,CAAC,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC,CAAC;IAElD,SAAS,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;AACvC,CAAC,CAAC;AAEF,IAAI,IAAI,GAAG;AAEX,CAAC,CAAC;AAGF,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IAC/B,MAAM,CAAC,eAAe,GAAG,EAAE,CAAC;IAC5B,MAAM,CAAC,eAAe,CAAC,sBAAsB,GAAG,sBAAsB,CAAC;CAC1E","sourcesContent":["import {message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {live as li} from \"../live/live\";\nimport {clip} from \"../clip/clip\";\nimport Clip = clip.Clip;\nimport ClipDao = clip.ClipDao;\nimport {utils} from \"../utils/utils\";\nimport {track} from \"../track/track\";\nimport TrackDao = track.TrackDao;\nimport Track = track.Track;\nimport {log} from \"../log/logger\";\nimport Logger = log.Logger;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\ndeclare let Dict: any;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet messenger = new Messenger(env, 0);\n\n\nlet extract_beatmap_manual = () => {\n\n    let this_device = new li.LiveApiJs('this_device');\n\n    let track = new Track(\n        new TrackDao(\n            new li.LiveApiJs(\n                utils.get_path_track_from_path_device(this_device.get_path())\n            ),\n            messenger\n        )\n    );\n\n    track.load_clip_slots();\n\n    let clip_slot = track.get_clip_slot_at_index(0);\n\n    clip_slot.load_clip();\n\n    let clip_audio_warped = clip_slot.get_clip();\n\n    // let logger = new Logger(env);\n    //\n    // logger.log(JSON.stringify(clip_audio_warped.clip_dao.clip_live.get_id()));\n    //\n    // logger.log(JSON.stringify(clip_audio_warped.get_name()));\n    //\n    // logger.log(JSON.stringify(clip_audio_warped.get_id()));\n    //\n    // // logger.log(JSON.stringify(clip_audio_warped.get_end_marker()));\n    //\n    // logger.log(JSON.stringify(clip_audio_warped.get_loop_bracket_upper()));\n    //\n    // return;\n\n    let beat_start_marker = clip_audio_warped.get_start_marker();\n\n    let beat_end_marker = clip_audio_warped.get_end_marker();\n\n    let loop_bracket_lower = clip_audio_warped.get_loop_bracket_lower();\n\n    let loop_bracket_upper = clip_audio_warped.get_loop_bracket_upper();\n\n    let length_beats = (clip_audio_warped.get_end_marker() - clip_audio_warped.get_start_marker());\n\n    messenger.message(['beat_start_marker', beat_start_marker]);\n\n    messenger.message(['beat_end_marker', beat_end_marker]);\n\n    messenger.message(['loop_bracket_lower', loop_bracket_lower]);\n\n    messenger.message(['loop_bracket_upper', loop_bracket_upper]);\n\n    messenger.message(['length-beats', length_beats]);\n\n    messenger.message(['run', 'bang']);\n};\n\nlet test = () => {\n\n};\n\n\nif (typeof Global !== \"undefined\") {\n    Global.extract_beatmap = {};\n    Global.extract_beatmap.extract_beatmap_manual = extract_beatmap_manual;\n}\n"]}