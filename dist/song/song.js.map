{"version":3,"file":"song.js","sourceRoot":"","sources":["../../src/song/song.ts"],"names":[],"mappings":"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","sourcesContent":["import {message} from \"../message/messenger\";\nimport {live} from \"../live/live\";\nimport {scene} from \"../scene/scene\";\nimport {utils} from \"../utils/utils\";\nimport {track} from \"../track/track\";\nimport {log} from \"../log/logger\";\n\nexport namespace song {\n    import Messenger = message.Messenger;\n    import iLiveApiJs = live.iLiveApiJs;\n    import Scene = scene.Scene;\n    import Track = track.Track;\n    import SceneDao = scene.SceneDao;\n    import LiveApiJs = live.LiveApiJs;\n    import Logger = log.Logger;\n\n    export class Song {\n\n        song_dao: iSongDao;\n\n        scenes: Scene[];\n\n        tracks: Track[];\n\n        constructor(song_dao: iSongDao) {\n            this.song_dao = song_dao;\n        }\n\n        load_scenes(): void {\n            this.scenes = this.song_dao.get_scenes();\n        }\n\n        get_scene_at_index(index: number): Scene {\n            if (this.scenes.length > index) {\n                return this.scenes[index]\n            } else {\n                return null\n            }\n        }\n\n        create_scene_at_index(index: number) {\n            this.song_dao.create_scene(index)\n        }\n\n        set_session_record(int) {\n            this.song_dao.set_session_record(int);\n        }\n\n        set_overdub(int) {\n            this.song_dao.set_overdub(int);\n        }\n\n        set_tempo(int) {\n            this.song_dao.set_tempo(int);\n        }\n\n        start() {\n            this.song_dao.start()\n        }\n\n        stop() {\n            this.song_dao.stop()\n        }\n\n        get_scenes(): any[] {\n            return this.song_dao.get_scenes()\n        }\n\n        get_num_scenes(): number {\n            return this.get_scenes().length/2\n        }\n\n        set_path_deferlow(key_route): void {\n            this.song_dao.set_path_deferlow(\n                'set_path_' + key_route,\n                this.get_path()\n            )\n        }\n\n        get_path(): string {\n            return this.song_dao.get_path()\n        }\n\n    }\n\n    export interface iSongDao {\n        key_route;\n        set_session_record(int: number)\n        set_overdub(int: number)\n        set_tempo(int: number)\n        start(): void\n        stop(): void\n        get_scenes(): any[]\n        get_path(): string\n        set_path_deferlow(key_route_override: string, path_live: string): void\n        // is_async(): boolean\n        create_scene(index: number): void\n        // load_scenes(): void\n    }\n\n    export class SongDaoVirtual implements iSongDao {\n\n        // private deferlow: boolean;\n        public key_route: string;\n\n        scenes: Scene[];\n\n        // constructor(scenes: Scene[], messenger: Messenger, deferlow?: boolean, key_route?: string, env?: string) {\n        constructor(scenes: Scene[]) {\n            this.scenes = scenes;\n\n            // if (deferlow && !key_route) {\n            //     throw new Error('key route not specified when using deferlow');\n            // }\n            // this.deferlow = deferlow;\n            // this.key_route = key_route;\n        }\n\n        public create_scene(index: number): void {\n            return\n        }\n\n        public set_path_deferlow(key_route_override: string, path_live: string): void {\n            return\n        }\n\n        public is_async(): boolean {\n            // return this.deferlow\n            return false\n        }\n\n        get_path(): string {\n            return 'live_set'\n        }\n\n        get_scenes(): string[] {\n            let data: string[] = [];\n            for (let scene of this.scenes) {\n                data.push('id');\n                data.push(scene.get_id());\n            }\n            return data;\n        }\n\n        load_scenes(): void {\n\n        }\n\n        set_overdub(int: number) {\n            return\n        }\n\n        set_session_record(int: number) {\n            return\n        }\n\n        set_tempo(int: number) {\n            return\n        }\n\n        start(): void {\n            return\n        }\n\n        stop(): void {\n            return\n        }\n\n\n    }\n\n    export class SongDao implements iSongDao {\n\n        private song_live;\n        private messenger: Messenger;\n        private deferlow: boolean;\n        public key_route: string;\n        private env: string;\n\n        constructor(song_live: iLiveApiJs, messenger, deferlow?: boolean, key_route?: string, env?: string) {\n            this.song_live = song_live;\n            this.messenger = messenger;\n            if (deferlow && !key_route) {\n                throw new Error('key route not specified when using deferlow');\n            }\n            this.deferlow = deferlow;\n            this.key_route = key_route;\n            this.env = env;\n\n            // automatically set the deferlow path\n            // this.patcher.getnamed('song').message('set', 'session_record', String(int))\n        }\n\n        set_path_deferlow(key_route_override: string, path_live: string): void {\n            let mess: any[] = [key_route_override];\n\n            for (let word of utils.PathLive.to_message(path_live)) {\n                mess.push(word)\n            }\n\n            this.messenger.message(mess)\n        }\n\n        public is_async(): boolean {\n            return this.deferlow;\n        }\n\n        set_session_record(int) {\n            if (this.deferlow) {\n                this.messenger.message([this.key_route, \"set\", \"session_record\", String(int)]);\n            } else {\n                // this.song_live.set(\"session_record\", String(int));\n                this.song_live.set(\"session_record\", int);\n\n            }\n        }\n\n        set_overdub(int) {\n            if (this.deferlow) {\n                this.messenger.message([this.key_route, \"set\", \"overdub\", String(int)]);\n            } else {\n                // this.song_live.set(\"overdub\", int);\n                this.song_live.set(\"overdub\", int);\n\n            }\n        }\n\n        set_tempo(int) {\n            this.song_live.set(\"tempo\", int);\n        }\n\n        start() {\n            this.song_live.set(\"is_playing\", 1);\n        }\n\n        stop() {\n            this.song_live.set(\"is_playing\", 0);\n        }\n\n        get_scenes(): any[] {\n            let data_scenes = this.song_live.get(\"scenes\");\n\n            let scenes = [];\n\n            let scene = [];\n\n            for (let i_datum in data_scenes) {\n\n                let datum = data_scenes[Number(i_datum)];\n\n                scene.push(datum);\n\n                if (Number(i_datum) % 2 === 1) {\n                    scenes.push(scene)\n                }\n            }\n\n            return scenes.map((id_scene) => {\n                return new Scene(\n                    new SceneDao(\n                        new LiveApiJs(\n                            id_scene\n                        ),\n                        this.messenger\n                    )\n                )\n            });\n        }\n\n        get_path(): string {\n            return 'live_set'\n        }\n\n        create_scene(index: number): void {\n            this.song_live.call('create_scene', String(index))\n        }\n    }\n}"]}