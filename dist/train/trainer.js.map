{"version":3,"file":"trainer.js","sourceRoot":"","sources":["../../src/train/trainer.ts"],"names":[],"mappings":"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","sourcesContent":["// import {note, note as n} from \"../note/note\";\n// import TreeModel = require(\"tree-model\");\n// import {algorithm} from \"./algorithm\";\n// import {history} from \"../history/history\";\n// import {target} from \"../target/target\";\n// import {segment} from \"../segment/segment\";\n// import {parse} from \"../parse/parse\";\n// import {message} from \"../message/messenger\";\n// import {song} from \"../song/song\";\n// import {clip} from \"../clip/clip\";\n// import {iterate} from \"./iterate\";\n// import {log} from \"../log/logger\";\n// import {window} from \"../render/window\";\n// import {utils} from \"../utils/utils\";\n// import {live} from \"../live/live\";\n// import {track} from \"../track/track\";\n// import {user_input} from \"../control/user_input\";\n// // import {get_notes_on_track} from \"../scripts/segmenter\";\n// const _ = require('underscore');\n// const l = require('lodash');\n//\n// export namespace trainer {\n//\n//     import HistoryUserInput = history.HistoryUserInput;\n//     import TargetIterator = target.TargetIterator;\n//     import Segment = segment.Segment;\n//     import Subtarget = target.Subtarget;\n//     import Target = target.Target;\n//     import Messenger = message.Messenger;\n//     import Clip = clip.Clip;\n//     import SubtargetIterator = target.SubtargetIterator;\n//     import StructParse = parse.StructParse;\n//     import MatrixIterator = iterate.MatrixIterator;\n//     import IteratorTrainFactory = iterate.IteratorTrainFactory;\n//     import Note = note.Note;\n//     import Track = track.Track;\n//     import FactoryMatrixObjectives = iterate.FactoryMatrixObjectives;\n//     import Trainable = algorithm.Trainable;\n//     import UserInputHandler = user_input.UserInputHandler;\n//     import Song = song.Song;\n//     import MatrixWindow = window.MatrixWindow;\n//     import ClipVirtual = live.ClipVirtual;\n//     import TrackVirtual = track.TrackVirtual;\n//     import SongVirtual = song.SongVirtual;\n//     import Clip = live.Clip;\n//     import Song = song.Song;\n//     import Track = track.Track;\n//     // import Algorithm = algorithm.Algorithm;\n//\n//     export class Trainer {\n//\n//         private window;\n//         public trainable: Trainable; // TODO: type\n//         public clip_user_input_async: Clip;\n//         public clip_user_input_sync: Clip;\n//         // private clip_target: Clip;\n//         private notes_target_track: TreeModel.Node<Note>[];\n//         private track_target: Track;\n//         private track_user_input: Track;\n//         private song: Song;\n//         private segments: Segment[];\n//         private messenger: Messenger;\n//\n//         public struct_parse: StructParse;\n//         public history_user_input: HistoryUserInput;\n//\n//         private counter_user_input: number;\n//         private limit_user_input: number;\n//         private limit_input_reached: boolean;\n//\n//         private segment_current: Segment;\n//         public target_current: Target;\n//         private subtarget_current: Subtarget;\n//\n//         private matrix_targets: TargetIterator[][];\n//         public iterator_matrix_train: MatrixIterator;\n//         private iterator_target_current: TargetIterator;\n//         private iterator_subtarget_current: SubtargetIterator;\n//\n//         private user_input_handler: UserInputHandler;\n//\n//         constructor(\n//             window: MatrixWindow,\n//             user_input_handler: UserInputHandler,\n//             trainable: Trainable,\n//             track_target: Track,\n//             track_user_input: Track,\n//             song: Song,\n//             segments: Segment[],\n//             messenger: Messenger\n//         ) {\n//             this.window = window;\n//             this.trainable = trainable;\n//             // this.notes_target = notes_target;\n//             this.track_target = track_target;\n//             this.song = song;\n//             this.segments = segments;\n//             this.messenger = messenger;\n//\n//             this.notes_target_track = track.get_notes_on_track(\n//                 track_target.get_path()\n//             );\n//\n//             this.iterator_matrix_train = IteratorTrainFactory.get_iterator_train(\n//                 this.trainable,\n//                 this.segments\n//             );\n//\n//             this.history_user_input = new HistoryUserInput(\n//                 FactoryMatrixObjectives.create_matrix_objectives(\n//                     this.trainable,\n//                     this.segments\n//                 )\n//             );\n//\n//             this.window.initialize_clips(\n//                 this.trainable,\n//                 this.segments\n//             );\n//\n//             this.window.set_length_beats(\n//                 this.segments[this.segments.length - 1].beat_end\n//             );\n//\n//             this.trainable.initialize(\n//                 this.window,\n//                 this.segments,\n//                 this.notes_target_track,\n//                 this.user_input_handler\n//             );\n//\n//             // TODO: figure out getting notes from the target track\n//             this.matrix_targets = this.trainable.create_matrix_targets(\n//                 this.user_input_handler,\n//                 this.segments,\n//                 this.notes_target_track\n//             );\n//\n//             this.struct_parse = this.trainable.create_struct_parse(\n//                 this.segments\n//             );\n//\n//             this.trainable.initialize_tracks(\n//                 this.segments,\n//                 this.track_target,\n//                 this.track_user_input,\n//                 this.matrix_targets\n//             )\n//         }\n//\n//         public clear_window() {\n//             this.window.clear()\n//         }\n//\n//         public render_window() {\n//             this.window.render(\n//                 this.iterator_matrix_train,\n//                 this.target_current,\n//                 this.trainable,\n//                 this.struct_parse\n//             )\n//         }\n//\n//         public unpause() {\n//             this.trainable.unpause(this.song, this.segment_current.scene)\n//         }\n//\n//         public pause() {\n//             this.trainable.pause(this.song, this.segment_current.scene)\n//         }\n//\n//         private advance() {\n//             if (this.trainable.b_parsed) {\n//                 this.advance_segment()\n//             } else if (this.trainable.b_targeted) {\n//                 this.advance_subtarget()\n//             } else {\n//                 throw 'cannot determine how to advance'\n//             }\n//         }\n//\n//         public commence() {\n//             this.advance()\n//         }\n//\n//         private advance_segment() {\n//\n//             let obj_next_coord = this.iterator_matrix_train.next();\n//\n//             if (obj_next_coord.done) {\n//\n//                 this.trainable.terminate(this.struct_parse, this.segments);\n//\n//                 this.trainable.pause(this.song, this.segment_current.scene);\n//\n//                 return\n//             }\n//\n//             this.next_segment()\n//         }\n//\n//         private advance_subtarget() {\n//\n//             let have_not_begun: boolean = (!this.iterator_matrix_train.b_started);\n//\n//             if (have_not_begun) {\n//                 this.iterator_matrix_train.next();\n//\n//                 this.iterator_target_current = this.matrix_targets[0][0];\n//\n//                 this.iterator_target_current.next();\n//\n//                 this.target_current = this.iterator_target_current.current();\n//\n//                 this.iterator_subtarget_current = this.target_current.iterator_subtarget;\n//\n//                 this.iterator_subtarget_current.next();\n//\n//                 this.subtarget_current = this.iterator_subtarget_current.current();\n//\n//                 this.next_segment();\n//\n//                 return\n//             }\n//\n//             let obj_next_subtarget = this.iterator_subtarget_current.next();\n//\n//             if (obj_next_subtarget.done) {\n//\n//                 let obj_next_target = this.iterator_target_current.next();\n//\n//                 if (obj_next_target.done) {\n//\n//                     let obj_next_coord = this.iterator_matrix_train.next();\n//\n//                     if (obj_next_coord.done) {\n//\n//                         this.trainable.terminate(this.struct_parse, this.segments);\n//\n//                         this.trainable.pause(this.song, this.segment_current.scene);\n//\n//                         return\n//                     }\n//\n//                     let coord_next = obj_next_coord.value;\n//\n//                     this.iterator_target_current = this.matrix_targets[coord_next[0]][coord_next[1]];\n//\n//                     let obj_next_target_twice_nested = this.iterator_target_current.next();\n//\n//                     this.target_current = obj_next_target_twice_nested.value;\n//\n//                     let obj_next_subtarget_twice_nested = this.target_current.iterator_subtarget.next();\n//\n//                     this.subtarget_current = obj_next_subtarget_twice_nested.value;\n//\n//                     this.iterator_subtarget_current = this.target_current.iterator_subtarget;\n//\n//                     this.next_segment();\n//\n//                     return\n//                 }\n//\n//                 this.target_current = obj_next_target.value;\n//\n//                 let obj_next_subtarget_once_nested = this.target_current.iterator_subtarget.next();\n//\n//                 this.subtarget_current = obj_next_subtarget_once_nested.value;\n//\n//                 this.iterator_subtarget_current = this.target_current.iterator_subtarget;\n//\n//                 return\n//             }\n//\n//             this.subtarget_current = obj_next_subtarget.value;\n//         }\n//\n//         next_segment() {\n//             this.segment_current = this.segments[this.iterator_matrix_train.get_coord_current()[1]];\n//\n//             this.segment_current.scene.fire(true);\n//\n//             this.clip_user_input_sync = this.segment_current.clip_user_input_sync;\n//\n//             this.clip_user_input_async = this.segment_current.clip_user_input_async;\n//\n//             this.trainable.stream_bounds(this.messenger, this.subtarget_current, this.segment_current)\n//         }\n//\n//         accept_input(notes_input_user: TreeModel.Node<n.Note>[]) {\n//\n//             this.counter_user_input++;\n//\n//             if (this.counter_user_input >= this.limit_user_input) {\n//                 this.limit_input_reached = true\n//             }\n//\n//             if (this.limit_input_reached) {\n//                 // completely ignore\n//                 return\n//             }\n//\n//             if (this.trainable.warrants_advance(notes_input_user, this.subtarget_current)) {\n//\n//                 let input_postprocessed = this.trainable.postprocess_user_input(notes_input_user, this.subtarget_current);\n//\n//                 this.history_user_input.concat(\n//                     input_postprocessed,\n//                     this.iterator_matrix_train.get_coord_current()\n//                 );\n//\n//                 this.window.add_notes_to_clip(\n//                     input_postprocessed,\n//                     this.iterator_matrix_train.get_coord_current(),\n//                     this.trainable\n//                 );\n//\n//                 this.advance()\n//\n//                 this.render_window();\n//             }\n//         }\n//     }\n// }"]}