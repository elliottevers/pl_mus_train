{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../src/log/logger.ts"],"names":[],"mappings":";;AAAA,IAAiB,GAAG,CAmEnB;AAnED,WAAiB,GAAG;IAIhB;QAII,gBAAY,GAAW;YACnB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACnB,CAAC;QAED,oBAAG,GAAH,UAAI,OAAe;YACf,IAAI,IAAI,CAAC,GAAG,KAAK,KAAK,EAAE;gBACpB,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;aACzB;iBAAM,IAAI,IAAI,CAAC,GAAG,KAAK,MAAM,EAAE;gBAC5B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;aAC1B;iBAAM;gBACH,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;gBACzB,IAAI,CAAC,IAAI,CAAC,CAAC;gBACX,MAAM,qBAAqB,CAAA;aAC9B;QACL,CAAC;QAED,oBAAoB;QACpB,wBAAO,GAAP;YAAQ,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YAClB,KAAI,IAAI,CAAC,GAAC,CAAC,EAAC,GAAG,GAAC,SAAS,CAAC,MAAM,EAAE,CAAC,GAAC,GAAG,EAAE,CAAC,EAAE,EAAE;gBAC1C,IAAI,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;gBAC3B,IAAG,OAAO,IAAI,OAAO,CAAC,QAAQ,EAAE;oBAC5B,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;oBAC3B,IAAG,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;wBAC3B,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;qBAC/B;oBACD,IAAI,CAAC,CAAC,CAAC,CAAC;iBACX;qBACI,IAAG,OAAO,KAAK,IAAI,EAAE;oBACtB,IAAI,CAAC,QAAQ,CAAC,CAAC;iBAClB;qBACI;oBACD,IAAI,CAAC,OAAO,CAAC,CAAC;iBACjB;aACJ;YACD,IAAI,CAAC,IAAI,CAAC,CAAC;QACf,CAAC;QAED,oBAAoB;QACpB,yBAAQ,GAAR;YAAS,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YACnB,KAAI,IAAI,CAAC,GAAC,CAAC,EAAC,GAAG,GAAC,SAAS,CAAC,MAAM,EAAE,CAAC,GAAC,GAAG,EAAE,CAAC,EAAE,EAAE;gBAC1C,IAAI,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;gBAC3B,IAAG,OAAO,IAAI,OAAO,CAAC,QAAQ,EAAE;oBAC5B,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;oBAC3B,IAAG,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;wBAC3B,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;qBAC/B;oBACD,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAClB;qBACI,IAAG,OAAO,KAAK,IAAI,EAAE;oBACtB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;iBACzB;qBACI;oBACD,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;iBACxB;aACJ;YACD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACtB,CAAC;QAEL,aAAC;IAAD,CAAC,AA9DD,IA8DC;IA9DY,UAAM,SA8DlB,CAAA;AACL,CAAC,EAnEgB,GAAG,GAAH,WAAG,KAAH,WAAG,QAmEnB","sourcesContent":["export namespace log {\n\n    declare function post(o: any): void;\n\n    export class Logger  {\n\n        public env: string;\n\n        constructor(env: string) {\n            this.env = env;\n        }\n\n        log(message: string): void {\n            if (this.env === 'max') {\n                this.log_max(message);\n            } else if (this.env === 'node') {\n                this.log_node(message);\n            } else {\n                post('env: ' + this.env);\n                post('\\n');\n                throw 'environment invalid'\n            }\n        }\n\n        // TODO: make static\n        log_max(...args: any[]): void {\n            for(var i=0,len=arguments.length; i<len; i++) {\n                var message = arguments[i];\n                if(message && message.toString) {\n                    var s = message.toString();\n                    if(s.indexOf(\"[object \") >= 0) {\n                        s = JSON.stringify(message);\n                    }\n                    post(s);\n                }\n                else if(message === null) {\n                    post(\"<null>\");\n                }\n                else {\n                    post(message);\n                }\n            }\n            post(\"\\n\");\n        }\n\n        // TODO: make static\n        log_node(...args: any[]): void {\n            for(var i=0,len=arguments.length; i<len; i++) {\n                var message = arguments[i];\n                if(message && message.toString) {\n                    var s = message.toString();\n                    if(s.indexOf(\"[object \") >= 0) {\n                        s = JSON.stringify(message);\n                    }\n                    console.log(s);\n                }\n                else if(message === null) {\n                    console.log(\"<null>\");\n                }\n                else {\n                    console.log(message);\n                }\n            }\n            console.log(\"\\n\");\n        }\n\n    }\n}"]}