{"version":3,"file":"map.js","sourceRoot":"","sources":["../../src/control/map.ts"],"names":[],"mappings":"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","sourcesContent":["import {message} from \"../message/messenger\";\nimport {control} from \"./control\";\nconst _ = require(\"underscore\");\n\nexport namespace map {\n\n    export class FretMapper {\n\n        coordinate_last_played: number[];\n\n        root = {\n            6: 3\n        };\n\n        messenger;\n\n        map_generic_interval = {\n            1: 6,\n            2: 6,\n            3: 6,\n            4: 5,\n            5: 5,\n            6: 5,\n            7: 4,\n            8: 4,\n            9: 4,\n            10: 3,\n            11: 3,\n            12: 3,\n            13: 2,\n            14: 2,\n            15: 2,\n            16: 1,\n            17: 1,\n            18: 1\n        };\n\n        strings = {\n            6: _.range(\n                control.string_to_root_note_map[6],\n                control.string_to_root_note_map[6] + 12\n            ),\n            5: _.range(\n                control.string_to_root_note_map[5],\n                control.string_to_root_note_map[5] + 12\n            ),\n            4: _.range(\n                control.string_to_root_note_map[4],\n                control.string_to_root_note_map[4] + 12\n            ),\n            3: _.range(\n                control.string_to_root_note_map[3],\n                control.string_to_root_note_map[3] + 12\n            ),\n            2: _.range(\n                control.string_to_root_note_map[2],\n                control.string_to_root_note_map[2] + 12\n            ),\n            1: _.range(\n                control.string_to_root_note_map[1],\n                control.string_to_root_note_map[1] + 12\n            ),\n        };\n\n        constructor(messenger) {\n            // TODO: create 'config' that generates 'root', 'map_generic_interval', 'notes_per_string'\n            this.messenger = messenger;\n        }\n\n        play(note_midi) {\n            let coordinate = this.map(note_midi);\n            if (this.coordinate_last_played != null) {\n                this.messenger.message(this.coordinate_last_played.concat([0]));\n            }\n            this.messenger.message(coordinate.concat([1]));\n            this.coordinate_last_played = coordinate;\n        }\n\n        private get_index_string(interval_generic, offset_octave) {\n            let interval = interval_generic + offset_octave * 7;\n            if (interval > 18) {\n                return 1\n            } else if (interval < 1) {\n                return 6\n            } else {\n                return this.map_generic_interval[interval]\n            }\n        }\n\n        map(note_midi) {\n            let note_lower = this.strings[6][this.root[6]];\n            let note_upper = note_midi;\n            let index_string = this.get_index_string(\n                FretMapper.get_interval_generic(\n                    FretMapper.get_interval(\n                        note_upper,\n                        note_lower\n                    )\n                ),\n                FretMapper.get_offset_octave(\n                    note_upper,\n                    note_lower\n                )\n            );\n\n            let position_fret = this.strings[index_string].indexOf(note_midi);\n\n            return [index_string, position_fret]\n        }\n\n        static get_offset_octave(note_upper, note_lower): number {\n            let octaves = [-12, 0, 12, 24, 36];\n            let interval = note_upper - note_lower;\n            for (let i_octave in octaves) {\n                if (interval >= octaves[Number(i_octave)] && interval < octaves[Number(i_octave) + 1] ) {\n                    return Number(i_octave) - 1;\n                }\n            }\n        }\n\n        static get_interval(upper, lower) {\n            let diff = (upper - lower);\n            return ((diff % 12) + 12) % 12;\n        }\n\n        static get_interval_generic(interval) {\n            switch (interval) {\n                case 0: {\n                    return 1\n                }\n                case 1: {\n                    return 2\n                }\n                case 2: {\n                    return 2\n                }\n                case 3: {\n                    return 3\n                }\n                case 4: {\n                    return 3\n                }\n                case 5: {\n                    return 4\n                }\n                case 6: {\n                    return 5\n                }\n                case 7: {\n                    return 5\n                }\n                case 8: {\n                    return 6\n                }\n                case 9: {\n                    return 6\n                }\n                case 10: {\n                    return 7\n                }\n                case 11: {\n                    return 7\n                }\n            }\n        }\n    }\n}"]}