{"version":3,"file":"note.js","sourceRoot":"","sources":["../../src/note/note.ts"],"names":[],"mappings":"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","sourcesContent":["export namespace note {\n\n    export class Note  {\n\n        public pitch: number;\n        public beat_start: number;\n        public beats_duration: number;\n        public velocity: number;\n        public muted: number;\n        public _b_has_chosen: boolean;\n\n        constructor(\n            pitch: number,\n            beat_start: number,\n            beats_duration: number,\n            velocity: number,\n            muted: number\n        ) {\n            this.pitch = pitch;\n            this.beat_start = beat_start;\n            this.beats_duration = beats_duration;\n            this.velocity = velocity;\n            this.muted = muted;\n            this._b_has_chosen = false;\n        }\n\n        static get_overlap_beats(\n            beat_start_former: number,\n            beat_end_former: number,\n            beat_start_latter: number,\n            beat_end_latter: number\n        ) {\n            let a = beat_start_former, b = beat_end_former, c = beat_start_latter, d = beat_end_latter;\n            let former_starts_before_latter = (a <= c);\n            let former_ends_before_latter = (b <= d);\n\n            // TODO: check logic\n            if (former_starts_before_latter && former_ends_before_latter) {\n                return b - c;\n            } else if (former_starts_before_latter && !former_ends_before_latter) {\n                return a - c;\n            } else if (!former_starts_before_latter && !former_ends_before_latter) {\n                return 0;\n            } else if (!former_starts_before_latter && former_ends_before_latter) {\n                return b - a;\n            }\n\n            throw 'case not considered'\n\n        }\n\n        get_interval_beats():number[] {\n            return [this.beat_start, this.beat_start + this.beats_duration];\n        }\n\n        // TODO: add type of argument and return value\n        get_best_candidate(list_candidate_note)  {\n            let beats_overlap, beats_max_overlap, list_candidate_note_max_overlap;\n\n            list_candidate_note_max_overlap = [];\n            beats_max_overlap = 0;\n\n            for (let candidate_note of list_candidate_note) {\n                beats_overlap = Note.get_overlap_beats(\n                    this.beat_start,\n                    this.beat_start + this.beats_duration,\n                    candidate_note.data.beat_start,\n                    candidate_note.data.beat_start + candidate_note.data.beats_duration\n                );\n                if (beats_overlap > beats_max_overlap) {\n                    beats_max_overlap = beats_overlap;\n                    list_candidate_note_max_overlap = [];\n                }\n                if (beats_overlap === beats_max_overlap) {\n                    list_candidate_note_max_overlap.push(candidate_note);\n                }\n            }\n\n            function compare(note_former,note_latter) {\n                if (note_former.data.beat_start < note_latter.data.beat_start)\n                    return -1;\n                if (note_former.data.beat_start > note_latter.data.beat_start)\n                    return 1;\n                return 0;\n            }\n\n            list_candidate_note_max_overlap.sort(compare);\n\n            return list_candidate_note_max_overlap[0];\n        }\n\n        choose(): boolean {\n            if (this._b_has_chosen) {\n                // tree.children[0].appendChild(left_left).appendChild(left_right);\n                // note_parent.appendChild(this);\n                this._b_has_chosen = true;\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n}"]}