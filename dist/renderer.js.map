{"version":3,"file":"renderer.js","sourceRoot":"","sources":["../src/renderer.ts"],"names":[],"mappings":"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","sourcesContent":["import TreeModel = require(\"tree-model\");\n\ndeclare let Global: any;\n// TODO: make dedicated library object for the following\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\n\nimport {clip as c} from \"./clip/clip\";\nimport {message as m} from \"./message/messenger\";\nimport {log} from \"./log/logger\";\nimport {live, live as li} from \"./live/live\"\nimport {note as n} from \"./note/note\"\nimport LiveApiJs = live.LiveApiJs;\nimport {window as w} from \"./render/window\"\nimport {song as s} from \"./song/song\";\n// import Song = song.Song;\n// const sinon = require(\"sinon\");\n\nlet bound_lower, bound_upper;\n\noutlets = 2;\n\n\n// let env: string = process.argv[2];\n// TODO: handle better - if set to max, can't run in node, but can compile TypeScript to max object\n// if we switch from node execution to max execution, will max have stopped watching?\nlet env: string = 'max';\n\nif (env === 'max') {\n    autowatch = 1;\n}\n\n// let live_api_user_input: LiveApiJs;\n// let live_api_to_elaborate: LiveApiJs;\n// let live_api_elaboration: LiveApiJs;\n// let clip_user_input: c.Clip;\n// let clip_to_elaborate: c.Clip;\n// let clip_elaboration: c.Clip;\n// let pwindow: w.Pwindow;\n// let elaboration: TreeModel.Node<n.Note>[];\n\n// let index_track = 18;\n// let index_clip_slot = 0;\n//\n// let path = \"live_set tracks \" + index_track + \" clip_slots \" + index_clip_slot + \" clip\";\n//\n// live_api_user_input = new li.LiveApiJs(index_track_user_input, index_clip_slot_user_input);\n\n// let song_dao = new s.SongDao(\n//     new li.LiveApiJs(\"live_set\"),\n//     new m.Messenger(env, 1, \"song\"),\n//     true\n// );\n//\n// let song: s.Song = new s.Song(song_dao);\n//\n// let boundary_change_record_interval = (int) => {\n//     song.set_session_record(int);\n// };\n\n// let toggle: boolean = true;\n\nlet test = () => {\n    // clip_elaboration.remove_notes(\n    //     0,\n    //     0,\n    //     4,\n    //     128\n    // );\n\n    // post(clip_user_input.get_loop_bracket_upper());\n    // post('\\n');\n    // testing if we can change the looping of phrases automatically\n    toggle = !toggle;\n    if (toggle) {\n        post('true');\n        clip_user_input.set_loop_bracket_lower(0);\n        clip_user_input.set_loop_bracket_upper(2);\n        // clip_user_input.set_loop_bracket_upper(4);\n        // clip_user_input.set_loop_bracket_lower(2);\n    } else {\n        post('false');\n        // clip_user_input.set_loop_bracket_lower(0);\n        // clip_user_input.set_loop_bracket_upper(2);\n        clip_user_input.set_loop_bracket_upper(4);\n        clip_user_input.set_loop_bracket_lower(2);\n    }\n};\n\n// let set_bound_upper = (beat) => {\n//     bound_upper = Number(beat);\n// };\n//\n// let set_bound_lower = (beat) => {\n//     bound_lower = Number(beat);\n// };\n\nlet confirm = () => {\n    // elaboration = clip_user_input.get_notes(bound_lower, 0, bound_upper, 128);\n\n    // pwindow.elaborate(\n    //     elaboration,\n    //     bound_lower,\n    //     bound_upper\n    // );\n    //\n    // let messages_notes = pwindow.get_messages_render_clips();\n    //\n    // let messages_tree = pwindow.get_messages_render_tree();\n    //\n    // // most recent summarization\n    // let notes_leaves = pwindow.get_notes_leaves();\n\n    // let logger = new log.Logger(env);\n    //\n    // let messenger = new m.Messenger(env, 0);\n    //\n    // messenger.message([\"clear\"]);\n    //\n    // for (let message of messages_notes) {\n    //     messenger.message(message);\n    //     logger.log(message);\n    // }\n    //\n    // for (let message of messages_tree) {\n    //     messenger.message(message);\n    //     logger.log(message);\n    // }\n\n    // logger.log('about to remove notes');\n\n    // clip_elaboration.remove_notes(\n    //     notes_leaves[0].model.note.beat_start,\n    //     0,\n    //     notes_leaves[notes_leaves.length - 1].model.note.get_beat_end() - notes_leaves[0].model.note.beat_start,\n    //     128\n    // );\n\n    // clip_elaboration.remove_notes(\n    //     0,\n    //     0,\n    //     0,\n    //     128\n    // );\n    //\n    // clip_elaboration.set_notes(\n    //     notes_leaves\n    // );\n};\n\n// let reset = () => {\n//     clip_user_input.remove_notes(bound_lower, 0, bound_upper, 128);\n// };\n\n// maybe init?\nlet main = (\n    index_track_to_elaborate,\n    index_clip_slot_to_elaborate,\n    index_track_user_input,\n    index_clip_slot_user_input,\n    index_track_elaboration,\n    index_clip_slot_elaboration\n)=>{\n\n    // var clip_1 = new c.Clip(new cd.ClipDao(index_track_1, index_clip_slot_universal, messenger, deferlow));\n\n    // let b_stub_live_api: boolean = false;\n\n    let live_api_1, live_api_2, live_api_3, live_api_4;\n\n    // get(property: string): any;\n    // set(property: string, value: any): void;\n    // call(func: string): void;\n\n    if (env === 'node') {\n        live_api_1 = {\n            get: (property: string): any => {return 0},\n            set: (property: string, value: any): void => {},\n            call: (func: string,  ...args: any[]): any => {return 0}\n        };\n        live_api_2 = {\n            get: (property: string) => {return 0},\n            set: (property: string, value: any): void => {},\n            call: (func: string,  ...args: any[]): any => {return 0}\n        };\n        live_api_3 = {\n            get: (property: string) => {return 0},\n            set: (property: string, value: any): void => {},\n            call: (func: string,  ...args: any[]): any => {return 0}\n        };\n        live_api_4 = {\n            get: (property: string) => {return 0},\n            set: (property: string, value: any): void => {},\n            call: (func: string,  ...args: any[]): any => {return 0}\n        };\n    } else {\n        // live_api_1 = new li.LiveApiJs(15, 0);\n        // live_api_2 = new li.LiveApiJs(14, 0);\n        // live_api_3 = new li.LiveApiJs(13, 0);\n        // live_api_4 = new li.LiveApiJs(12, 0);\n        // \"live_set tracks \" + index_track + \" clip_slots \" + index_clip_slot + \" clip\";\n        live_api_user_input = new li.LiveApiJs(\n            \"live_set tracks \" + index_track_user_input + \" clip_slots \" + index_clip_slot_user_input + \" clip\"\n        );\n        live_api_to_elaborate = new li.LiveApiJs(\n            \"live_set tracks \" + index_track_to_elaborate + \" clip_slots \" + index_clip_slot_to_elaborate + \" clip\"\n        );\n        live_api_elaboration = new li.LiveApiJs(\n            \"live_set tracks \" + index_track_elaboration + \" clip_slots \" + index_clip_slot_elaboration + \" clip\"\n        );\n    }\n\n    // clip 1\n    // let clip_dao_1 = new c.ClipDao(\n    //     live_api_1,\n    //     new m.Messenger(env, 0),\n    //     false\n    // );\n    // sinon.stub(clip_dao_1, \"get_start_marker\").callsFake(() => {\n    //     return 0;\n    // });\n    // sinon.stub(clip_dao_1, \"get_end_marker\").callsFake(() => {\n    //     return 4;\n    // });\n    // sinon.stub(clip_dao_1, \"get_notes_within_markers\").callsFake(() => {\n    //     return [\"notes\",1,\"note\",50,0,4,127,0,\"done\"]\n    // });\n\n\n    // clip 2\n    // let clip_dao_2 = new c.ClipDao(\n    //     live_api_2,\n    //     new m.Messenger(env, 0),\n    //     false\n    // );\n    // sinon.stub(clip_dao_2, \"get_start_marker\").callsFake(() => {\n    //     return 0;\n    // });\n    // sinon.stub(clip_dao_2, \"get_end_marker\").callsFake(() => {\n    //     return 4;\n    // });\n    // sinon.stub(clip_dao_2, \"get_notes_within_markers\").callsFake(() => {\n    //     return [\"notes\",2,\"note\",50,0,2,127,0,\"note\",54,2,2,127,0,\"done\"]\n    // });\n\n\n    // clip 3\n    // let clip_dao_3 = new c.ClipDao(\n    //     live_api_3,\n    //     new m.Messenger(env, 0),\n    //     false\n    // );\n    // sinon.stub(clip_dao_3, \"get_start_marker\").callsFake(() => {\n    //     return 0;\n    // });\n    // sinon.stub(clip_dao_3, \"get_end_marker\").callsFake(() => {\n    //     return 4;\n    // });\n    // sinon.stub(clip_dao_3, \"get_notes_within_markers\").callsFake(() => {\n    //     return [\"notes\",3,\"note\",50,0,1,127,0,\"note\",52,1,1,127,0,\"note\",54,2,2,127,0,\"done\"]\n    // });\n\n\n    // clip 4\n    // let clip_dao_4 = new c.ClipDao(\n    //     live_api_4,\n    //     new m.Messenger(env, 0),\n    //     false\n    // );\n    // sinon.stub(clip_dao_4, \"get_start_marker\").callsFake(() => {\n    //     return 0;\n    // });\n    // sinon.stub(clip_dao_4, \"get_end_marker\").callsFake(() => {\n    //     return 4;\n    // });\n    // sinon.stub(clip_dao_4, \"get_notes_within_markers\").callsFake(() => {\n    //     return [\"notes\",4,\"note\",50,0,1,127,0,\"note\",52,1,1,127,0,\"note\",54,2,1,127,0,\"note\",55,3,1,127,0,\"done\"]\n    // });\n\n    // let clip_1 = new c.Clip(clip_dao_1);\n    // let clip_2 = new c.Clip(clip_dao_2);\n    // let clip_3 = new c.Clip(clip_dao_3);\n    // let clip_4 = new c.Clip(clip_dao_4);\n    //\n    // clip_1.load_notes_within_markers();\n    // clip_2.load_notes_within_markers();\n    // clip_3.load_notes_within_markers();\n    // clip_4.load_notes_within_markers();\n\n    // // TODO: make configurable\n    // let dim = 16 * 6 * 4;\n    //\n    // pwindow = new w.Pwindow(\n    //     dim,\n    //     dim,\n    //     new m.Messenger(env, 0)\n    // );\n\n    // TODO: sample workflowd\n\n    // clip_user_input = new c.Clip(\n    //     new c.ClipDao(\n    //         live_api_user_input,\n    //         new m.Messenger(env, 1, \"user_input\"),\n    //         true\n    //     )\n    // );\n\n    // clip_to_elaborate = new c.Clip(\n    //     new c.ClipDao(\n    //         live_api_to_elaborate,\n    //         new m.Messenger(env, 1, \"to_elaborate\"),\n    //         true\n    //     )\n    // );\n\n    // clip_elaboration = new c.Clip(\n    //     new c.ClipDao(\n    //         live_api_elaboration,\n    //         new m.Messenger(env, 1, \"elaboration\"),\n    //         true\n    //     )\n    // );\n\n    // collect index of clip to sumarize from user\n    // pwindow.set_clip(clip_to_elaborate);\n\n    // these will be notes collected within the bound specified by the user\n    // pwindow.elaborate(\n    //     clip_2.get_notes_within_markers(),\n    //     clip_2.get_notes_within_markers()[0].model.note.beat_start,\n    //     clip_2.get_notes_within_markers()[1].model.note.get_beat_end()\n    // );\n    //\n    // pwindow.elaborate(\n    //     clip_3.get_notes_within_markers().slice(0, 2),\n    //     clip_3.get_notes_within_markers().slice(0, 2)[0].model.note.beat_start,\n    //     clip_3.get_notes_within_markers().slice(0, 2)[1].model.note.get_beat_end()\n    // );\n    //\n    // pwindow.elaborate(\n    //     clip_4.get_notes_within_markers().slice(2, 4),\n    //     clip_4.get_notes_within_markers().slice(2, 4)[0].model.note.beat_start,\n    //     clip_4.get_notes_within_markers().slice(2, 4)[1].model.note.get_beat_end()\n    // );\n\n    // let messages_notes = pwindow.get_messages_render_clips();\n    //\n    // let messages_tree = pwindow.get_messages_render_tree();\n    //\n    // let logger = new log.Logger(env);\n    // let messenger = new m.Messenger(env, 0);\n    //\n    // // messenger.message(messages_notes.length.toString());\n    // // messenger.message(messages_tree.length.toString());\n    //\n    // for (let message of messages_notes) {\n    //     messenger.message(message);\n    //     logger.log(message);\n    //     // outlet(0, message);\n    // }\n    //\n    // for (let message of messages_tree) {\n    //     messenger.message(message);\n    //     logger.log(message);\n    //     // outlet(0, message);\n    // }\n};\n\nif (typeof Global !== \"undefined\") {\n    Global.renderer = {};\n    Global.renderer.main = main;\n    Global.renderer.confirm = confirm;\n    Global.renderer.reset = reset;\n    Global.renderer.set_bound_lower = set_bound_lower;\n    Global.renderer.set_bound_upper = set_bound_upper;\n    Global.renderer.test = test;\n    Global.renderer.boundary_change_record_interval = boundary_change_record_interval;\n}"]}