{"version":3,"file":"renderer.js","sourceRoot":"","sources":["../src/renderer.ts"],"names":[],"mappings":";AAAA,qCAAqC;;AAErC,+EAA+E;AAC/E,kCAAkC;AAClC,wBAAwB;AAExB,IAAI,GAAG,GAAG,MAAM,CAAC;AAEjB,wBAAwB;AACxB,uBAAuB;AACvB,KAAK;AACL,uCAAuC;AACvC,2BAA2B;AAC3B,yBAAyB;AACzB,4BAA4B;AAC5B,oDAAoD;AAGpD,YAAY;AACZ,aAAa;AACb,uBAAuB;AACvB,KAAK;AACL,EAAE;AACF,UAAU;AACV,kBAAkB;AAClB,EAAE;AACF,QAAQ;AACR,KAAK;AAGL,IAAI,MAEH,CAAC;AAEF,MAAM,GAAG;IACL,IAAI,EAAE;IAEN,CAAC;CACJ,CAAC;AAIF,gBAAgB;AAEhB,wBAAwB;AACxB,aAAa;AACb,KAAK;AAEL,iBAAiB;AACjB,uBAAuB;AACvB,KAAK;AAEL,IAAI,GAAG,KAAK,MAAM,EAAE;IAChB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACrB,2CAA2C;IAC3C,iCAAiC;IACjC,uBAAuB;IACvB,wBAAwB;IACxB,0BAA0B;IAC1B,kCAAkC;IAElC,2CAA2C;IAC3C,gDAAgD;IAChD,oCAAoC;IACpC,kCAAkC;IAClC,qCAAqC;IACrC,6DAA6D;IAC7D,yBAAyB;IAEzB,IAAI,CAAC,kBAAkB,CAAC,CAAC;CAC5B;AAMD,uCAAiC;AAEjC,MAAM,CAAC,IAAI,GAAG,SAAS,IAAI;IACvB,SAAS;IACT,2EAA2E;IAC3E,+DAA+D;IAC/D,gBAAgB;IAChB,MAAM;IACN,6DAA6D;IAC7D,gBAAgB;IAChB,MAAM;IACN,wDAAwD;IACxD,oDAAoD;IACpD,MAAM;IACN,EAAE;IACF,EAAE;IACF,YAAY;IACZ,2EAA2E;IAC3E,+DAA+D;IAC/D,gBAAgB;IAChB,MAAM;IACN,6DAA6D;IAC7D,gBAAgB;IAChB,MAAM;IACN,wDAAwD;IACxD,wEAAwE;IACxE,MAAM;IACN,EAAE;IACF,EAAE;IACF,YAAY;IACZ,2EAA2E;IAC3E,+DAA+D;IAC/D,gBAAgB;IAChB,MAAM;IACN,6DAA6D;IAC7D,gBAAgB;IAChB,MAAM;IACN,wDAAwD;IACxD,4FAA4F;IAC5F,MAAM;IACN,EAAE;IACF,EAAE;IACF,YAAY;IACZ,2EAA2E;IAC3E,+DAA+D;IAC/D,gBAAgB;IAChB,MAAM;IACN,6DAA6D;IAC7D,gBAAgB;IAChB,MAAM;IACN,wDAAwD;IACxD,gHAAgH;IAChH,MAAM;IACN,EAAE;IACF,uCAAuC;IACvC,uCAAuC;IACvC,uCAAuC;IACvC,uCAAuC;IACvC,EAAE;IACF,uBAAuB;IACvB,uBAAuB;IACvB,uBAAuB;IACvB,uBAAuB;IACvB,EAAE;IACF,wBAAwB;IACxB,EAAE;IACF,+BAA+B;IAC/B,WAAW;IACX,WAAW;IACX,iCAAiC;IACjC,KAAK;IACL,EAAE;IACF,4BAA4B;IAC5B,4BAA4B;IAC5B,4BAA4B;IAC5B,4BAA4B;IAC5B,EAAE;IACF,sDAAsD;IACtD,EAAE;IACF,IAAI,MAAM,GAAG,IAAI,YAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAEnC,kCAAkC;IAClC,2BAA2B;IAC3B,IAAI;IAEJ,IAAI,IAAI,EAAE;QACN,IAAI,CAAC,qBAAqB,CAAC,CAAC;KAC/B;IAED,2BAA2B;AAC/B,CAAC,CAAC;AAEF,MAAM,CAAC,IAAI,EAAE,CAAC;AACd,cAAc;AACd,+EAA+E","sourcesContent":["// Globals defined in Max environment\n\n// NB: comment for Max compilation, uncomment for running compiled JS with node\n// let inlets, outlets, autowatch;\n// let Global: any = {};\n\nlet env = 'node';\n\n// declare let Global: {\n//     main: () => void\n// };\n// declare function post(o: any): void;\n// declare let inlets: any;\n// declare let size: any;\n// declare let outlets: any;\n// declare function outlet(n: number, o: any): void;\n\n\n// interface\n// let obj: {\n//     main: () => void\n// };\n//\n// obj = {\n//     main: ()=>{\n//\n//     }\n// };\n\n\nlet Global: {\n    main: () => void\n};\n\nGlobal = {\n    main: ()=>{\n\n    }\n};\n\n\n\n// obj = Global;\n\n// let obj_interface = {\n//     main()\n// };\n\n// var Global = {\n//     main: () => void\n// };\n\nif (env === 'node') {\n    console.log('node!');\n    // eval('let inlets, outlets, autowatch;');\n    // eval('let Global: any = {};');\n    // eval('inlets = 1;');\n    // eval('outlets = 1;');\n    // eval('autowatch = 1;');\n    // eval('obj = (Global as any);');\n\n    // eval('let Global: {main: () => void};');\n    // eval('declare function post(o: any): void;');\n    // eval('declare let inlets: any;');\n    // eval('declare let size: any;');\n    // eval('declare let outlets: any;');\n    // eval('declare function outlet(n: number, o: any): void;');\n    // eval('obj = Global;');\n\n    eval('var Global = {};');\n}\n\nimport {clip as c} from \"./clip/clip\";\nimport {message as m} from \"./message/messenger\";\n// const sinon = require(\"sinon\");\nimport {window as w} from \"./render/window\";\nimport {log} from \"./log/logger\";\n\nGlobal.main = function main() {\n    // clip 1\n    // let clip_dao_1 = new c.ClipDao(0, 0, new m.Messenger('node', 0), false);\n    // sinon.stub(clip_dao_1, \"get_start_marker\").callsFake(() => {\n    //     return 0;\n    // });\n    // sinon.stub(clip_dao_1, \"get_end_marker\").callsFake(() => {\n    //     return 4;\n    // });\n    // sinon.stub(clip_dao_1, \"get_notes\").callsFake(() => {\n    //     return [\"notes\",1,\"note\",50,0,4,127,0,\"done\"]\n    // });\n    //\n    //\n    // // clip 2\n    // let clip_dao_2 = new c.ClipDao(0, 0, new m.Messenger('node', 0), false);\n    // sinon.stub(clip_dao_2, \"get_start_marker\").callsFake(() => {\n    //     return 0;\n    // });\n    // sinon.stub(clip_dao_2, \"get_end_marker\").callsFake(() => {\n    //     return 4;\n    // });\n    // sinon.stub(clip_dao_2, \"get_notes\").callsFake(() => {\n    //     return [\"notes\",2,\"note\",50,0,2,127,0,\"note\",54,2,2,127,0,\"done\"]\n    // });\n    //\n    //\n    // // clip 3\n    // let clip_dao_3 = new c.ClipDao(0, 0, new m.Messenger('node', 0), false);\n    // sinon.stub(clip_dao_3, \"get_start_marker\").callsFake(() => {\n    //     return 0;\n    // });\n    // sinon.stub(clip_dao_3, \"get_end_marker\").callsFake(() => {\n    //     return 4;\n    // });\n    // sinon.stub(clip_dao_3, \"get_notes\").callsFake(() => {\n    //     return [\"notes\",3,\"note\",50,0,1,127,0,\"note\",52,1,1,127,0,\"note\",54,2,2,127,0,\"done\"]\n    // });\n    //\n    //\n    // // clip 4\n    // let clip_dao_4 = new c.ClipDao(0, 0, new m.Messenger('node', 0), false);\n    // sinon.stub(clip_dao_4, \"get_start_marker\").callsFake(() => {\n    //     return 0;\n    // });\n    // sinon.stub(clip_dao_4, \"get_end_marker\").callsFake(() => {\n    //     return 4;\n    // });\n    // sinon.stub(clip_dao_4, \"get_notes\").callsFake(() => {\n    //     return [\"notes\",4,\"note\",50,0,1,127,0,\"note\",52,1,1,127,0,\"note\",54,2,1,127,0,\"note\",55,3,1,127,0,\"done\"]\n    // });\n    //\n    // let clip_1 = new c.Clip(clip_dao_1);\n    // let clip_2 = new c.Clip(clip_dao_2);\n    // let clip_3 = new c.Clip(clip_dao_3);\n    // let clip_4 = new c.Clip(clip_dao_4);\n    //\n    // clip_1.load_notes();\n    // clip_2.load_notes();\n    // clip_3.load_notes();\n    // clip_4.load_notes();\n    //\n    // var dim = 16 * 6 * 4;\n    //\n    // var pwindow = new w.Pwindow(\n    //     dim,\n    //     dim,\n    //     new m.Messenger('node', 0)\n    // );\n    //\n    // pwindow.add_clip(clip_4);\n    // pwindow.add_clip(clip_3);\n    // pwindow.add_clip(clip_2);\n    // pwindow.add_clip(clip_1);\n    //\n    // let messages = pwindow.get_messages_render_clips();\n    //\n    let logger = new log.Logger('max');\n\n    // for (let message of messages) {\n    //     logger.log(message);\n    // }\n\n    if (true) {\n        eval('console.log(\"eval\")');\n    }\n\n    // eval('post(\"posting\")');\n};\n\nGlobal.main();\n// NB: commeno\n// NB: comment for Max compilation, uncomment for running compiled JS with node\n\n"]}