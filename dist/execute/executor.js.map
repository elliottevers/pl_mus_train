{"version":3,"file":"executor.js","sourceRoot":"","sources":["../../src/execute/executor.ts"],"names":[],"mappings":";;AACA,gDAAgD;AAEhD,IAAiB,OAAO,CAqNvB;AArND,WAAiB,OAAO;IAIpB,8BAA8B;IAC9B,EAAE;IACF,6CAA6C;IAC7C,yCAAyC;IACzC,yBAAyB;IACzB,EAAE;IACF,+EAA+E;IAC/E,8BAA8B;IAC9B,sDAAsD;IACtD,uBAAuB;IACvB,QAAQ;IACR,EAAE;IACF,iCAAiC;IACjC,sBAAsB;IACtB,mEAAmE;IACnE,EAAE;IACF,qCAAqC;IACrC,EAAE;IACF,4BAA4B;IAC5B,wCAAwC;IACxC,YAAY;IACZ,EAAE;IACF,4CAA4C;IAC5C,uBAAuB;IACvB,6CAA6C;IAC7C,8BAA8B;IAC9B,gBAAgB;IAChB,mBAAmB;IACnB,uBAAuB;IACvB,+BAA+B;IAC/B,6BAA6B;IAC7B,gBAAgB;IAChB,YAAY;IACZ,QAAQ;IACR,EAAE;IACF,yBAAyB;IACzB,6BAA6B;IAC7B,yCAAyC;IACzC,mBAAmB;IACnB,2BAA2B;IAC3B,YAAY;IACZ,QAAQ;IACR,IAAI;IAEJ;QAQI,oBAAoB;QAEpB,6BAA6B;QAE7B,gCAAY,SAAS;YACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC/B,CAAC;QAEM,qCAAI,GAAX;YACI,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC;YAEvB,IAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;gBAC3C,OAAO;oBACH,KAAK,EAAE;wBACH,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC;wBAC3C,KAAK,EAAE,IAAI,CAAC,YAAY;qBAC3B;oBACD,IAAI,EAAE,KAAK;iBACd,CAAA;aACJ;iBAAM;gBACH,OAAO;oBACH,KAAK,EAAE,IAAI;oBACX,IAAI,EAAE,IAAI;iBACb,CAAA;aACJ;QACL,CAAC;QACD,mBAAmB;QACnB,iEAAiE;QACjE,8CAA8C;QAC9C,qCAAqC;QACrC,IAAI;QAEJ,gCAAgC;QAChC,+BAA+B;QAC/B,IAAI;QAEJ,yCAAyC;QACzC,oEAAoE;QACpE,kDAAkD;QAClD,UAAU;QACV,EAAE;QACF,4DAA4D;QAC5D,EAAE;QACF,wDAAwD;QACxD,kCAAkC;QAClC,QAAQ;QACR,EAAE;QACF,yBAAyB;QACzB,IAAI;QAEG,uCAAM,GAAb,UAAc,cAAc,EAAE,UAAU;YACpC,gEAAgE;YAChE,8CAA8C;YAC9C,MAAM;YAEN,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAE/D,oDAAoD;YACpD,8BAA8B;YAC9B,IAAI;YACJ,EAAE;YACF,OAAO,UAAU,CAAC;QACtB,CAAC;QAEM,oCAAG,GAAV;YACI,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;YACtB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC9D,CAAC;QACL,6BAAC;IAAD,CAAC,AA5ED,IA4EC;IA5EY,8BAAsB,yBA4ElC,CAAA;IAaD;QAeI,8CAA8C;QAC9C,mCAAmC;QACnC,qBACI,GAAQ,EACR,aAAuB,EACvB,gBAA0B,EAC1B,mBAA6B,EAC7B,2BAAqC,EACrC,SAAoB;YAEpB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;YACf,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;YACnC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;YACzC,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;YAC/C,IAAI,CAAC,2BAA2B,GAAG,2BAA2B,CAAC;YAC/D,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC/B,CAAC;QAED,0BAAI,GAAJ,UAAK,cAAc;YACf,IAAI,IAAI,CAAC,aAAa,KAAK,IAAI,EAAE;gBAC7B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;aAC3C;YAED,IAAI,GAAG,CAAC;YAER,IAAI,IAAI,CAAC,mBAAmB,KAAK,IAAI,EAAE;gBACnC,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;aACvD;iBAAM;gBACH,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;aAClB;YAED,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC,CAAA;QACjD,CAAC;QAED,4BAAM,GAAN,UAAO,UAAU;YAEb,IAAI,IAAI,CAAC,mBAAmB,KAAK,IAAI,EAAE;gBACnC,UAAU,GAAG,IAAI,CAAC,2BAA2B,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;aACxE;YAED,IAAI,IAAI,CAAC,gBAAgB,KAAK,IAAI,EAAE;gBAChC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;aAChD;YACD,OAAO,UAAU,CAAC;QACtB,CAAC;QAgBL,kBAAC;IAAD,CAAC,AA3ED,IA2EC;IA3EY,mBAAW,cA2EvB,CAAA;AACL,CAAC,EArNgB,OAAO,GAAP,eAAO,KAAP,eAAO,QAqNvB","sourcesContent":["import {message} from \"../message/messenger\";\n// import {Note, note as n} from \"../note/note\";\n\nexport namespace execute {\n\n    import Messenger = message.Messenger;\n\n    // export class NoteIterator {\n    //\n    //     private notes: TreeModel.Node<Note>[];\n    //     public direction_forward: boolean;\n    //     private i: number;\n    //\n    //     constructor(notes: TreeModel.Node<Note>[], direction_forward: boolean) {\n    //         this.notes = notes;\n    //         this.direction_forward = direction_forward;\n    //         this.i = -1;\n    //     }\n    //\n    //     // TODO: type declarations\n    //     public next() {\n    //         let value_increment = (this.direction_forward) ? 1 : -1;\n    //\n    //         this.i += value_increment;\n    //\n    //         if (this.i < 0) {\n    //             throw 'note iterator < 0'\n    //         }\n    //\n    //         if (this.i < this.notes.length) {\n    //             return {\n    //                 value: this.notes[this.i],\n    //                 done: false\n    //             }\n    //         } else {\n    //             return {\n    //                 value: null,\n    //                 done: true\n    //             }\n    //         }\n    //     }\n    //\n    //     public current() {\n    //         if (this.i > -1) {\n    //             return this.notes[this.i];\n    //         } else {\n    //             return null;\n    //         }\n    //     }\n    // }\n\n    export class SynchronousDagExecutor {\n\n        callables: CallableMax[];\n\n        index_to_run: number;\n\n        private index_running: number;\n\n        // to_run: Callable;\n\n        // private running: Callable;\n\n        constructor(callables) {\n            this.callables = callables;\n        }\n\n        public next() {\n            this.index_to_run += 1;\n\n            if (this.index_to_run < this.callables.length) {\n                return {\n                    value: {\n                        callable: this.callables[this.index_to_run],\n                        index: this.index_to_run\n                    },\n                    done: false\n                }\n            } else {\n                return {\n                    value: null,\n                    done: true\n                }\n            }\n        }\n        // private call() {\n        //     this.callables[this.index_to_run].call(this.index_to_run);\n        //     this.index_running = this.index_to_run;\n        //     // this.running = this.to_run;\n        // }\n\n        // private get_index_running() {\n        //     return this.index_to_run\n        // }\n\n        // public return(name_func, val_return) {\n        //     let currently_running =  this.callables.filter((callable) =>{\n        //         return callable.name_func === name_func\n        //     });\n        //\n        //     val_return = currently_running[0].return(val_return);\n        //\n        //     if (this.callables.length < this.index_running) {\n        //         this.index_to_run += 1;\n        //     }\n        //\n        //     return val_return;\n        // }\n\n        public return(index_callable, val_return) {\n            // let currently_running =  this.callables.filter((callable) =>{\n            //     return callable.name_func === name_func\n            // });\n\n            val_return = this.callables[index_callable].return(val_return);\n\n            // if (this.callables.length < this.index_running) {\n            //     this.index_to_run += 1;\n            // }\n            //\n            return val_return;\n        }\n\n        public run() {\n            this.index_to_run = 0;\n            this.callables[this.index_to_run].call(this.index_to_run);\n        }\n    }\n\n    interface Callable {\n\n        // constructor(func, args: any[]) {\n        //     this.func = func;\n        // }\n\n        call(index_sequence: number);\n\n        return(index_sequence: number)\n    }\n\n    export class CallableMax implements Callable {\n        // args: any[];\n        arg: any;\n\n        messenger: Messenger;\n\n        // TODO: how will we pass the argument required by the type defs?\n        func_pre_call: Function;\n\n        func_post_return: Function;\n\n        func_preprocess_arg: Function;\n\n        func_postprocess_return_val: Function;\n\n        // TODO: support arbitrary amount of arguments\n        // constructor(func, args: any[]) {\n        constructor(\n            arg: any,\n            func_pre_call: Function,\n            func_post_return: Function,\n            func_preprocess_arg: Function,\n            func_postprocess_return_val: Function,\n            messenger: Messenger\n        ) {\n            this.arg = arg;\n            this.func_pre_call = func_pre_call;\n            this.func_post_return = func_post_return;\n            this.func_preprocess_arg = func_preprocess_arg;\n            this.func_postprocess_return_val = func_postprocess_return_val;\n            this.messenger = messenger;\n        }\n\n        call(index_sequence) {\n            if (this.func_pre_call !== null) {\n                this.func_pre_call.call(this, this.arg);\n            }\n\n            let arg;\n\n            if (this.func_preprocess_arg !== null) {\n                arg = this.func_preprocess_arg.call(this, this.arg);\n            } else {\n                arg = this.arg;\n            }\n\n            this.messenger.message([index_sequence, arg])\n        }\n\n        return(val_return) {\n\n            if (this.func_preprocess_arg !== null) {\n                val_return = this.func_postprocess_return_val.call(this, val_return);\n            }\n\n            if (this.func_post_return !== null) {\n                this.func_post_return.call(this, val_return);\n            }\n            return val_return;\n        }\n\n        // get_note_index_at_beat(beat: number, notes: TreeModel.Node<n.Note>[]): number {\n        //     let val =  _.findIndex(notes, (node)=>{\n        //         // checking number against string\n        //         return node.model.note.beat_start === beat\n        //     });\n        //     return val;\n        // }\n        //\n        // get_leaves_within_interval(beat_start: number, beat_end: number): TreeModel.Node<n.Note>[] {\n        //     let val =  this.leaves.filter((node) =>{\n        //         return node.model.note.beat_start >= beat_start && node.model.note.get_beat_end() <= beat_end\n        //     });\n        //     return val;\n        // }\n    }\n}"]}