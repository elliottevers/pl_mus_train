{"version":3,"file":"clip_slot.js","sourceRoot":"","sources":["../../src/clip_slot/clip_slot.ts"],"names":[],"mappings":";;AAAA,qCAAkC;AAClC,qCAAkC;AAElC,wCAAkC;AAElC,IAAiB,SAAS,CAoGzB;AApGD,WAAiB,WAAS;IACtB,IAAO,SAAS,GAAG,WAAI,CAAC,SAAS,CAAC;IAClC,IAAO,IAAI,GAAG,WAAI,CAAC,IAAI,CAAC;IACxB,IAAO,OAAO,GAAG,WAAI,CAAC,OAAO,CAAC;IAE9B,IAAO,MAAM,GAAG,YAAG,CAAC,MAAM,CAAC;IAE3B;QAMI,kBAAY,aAA2B;YACnC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACvC,CAAC;QAED,6BAAU,GAAV;YACI,OAAO,IAAI,CAAC,IAAI,KAAK,IAAI,CAAA;QAC7B,CAAC;QAED,8BAAW,GAAX;QAEA,CAAC;QAED,oCAAiB,GAAjB,UAAkB,SAAmB;YACjC,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAA;QAC5D,CAAC;QAED,yBAAM,GAAN;YACI,OAAM;QACV,CAAC;QAED,8BAAW,GAAX,UAAY,YAAoB;QAEhC,CAAC;QAED,4BAAS,GAAT;YACI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;QAC9C,CAAC;QAED,2BAAQ,GAAR;YACI,OAAO,IAAI,CAAC,IAAI,CAAA;QACpB,CAAC;QACL,eAAC;IAAD,CAAC,AArCD,IAqCC;IArCY,oBAAQ,WAqCpB,CAAA;IAgBD;QAKI,qBAAY,QAAmB,EAAE,SAAoB;YACjD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;YACxB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC/B,CAAC;QAED,iCAAW,GAAX;YACI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;QACrC,CAAC;QAED,8BAAQ,GAAR;YACI,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;QACjD,CAAC;QAED,uCAAiB,GAAjB,UAAkB,EAAU;YACxB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAClE,CAAC;QAED,8BAAQ,GAAR;YACI,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC;YAC/B,iDAAiD;YACjD,8DAA8D;YAC9D,OAAO,IAAI,IAAI,CACX,IAAI,OAAO,CACP,IAAI,SAAS,CACT,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CACzD,EACD,IAAI,CAAC,SAAS,CACjB,CACJ,CAAA;QACL,CAAC;QAED,8BAAQ,GAAR;YACI,OAAM;QACV,CAAC;QACL,kBAAC;IAAD,CAAC,AAvCD,IAuCC;IAvCY,uBAAW,cAuCvB,CAAA;AACL,CAAC,EApGgB,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAoGzB","sourcesContent":["import {live} from \"../live/live\";\nimport {clip} from \"../clip/clip\";\nimport {message} from \"../message/messenger\";\nimport {log} from \"../log/logger\";\n\nexport namespace clip_slot {\n    import LiveApiJs = live.LiveApiJs;\n    import Clip = clip.Clip;\n    import ClipDao = clip.ClipDao;\n    import Messenger = message.Messenger;\n    import Logger = log.Logger;\n\n    export class ClipSlot {\n\n        clip: Clip;\n\n        clip_slot_dao: iClipSlotDao;\n\n        constructor(clip_slot_dao: iClipSlotDao) {\n            this.clip_slot_dao = clip_slot_dao;\n        }\n\n        b_has_clip(): boolean {\n            return this.clip !== null\n        }\n\n        delete_clip() {\n\n        }\n\n        duplicate_clip_to(clip_slot: ClipSlot) {\n            this.clip_slot_dao.duplicate_clip_to(clip_slot.get_id())\n        }\n\n        get_id(): number {\n            return\n        }\n\n        create_clip(length_beats: number): void {\n\n        }\n\n        load_clip(): void {\n            this.clip = this.clip_slot_dao.get_clip();\n        }\n\n        get_clip(): Clip {\n            return this.clip\n        }\n    }\n\n    interface iClipSlotDao {\n\n        delete_clip()\n\n        has_clip()\n\n        duplicate_clip_to(id: number)\n\n        get_clip(): Clip\n\n        get_path()\n\n    }\n\n    export class ClipSlotDao implements iClipSlotDao {\n\n        private live_api: LiveApiJs;\n        private messenger: Messenger;\n\n        constructor(live_api: LiveApiJs, messenger: Messenger) {\n            this.live_api = live_api\n            this.messenger = messenger;\n        }\n\n        delete_clip() {\n            this.live_api.call(\"delete_clip\")\n        }\n\n        has_clip() {\n            return this.live_api.get(\"has_clip\")[0] === 1\n        }\n\n        duplicate_clip_to(id: number) {\n            this.live_api.call(\"duplicate_clip_to\", ['id', id].join(' '));\n        }\n\n        get_clip(): Clip {\n            let logger = new Logger('max');\n            // logger.log(String(this.live_api.get('clip')));\n            // logger.log(this.live_api.get('clip').split(',').join(' '));\n            return new Clip(\n                new ClipDao(\n                    new LiveApiJs(\n                        String(this.live_api.get('clip')).split(',').join(' ')\n                    ),\n                    this.messenger\n                )\n            )\n        }\n\n        get_path(): string {\n            return\n        }\n    }\n}"]}