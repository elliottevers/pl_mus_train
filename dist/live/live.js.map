{"version":3,"file":"live.js","sourceRoot":"","sources":["../../src/live/live.ts"],"names":[],"mappings":"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","sourcesContent":["import TreeModel = require(\"tree-model\");\nimport {note as n} from \"../note/note\"\n\ndeclare let LiveAPI: any;\n\nexport namespace live {\n\n    export interface iLiveApiJs {\n        get(property: string): any;\n        set(property: string, value: any): void;\n        call(func: string): void;\n    }\n\n    export interface ClipLive {\n\n        get_end_marker(): number\n\n        get_start_marker(): number\n\n        set_loop_bracket_lower(beat: number): void\n\n        set_loop_bracket_upper(beat: number): void\n\n        set_clip_endpoint_lower(beat: number): void\n\n        set_clip_endpoint_upper(beat: number): void\n\n        fire(): void\n\n        stop(): void\n\n        get_notes(beat_start, pitch_midi_min, beat_end, pitch_midi_max): string[]\n    }\n\n    export class LiveApiJs implements iLiveApiJs {\n        private live_api: any;\n\n        constructor(index_track: number, index_clip_slot: number) {\n            let path = \"live_set tracks \" + index_track + \" clip_slots \" + index_clip_slot + \" clip\";\n            this.live_api = new LiveAPI(null, path);\n        }\n\n        get(property: string): any {\n            return this.live_api.get(property)\n        }\n\n        set(property: string, value: any): void {\n            this.live_api.set(property, value)\n        }\n\n        call(func: string, ...args: any[]): any {\n            return this.live_api.call(func, ...args);\n        }\n    }\n\n    export class LiveClipVirtual implements ClipLive {\n\n        notes: TreeModel.Node<n.Note>[];\n\n        constructor(notes: TreeModel.Node<n.Note>[]) {\n            this.notes = notes;\n        }\n\n        get_end_marker(): number {\n            return this.notes[this.notes.length - 1].model.note.get_beat_end()\n        }\n\n        get_start_marker(): number {\n            return this.notes[0].model.note.beat_start;\n        }\n\n        set_loop_bracket_lower(beat: number): void {\n            return\n        }\n\n        set_loop_bracket_upper(beat: number): void {\n            return\n        }\n\n        set_clip_endpoint_lower(beat: number): void {\n            return\n        }\n\n        set_clip_endpoint_upper(beat: number): void {\n            return\n        }\n\n        fire(): void {\n            return\n        }\n\n        stop(): void {\n            return\n        }\n\n        get_notes(beat_start, pitch_midi_min, beat_end, pitch_midi_max): string[] {\n            let prefix, notes, suffix;\n            prefix = [\"notes\", this.notes.length.toString()];\n            notes = [];\n            for (let node of this.notes) {\n                notes.push(\"note\");\n                notes.push(node.model.note.pitch.toString());\n                notes.push(node.model.note.beat_start.toString());\n                notes.push(node.model.note.beats_duration.toString());\n                notes.push(node.model.note.velocity.toString());\n                notes.push(node.model.note.muted.toString());\n            }\n            suffix = [\"done\"];\n            return prefix.concat(notes).concat(suffix)\n        }\n    }\n\n}"]}