{"version":3,"file":"midi_io.js","sourceRoot":"","sources":["../src/midi_io.ts"],"names":[],"mappings":"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","sourcesContent":["import {message as m, message} from \"./message/messenger\";\nimport Messenger = message.Messenger;\nimport {live, live as li} from \"./live/live\";\nimport {clip as c} from \"./clip/clip\";\nimport LiveApiJs = live.LiveApiJs;\nimport {log} from \"./log/logger\";\nimport Logger = log.Logger;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\ndeclare let Dict: any;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\n// import tone = require(\"tone\");\n//\n// import fs = require(\"fs\");\n\n// whatever.Midi\n\n// import * as tonejs from \"@tonejs/midi\";\n// import tonejs = require(\"@tonejs/midi\");\n\n// import * as app1 from \"@tonejs/midi\";\n// import app2 = require(\"@tonejs/midi\");\n// import {App} from \"@tonejs/midi\";\n\n\n// let test = async () => {\n//     // load a midi file in the browser\n//     const midi = await tone.Midi.fromUrl(\"path/to/midi.mid\");\n//     //the file name decoded from the first track\n//     const name = midi.name;\n//     //get the tracks\n//     midi.tracks.forEach(track => {\n//         //tracks have notes and controlChanges\n//\n//         //notes are an array\n//         const notes = track.notes\n//         notes.forEach(note => {\n//             //note.midi, note.time, note.duration, note.name\n//         })\n//\n//         //the control changes are an object\n//         //the keys are the CC number\n//         track.controlChanges[64]\n//         //they are also aliased to the CC number's common name (if it has one)\n//         track.controlChanges.sustain.forEach(cc => {\n//             // cc.ticks, cc.value, cc.time\n//         })\n//\n//         //the track also has a channel and instrument\n//         //track.instrument.name\n//     });\n// };\n//\n// test();\n\n// const midiData = fs.readFileSync('/Users/elliottevers/Downloads/test_midi_io.mid');\n// const midi = new tone.Midi(midiData);\n//\n// let testing = 1;\n\n\n\n// import { encode } from 'json-midi-encoder';\n//\n// import { parseArrayBuffer } from 'midi-json-parser';\n//\n//\n// import * as fs from \"fs\";\n// import * as filereader from \"filereader\";\n\n// var filereader = require('filereader');\n\n// fs.open('/open/some/file.txt', 'r', (err, fd) => {\n//     if (err) throw err;\n//     fs.close(fd, (err) => {\n//         if (err) throw err;\n//     });\n// });\n\n// let buffer = Buffer.from(arraybuffer);\n// let arraybuffer = Uint8Array.from(buffer).buffer;\n\n// let file_midi = fs.readFileSync('/Users/elliottevers/Downloads/test_midi_io.mid');\n//\n// let reader = new FileReader();\n//\n// let arraybuffer = Uint8Array.from(file_midi).buffer;\n//\n// parseArrayBuffer(arraybuffer)\n//     .then((json) => {\n//         console.log(json)\n//     });\n\n\n\n// let testing = 1;\n// var FileReader = require('filereader');\n//\n// var file = new File('./files/my-file.txt')\n\n\n// let fileReader = new FileReader();\n\n//\n// fileReader.setNodeChunkedEncoding(true || false);\n// fileReader.readAsBinaryString(\n//     new File('./files/my-file.txt')\n// );\n//\n// // non-standard alias of `addEventListener` listening to non-standard `data` event\n// fileReader.on('data', function (data) {\n//     console.log(\"chunkSize:\", data.length);\n// });\n//\n// // `onload` as listener\n// fileReader.addEventListener('load', function (ev) {\n//     console.log(\"dataUrlSize:\", ev.target.result.length);\n// });\n//\n// // `onloadend` as property\n// fileReader.onloadend(function () {\n//     console.log(\"Success\");\n// });\n\n\n\n\n// const reader = new FileReader();\n//\n// reader.re\n//\n// reader.readAsArrayBuffer()\n//\n// const array_buffer = reader.readAsArrayBuffer(file)\n\n\n// let write = () => {\n//     const json = {\n//         division: 480,\n//         format: 1,\n//         tracks: [\n//             [\n//                 {\n//                     delta: 0,\n//                     trackName: 'example'\n//                 },\n//                 // ... there are probably more events ...\n//                 {\n//                     delta: 0,\n//                     endOfTrack: true\n//                 }\n//             ]\n//             // ... maybe there are more tracks ...\n//         ]\n//     };\n//\n//     // encode(json)\n//     //     .then((midiFile) => {\n//     //         // midiFile is an ArrayBuffer containing the binary data.\n//     //     });\n// };\n//\n// let read = () => {\n//\n//     // Let's assume there is an ArrayBuffer called arrayBuffer which contains the binary content of a\n//     // MIDI file.\n//\n//         // parseArrayBuffer(arrayBuffer)\n//         //     .then((json) => {\n//         //         // json is the JSON representation of the MIDI file.\n//         //     });\n//\n// };\n\n// let filepath = '/Users/elliottevers/Downloads/from_live.json';\n\n\n// function jsobj_to_dict(o) {\n//     var d = new Dict('');\n//\n//     for (var keyIndex in o)\t{\n//         var value = o[keyIndex];\n//\n//         if (!(typeof value === \"string\" || typeof value === \"number\")) {\n//             var isEmpty = true;\n//             for (var anything in value) {\n//                 isEmpty = false;\n//                 break;\n//             }\n//\n//             if (isEmpty) {\n//                 value = new Dict('');\n//             }\n//             else {\n//                 var isArray = true;\n//                 for (var valueKeyIndex in value) {\n//                     if (isNaN(parseInt(valueKeyIndex))) {\n//                         isArray = false;\n//                         break;\n//                     }\n//                 }\n//\n//                 if (!isArray) {\n//                     value = jsobj_to_dict(value);\n//                 }\n//             }\n//         }\n//         d.set(keyIndex, value);\n//     }\n//     return d;\n// }\n\nlet set_midi = (filepath) => {\n    let dict_import = new Dict(\"dict_import\");\n\n    dict_import.import_json(filepath);\n\n    let notes = dict_import.get('melody::notes');\n\n    let live_api: LiveApiJs = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot clip'\n    );\n\n    let clip = new c.Clip(\n        new c.ClipDao(\n            live_api,\n            new m.Messenger(env, 0),\n            false\n        )\n    );\n\n    // for (let note of melody) {\n    //     clip.set_notes([note])\n    // }\n\n    let logger = new Logger(env);\n\n    logger.log(notes.toString());\n\n    // clip.set_notes(melody)\n\n    //\n    // let notes = clip.get_notes(0, 0, 8, 128);\n    //\n    // for (let i_note in notes) {\n    //     d.append(\n    //         // i_note.toString(), notes[i_note].model.note.to_json()\n    //         i_note.toString(), notes[i_note].model.note.to_array()\n    //     )\n    // }\n    //\n    // dict_import.import_json(filepath);\n    //\n    // let logger = new Logger(env);\n    //\n    // logger.log(notes.toString());\n};\n\n\nlet export_midi = (filepath) => {\n    let dict_export = new Dict(\"dict_export\");\n\n    // let dict_melody = new Dict(\"melody\");\n\n    let live_api: LiveApiJs;\n\n    live_api = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot clip'\n    );\n\n    let clip = new c.Clip(\n        new c.ClipDao(\n            live_api,\n            new m.Messenger(env, 0),\n            false\n        )\n    );\n\n    let notes = clip.get_notes(0, 0, 8, 128);\n\n    let name_part = 'melody';\n\n\n    // dict_export.set(\n    //     name_part, ['n']\n    // );\n    //\n    // for (let i_note in notes) {\n    //     dict_export.append(name_part, notes[i_note].model.note.encode());\n    // }\n    //\n    // dict_export.append(\n    //     name_part, [['notes', 'done'].join(' ')]\n    // );\n\n\n    let reps = [];\n\n\n    // let test = ['1 2 3 4 5', '6 7 8 9 10 11'];\n\n    dict_export.replace(\"melody::notes\", \"\");\n\n    // dict_export.set(\"melody::notes\", ...test);\n\n\n\n    // dict_export.set(\n    //     name_part, ['n']\n    // );\n    //\n\n    reps.push(\n        ['notes', notes.length.toString()].join(' ')\n    );\n\n    for (let i_note in notes) {\n        reps.push(notes[i_note].model.note.encode());\n        // dict_export.append(name_part, notes[i_note].model.note.encode());\n    }\n\n    reps.push(\n        ['notes', 'done'].join(' ')\n    );\n\n    //\n    // dict_export.append(\n    //     name_part, [['notes', 'done'].join(' ')]\n    // );\n\n\n\n    // let test = ['1 2 3 4 5', '6 7 8 9 10 11'];\n    //\n    // dict_export.replace(\"melody::notes\", \"\");\n    //\n    // dict_export.set(\"melody::notes\", ...test);\n\n\n\n\n\n    // for (let i_note in notes_stub) {\n    //     dict_melody.set(i_note, note_stub)\n    // }\n    //\n    // dict_export.set(\n    //     name_part, [jsobj_to_dict(dict_melody)]\n    // );\n\n    // let notes = {\n    //     1: 'first note',\n    //     2: 'second note',\n    //     3: 'third note'\n    // };\n    //\n    // dict_export.set(\n    //     'melody', []\n    // );\n    //\n    // dict_export.append(\n    //     'melody', ['first']\n    // );\n    //\n    // dict_export.set(\n    //     'bass', []\n    // );\n    //\n    // dict_export.setparse(\n    //     'bass', [notes]\n    // );\n\n    dict_export.set(\"melody::notes\", ...reps);\n\n    dict_export.export_json(filepath);\n\n    // dict_export.setparse()\n\n    // let logger = new Logger(env);\n    //\n    // logger.log(notes.toString());\n\n    let messenger = new Messenger(env, 0);\n\n    messenger.message([filepath])\n};\n\n\n// let live_api_user_input: LiveApiJs;\n\n// live_api_user_input = new li.LiveApiJs(\n//     \"live_set tracks \" + 17 + \" clip_slots \" + 0 + \" clip\"\n// );\n\n// let clip_user_input = new c.Clip(\n//     new c.ClipDao(\n//         live_api_user_input,\n//         new m.Messenger(env, 0),\n//         false\n//     )\n// );\n\n// let reset = (index_track_user_input) => {\n//     // clip_user_input.remove_notes(0, 0, 2, 128);\n// };\n//\n// let set = () => {\n//     // clip_summarization.set_notes(\n//     //     clip_user_input.get_notes(0, 0, 2, 128)\n//     // )\n// };\n//\n// let get = () => {\n//     // let notes = clip_user_input.get_notes(0, 0, 2, 128);\n//     // for (let node of notes) {\n//     //     post(\"beat_start\");\n//     //     post(\"\\n\");\n//     //     post(node.model.note.beat_start);\n//     //     post(\"\\n\");\n//     //     post(\"pitch\");\n//     //     post(\"\\n\");\n//     //     post(node.model.note.pitch);\n//     //     post(\"\\n\");\n//     // }\n// };\n\n\n\n\n// write();\n// read();\n\nif (typeof Global !== \"undefined\") {\n    Global.midi_io = {};\n    Global.midi_io.export_midi = export_midi;\n    Global.midi_io.set_midi = set_midi;\n    // Global.regex.conversion_filetype = conversion_filetype;\n}\n"]}