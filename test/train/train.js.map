{"version":3,"file":"train.js","sourceRoot":"","sources":["train.ts"],"names":[],"mappings":";;AAAA,4CAA8C;AAE9C,sCAAyC;AACzC,2DAAwD;AACxD,IAAO,gBAAgB,GAAG,uBAAU,CAAC,gBAAgB,CAAC;AAEtD,IAAO,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;AAEtC,IAAO,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;AAIjC,IAAO,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;AAGjC,IAAI,IAAI,GAAc,IAAI,SAAS,EAAE,CAAC;AAEtC,IAAI,cAAc,CAAC;AAEnB,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAClB;IACI,EAAE,EAAE,CAAC,CAAC;IACN,IAAI,EAAE,IAAI,WAAC,CAAC,IAAI,CACZ,EAAE,EACF,CAAC,EACD,CAAC,EACD,EAAE,EACF,CAAC,CACJ;IACD,QAAQ,EAAE,EAET;CACJ,CACJ,CAAC;AAEF,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAClB;IACI,EAAE,EAAE,CAAC,CAAC;IACN,IAAI,EAAE,IAAI,WAAC,CAAC,IAAI,CACZ,EAAE,EACF,EAAE,EACF,CAAC,EACD,EAAE,EACF,CAAC,CACJ;IACD,QAAQ,EAAE,EAET;CACJ,CACJ,CAAC;AAGF,IAAI,YAAY,GAAG,UAAU,CAAC;AAC9B,IAAI,YAAY,GAAG,cAAc,CAAC;AAElC,IAAI,kBAAkB,GAAG,IAAI,gBAAgB,CACzC,YAAY,EACZ,YAAY,CACf,CAAC;AAEF,IAAI,MAAM,GAAG,IAAI,UAAU,EAE1B,CAAC;AAEF,IAAI,SAAS,GAAG,IAAI,MAAM,CACtB,kBAAkB,CACrB,CAAC;AAEF,IAAI,OAAO,GAAG,IAAI,OAAO,CACrB,MAAM,EACN,SAAS,EACT,kBAAkB,EAClB,eAAe,EACf,SAAS,CACZ,CAAC;AAEF,0CAA0C;AAE1C,cAAc,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AAEhC,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;AAErC,OAAO,CAAC,IAAI,EAEX,CAAC,CAAC,mHAAmH;AAEtH,OAAO,CAAC,MAAM,CACV,MAAM,CACT,CAAC;AAEF,OAAO,CAAC,MAAM,CACV,MAAM,CACT,CAAC;AAEF,OAAO,CAAC,MAAM,CACV,MAAM,CACT,CAAC;AAEF,OAAO,CAAC,YAAY,EAEnB,CAAC;AAEF,IAAI,OAAO,GAAG,IAAI,YAAY,CAC1B,MAAM,CACT,CAAC;AAEF,OAAO,CAAC,MAAM,CACV,OAAO,EACP,eAAe,CAClB,CAAC;AAEF,IAAI,MAAM,GAAG,IAAI,WAAW,CACxB,MAAM,CACT,CAAC;AAEF,IAAI,YAAY,GAAG,MAAM,CAAC,IAAI,CAC1B,eAAe,CAClB,CAAC;AAEF,YAAY,CAAC,MAAM,EAElB,CAAC;AAEF,sBAAsB","sourcesContent":["import {note as n} from \"../../src/note/note\";\nimport {set_depth_tree_export} from \"../../src/scripts/parse_tree\";\nimport TreeModel = require(\"tree-model\");\nimport {user_input} from \"../../src/control/user_input\";\nimport UserInputHandler = user_input.UserInputHandler;\nimport {window} from \"../../src/render/window\";\nimport ListWindow = window.ListWindow;\nimport {trainer} from \"../../src/train/trainer\";\nimport Trainer = trainer.Trainer;\nimport {algorithm} from \"../../src/train/algorithm\";\nimport {struct} from \"../../src/train/struct\";\nimport StructTree = struct.StructTree;\nimport Detect = algorithm.Detect;\n\n\nlet tree: TreeModel = new TreeModel();\n\nlet notes_segments;\n\nlet note1 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            51,\n            7,\n            1,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet note2 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            51,\n            25,\n            3,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\n\nlet mode_texture = 'harmonic';\nlet mode_control = 'instrumental';\n\nlet user_input_handler = new UserInputHandler(\n    mode_texture,\n    mode_control\n);\n\nlet window = new ListWindow(\n\n);\n\nlet algorithm = new Detect(\n    user_input_handler\n);\n\nlet trainer = new Trainer(\n    window,\n    algorithm,\n    user_input_handler,\n    clip_user_input,\n    messenger\n);\n\n// test case - 2 segments, 2 notes a piece\n\nnotes_segments = [note1, note2];\n\ntrainer.set_segments(notes_segments);\n\ntrainer.init(\n\n); // calls next() under the hood, emits intervals to the UserInputHandler, renders the region of interest to cue user\n\ntrainer.accept(\n    note_1\n);\n\ntrainer.accept(\n    note_2\n);\n\ntrainer.accept(\n    note_3\n);\n\ntrainer.clear_render(\n\n);\n\nlet freezer = new TrainFreezer(\n    'node'\n);\n\nfreezer.freeze(\n    trainer,\n    '/path/to/file'\n);\n\nlet thawer = new TrainThawer(\n    'node'\n);\n\nlet train_thawed = thawer.thaw(\n    '/path/to/file'\n);\n\ntrain_thawed.render(\n\n);\n\n// verify that it look\n"]}