{"version":3,"file":"derive.js","sourceRoot":"","sources":["derive.ts"],"names":[],"mappings":"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","sourcesContent":["import {note as n} from \"../../src/note/note\";\nimport TreeModel = require(\"tree-model\");\nimport {user_input} from \"../../src/control/user_input\";\nimport UserInputHandler = user_input.UserInputHandler;\nimport {message} from \"../../src/message/messenger\";\nimport Messenger = message.Messenger;\nimport {live as li, live} from \"../../src/live/live\";\nimport LiveClipVirtual = live.LiveClipVirtual;\nimport {segment} from \"../../src/segment/segment\";\nimport Segment = segment.Segment;\nimport {clip} from \"../../src/clip/clip\";\nimport Clip = clip.Clip;\nimport {algorithm} from \"../../src/train/algorithm\";\nimport {freeze, thaw} from \"../../src/serialize/serialize\";\nimport TrainFreezer = freeze.TrainFreezer;\nimport TrainThawer = thaw.TrainThawer;\nimport {window} from \"../../src/render/window\";\nimport MatrixWindow = window.MatrixWindow;\nimport {trainer} from \"../../src/train/trainer\";\nimport Trainer = trainer.Trainer;\nimport {modes_control, modes_texture} from \"../../src/constants/constants\";\nimport VOCAL = modes_control.VOCAL;\nimport Parse = algorithm.Parse;\nimport MONOPHONY = modes_texture.MONOPHONY;\nimport Derive = algorithm.Derive;\n\n\nlet tree: TreeModel = new TreeModel();\n\n// let notes_segments;\n\nlet note_2_1 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            48,\n            0,\n            16,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet note_2_2 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            49,\n            16,\n            32,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet note_2_3 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            50,\n            48,\n            16,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet note_3_1 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            51,\n            2,\n            4,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet note_3_2 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            53,\n            8,\n            3,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet note_3_3 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            48,\n            17,\n            4,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet note_3_4 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            50,\n            42,\n            6,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet note_3_5 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            40,\n            54,\n            4,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet note_3_6 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            45,\n            59,\n            2,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet note_4_1 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            51,\n            7,\n            1,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet note_4_2 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            51,\n            25,\n            3,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet notes_segments = [note_2_1, note_2_2, note_2_3];\n\n\nlet mode_texture = MONOPHONY;\n\nlet mode_control = VOCAL;\n\nlet user_input_handler = new UserInputHandler(\n    mode_texture,\n    mode_control\n);\n\nlet env: string = 'node_for_max';\n// env = 'node';\n\n\nlet messenger = new Messenger(env, 0, 'render_derive');\n\nlet algorithm_train = new Derive(\n    user_input_handler\n);\n\nlet window_local = new MatrixWindow(\n    384,\n    384,\n    messenger,\n    algorithm_train\n);\n\nalgorithm_train.set_depth(\n    3\n);\n\n// stubs\nlet song = {\n    set_overdub: (int) => {},\n    set_session_record: (int) => {},\n    stop: () => {}\n};\n\nlet clip_user_input = {\n    fire: () => {},\n    stop: () => {},\n    set_endpoints_loop: (former, latter) => {}\n};\n\nlet clip_user_input_synchronous = {\n    fire: () => {},\n    stop: () => {},\n    set_endpoints_loop: (former, latter) => {}\n};\n\nlet scene = {\n    fire: () => {},\n    // stop: () => {},\n    // set_endpoints_loop: (former, latter) => {}\n};\n\n// let notes_segments = [\n//     note_2_1,\n//     note_2_2,\n//     note_2_3\n// ];\n\nlet notes_target_clip = [\n    // TODO: make sure we don't do anything with these notes when deriving\n    // OTHER THAN mute the target track we're deriving\n];\n\nlet segments: Segment[] = [];\n\nfor (let note of notes_segments) {\n    let segment = new Segment(\n        note\n    );\n\n    // @ts-ignore\n    segment.set_scene(scene);\n\n    segments.push(\n        segment\n    )\n\n\n    // let note = notes_segments[Number(i_note)];\n    // let path_scene = ['live_set', 'scenes', Number(i_note)].join(' ');\n    // let segment_local = new Segment(\n    //     note\n    // );\n    // segment_local.set_scene(\n    //     new Scene(\n    //         new SceneDao(\n    //             new li.LiveApiJs(\n    //                 path_scene\n    //             )\n    //         )\n    //     )\n    // );\n}\n\n\nlet trainer_local = new Trainer(\n    window_local,\n    user_input_handler,\n    algorithm_train,\n    clip_user_input,\n    clip_user_input_synchronous,\n    notes_target_clip,\n    song,\n    segments,\n    messenger\n);\n\n// test case - 2 segments, 2 notes a piece\n\ntrainer_local.init(\n\n);\n\ntrainer_local.accept_input(\n    [note_3_1, note_3_2]\n);\n\ntrainer_local.accept_input(\n    [note_3_3, note_3_4]\n);\n\n\ntrainer_local.accept_input(\n    [note_3_5, note_3_6]\n);\n\ntrainer_local.accept_input(\n    [note_4_1]\n);\n\ntrainer_local.accept_input(\n    [note_4_2]\n);\n\n\ntrainer_local.render_window(\n\n);\n\n\n// trainer_local_parse.clear_window(\n//\n// );\n//\n// let freezer_parse = new TrainFreezer(\n//     env_parse\n// );\n//\n// freezer_parse.freeze(\n//     trainer_local_parse,\n//     '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync/tk_music_ts/cache/train_parse.json'\n// );\n//\n// let thawer_parse = new TrainThawer(\n//     env_parse\n// );\n//\n// let config_parse = {\n//     'window': window_local_parse,\n//     'user_input_handler': user_input_handler_parse,\n//     'algorithm': algorithm_train_parse,\n//     'clip_user_input': clip_user_input_parse,\n//     'clip_user_input_synchronous': clip_user_input_parse_synchronous,\n//     'clip_target': clip_target_virtual_parse,\n//     'song': song_parse,\n//     'segments': segments_parse,\n//     'messenger': messenger_parse,\n//     'env': env_parse\n// };\n//\n// let train_thawed_parse = thawer_parse.thaw(\n//     '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync/tk_music_ts/cache/train_parse.json',\n//     config_parse\n// );\n//\n// train_thawed_parse.render_window(\n//\n// );"]}