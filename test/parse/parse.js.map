{"version":3,"file":"parse.js","sourceRoot":"","sources":["parse.ts"],"names":[],"mappings":"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","sourcesContent":["import {note as n} from \"../../src/note/note\";\nimport TreeModel = require(\"tree-model\");\nimport {user_input} from \"../../src/control/user_input\";\nimport UserInputHandler = user_input.UserInputHandler;\nimport {message} from \"../../src/message/messenger\";\nimport Messenger = message.Messenger;\nimport {live} from \"../../src/live/live\";\nimport LiveClipVirtual = live.LiveClipVirtual;\nimport {segment} from \"../../src/segment/segment\";\nimport Segment = segment.Segment;\nimport {clip} from \"../../src/clip/clip\";\nimport Clip = clip.Clip;\nimport {algorithm} from \"../../src/train/algorithm\";\nimport {freeze, thaw} from \"../../src/serialize/serialize\";\nimport TrainFreezer = freeze.TrainFreezer;\nimport TrainThawer = thaw.TrainThawer;\nimport {window} from \"../../src/render/window\";\nimport MatrixWindow = window.MatrixWindow;\nimport {trainer} from \"../../src/train/trainer\";\nimport Trainer = trainer.Trainer;\nimport {modes_control, modes_texture} from \"../../src/constants/constants\";\nimport MONOPONY = modes_texture.MONOPONY;\nimport VOCAL = modes_control.VOCAL;\nimport Parse = algorithm.Parse;\n\n\nlet tree: TreeModel = new TreeModel();\n\n// let tree: TreeModel = new TreeModel();\n\nlet segment_note_1_parse = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            51,\n            1,\n            4,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet segment_note_2_parse = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            51,\n            5,\n            4,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\n\nlet note_melody_1 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            51,\n            1,\n            1,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet note_melody_2 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            53,\n            2,\n            1,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\n\n\nlet note_melody_3 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            55,\n            3,\n            1,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet note_melody_4 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            56,\n            4,\n            1,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\n\nlet note_melody_5 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            51,\n            5,\n            1,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet note_melody_6 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            53,\n            6,\n            1,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\n\n\nlet note_melody_7 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            55,\n            7,\n            1,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet note_melody_8 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            56,\n            8,\n            1,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\n\n\nlet note_melody_parsed_1 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            51,\n            1,\n            2,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet note_melody_parsed_2 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            53,\n            3,\n            2,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\n\n\nlet note_melody_parsed_3 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            55,\n            5,\n            2,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet note_melody_parsed_4 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            56,\n            7,\n            2,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\n\n\nlet note_summarized_melody_1 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            51,\n            1,\n            4,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet note_summarized_melody_2 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            55,\n            5,\n            4,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet note_summarized_root = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            51,\n            1,\n            8,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\n\nlet mode_texture_parse = MONOPONY;\n\nlet mode_control_parse = VOCAL;\n\nlet user_input_handler_parse = new UserInputHandler(\n    mode_texture_parse,\n    mode_control_parse\n);\n\nlet env_parse: string = 'node_for_max';\n// env_parse = 'node';\n\n\nlet messenger_parse = new Messenger(env_parse, 0, 'render_parse');\n\nlet algorithm_train_parse = new Parse(\n    user_input_handler_parse\n);\n\nlet window_local_parse = new MatrixWindow(\n    384,\n    384,\n    messenger_parse,\n    algorithm_train_parse\n);\n\nalgorithm_train_parse.set_depth(\n    3\n);\n\n// stubs\nlet song_parse = {\n    set_overdub: (int) => {},\n    set_session_record: (int) => {}\n};\n\nlet clip_user_input_parse = {\n    fire: () => {},\n    stop: () => {},\n    set_endpoints_loop: (former, latter) => {}\n};\n\nlet notes_segments_parse = [\n    segment_note_1_parse,\n    segment_note_2_parse\n];\n\nlet notes_target_clip_parse = [\n    note_melody_1,\n    note_melody_2,\n    note_melody_3,\n    note_melody_4,\n    note_melody_5,\n    note_melody_6,\n    note_melody_7,\n    note_melody_8\n];\n\nlet segments_parse: Segment[] = [];\n\nfor (let note of notes_segments_parse) {\n    segments_parse.push(\n        new Segment(\n            note\n        )\n    )\n}\n\nlet clip_dao_virtual_parse = new LiveClipVirtual(notes_target_clip_parse);\n\nlet clip_target_virtual_parse = new Clip(clip_dao_virtual_parse);\n\nlet trainer_local_parse = new Trainer(\n    window_local_parse,\n    user_input_handler_parse,\n    algorithm_train_parse,\n    clip_user_input_parse,\n    clip_target_virtual_parse,\n    song_parse,\n    segments_parse,\n    messenger_parse\n);\n\n// test case - 2 segments, 2 notes a piece\n\ntrainer_local_parse.init(\n\n);\n\ntrainer_local_parse.accept_input(\n    [note_melody_parsed_1, note_melody_parsed_2]\n);\n\ntrainer_local_parse.accept_input(\n    [note_melody_parsed_3, note_melody_parsed_4]\n);\n\ntrainer_local_parse.render_window(\n\n);\n\n\ntrainer_local_parse.clear_window(\n\n);\n\nlet freezer_parse = new TrainFreezer(\n    env_parse\n);\n\nfreezer_parse.freeze(\n    trainer_local_parse,\n    '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync/tk_music_ts/cache/train_parse.json'\n);\n\nlet thawer_parse = new TrainThawer(\n    env_parse\n);\n\nlet config_parse = {\n    'window': window_local_parse,\n    'user_input_handler': user_input_handler_parse,\n    'algorithm': algorithm_train_parse,\n    'clip_user_input': clip_user_input_parse,\n    'clip_target_virtual': clip_target_virtual_parse,\n    'song': song_parse,\n    'segments': segments_parse,\n    'messenger': messenger_parse,\n    'env': env_parse\n};\n\nlet train_thawed_parse = thawer_parse.thaw(\n    '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync/tk_music_ts/cache/train_parse.json',\n    config_parse\n);\n\ntrain_thawed_parse.render_window(\n\n);"]}