{"version":3,"file":"pwindow.js","sourceRoot":"","sources":["pwindow.ts"],"names":[],"mappings":"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","sourcesContent":["import \"mocha\";\nconst assert = require(\"chai\").assert;\nconst sinon = require(\"sinon\");\nconst sinonTest = require('sinon-test');\nconst test = sinonTest(sinon);\nimport {clip as c} from \"../../src/clip/clip\";\nimport {message as m} from \"../../src/message/messenger\";\nimport {window as w} from \"../../src/render/window\";\nimport {note as n} from \"../../src/note/note\";\nimport TreeModel = require(\"tree-model\");\n\ndescribe('Pwindow', test(()=>{\n\n    it('incrementally renders notes of tree (does not need to render an entire clip at once)', test(()=>{\n        let env: string = 'node';\n\n        let pwindow = new w.Pwindow(\n            60,\n            8,\n            new m.Messenger(env, 0)\n        );\n\n        let tree: TreeModel = new TreeModel();\n        // 50,0,4,127,0\n        let note_root = tree.parse(\n            {\n                id: -1, // TODO: hashing scheme for clip id and beat start\n                note: new n.Note(\n                    50,\n                    0,\n                    4,\n                    127,\n                    0\n                ),\n                children: [\n\n                ]\n            }\n        );\n\n        let note_2_1 = tree.parse(\n            {\n                id: -1, // TODO: hashing scheme for clip id and beat start\n                note: new n.Note(\n                    50,\n                    0,\n                    2,\n                    127,\n                    0\n                ),\n                children: [\n\n                ]\n            }\n        );\n\n        let note_2_2 = tree.parse(\n            {\n                id: -1, // TODO: hashing scheme for clip id and beat start\n                note: new n.Note(\n                    54,\n                    2,\n                    2,\n                    127,\n                    0\n                ),\n                children: [\n\n                ]\n            }\n        );\n\n        let note_3_1 = tree.parse(\n            {\n                id: -1, // TODO: hashing scheme for clip id and beat start\n                note: new n.Note(\n                    50,\n                    0,\n                    1,\n                    127,\n                    0\n                ),\n                children: [\n\n                ]\n            }\n        );\n\n        let note_3_2 = tree.parse(\n            {\n                id: -1, // TODO: hashing scheme for clip id and beat start\n                note: new n.Note(\n                    52,\n                    1,\n                    1,\n                    127,\n                    0\n                ),\n                children: [\n\n                ]\n            }\n        );\n\n        let note_3_3 = tree.parse(\n            {\n                id: -1, // TODO: hashing scheme for clip id and beat start\n                note: new n.Note(\n                    54,\n                    2,\n                    1,\n                    127,\n                    0\n                ),\n                children: [\n\n                ]\n            }\n        );\n\n        let note_3_4 = tree.parse(\n            {\n                id: -1, // TODO: hashing scheme for clip id and beat start\n                note: new n.Note(\n                    55,\n                    3,\n                    1,\n                    127,\n                    0\n                ),\n                children: [\n\n                ]\n            }\n        );\n\n\n        pwindow.set_root(\n            note_root\n        );\n\n        pwindow.elaborate(\n            [note_2_1],\n            0,\n            2,\n            1\n        );\n\n        pwindow.elaborate(\n            [note_2_2],\n            2,\n            4,\n            1\n        );\n\n        pwindow.elaborate(\n            [note_3_1],\n            0,\n            1,\n            2\n        );\n\n        pwindow.elaborate(\n            [note_3_2],\n            1,\n            2,\n            2\n        );\n\n        pwindow.elaborate(\n            [note_3_3],\n            2,\n            3,\n            2\n        );\n\n        pwindow.elaborate(\n            [note_3_4],\n            3,\n            4,\n            2\n        );\n\n\n        let messages = pwindow.get_messages_render_clips();\n\n        // TODO: tack on colors to end of message, make color configurable\n        // TODO: make order of messages not matter\n        assert.deepEqual(\n            messages[0],\n            [ 'paintrect', 0, 0, 8, 20, 0, 0, 0 ],\n        );\n\n        assert.deepEqual(\n            messages[1],\n            [ 'paintrect', 0, 36, 4, 40, 0, 0, 0 ],\n        );\n\n        assert.deepEqual(\n            messages[2],\n            [ 'paintrect', 4, 20, 8, 24, 0, 0, 0 ],\n        );\n\n        assert.deepEqual(\n            messages[3],\n            [ 'paintrect', 0, 56.66666666666667, 2, 60, 0, 0, 0 ],\n        );\n\n        assert.deepEqual(\n            messages[4],\n            [ 'paintrect', 2, 50, 4, 53.333333333333336, 0, 0, 0 ]\n        );\n\n        assert.deepEqual(\n            messages[5],\n            [ 'paintrect', 4, 43.333333333333336, 6, 46.666666666666664, 0, 0, 0 ],\n        );\n\n        assert.deepEqual(\n            messages[6],\n            [ 'paintrect', 6, 40, 8, 43.333333333333336, 0, 0, 0 ],\n        );\n    }));\n}));"]}