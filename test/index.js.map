{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import \"mocha\";\nimport TreeModel = require(\"tree-model\");\nconst assert = require(\"chai\").assert;\nconst sinon = require(\"sinon\");\nconst sinonTest = require('sinon-test');\nconst test = sinonTest(sinon);\n\nimport {note as n} from \"../src/note/note\"\n\nimport {phrase as p} from \"../src/phrase/phrase\"\n\nimport {message as m} from \"../src/message/messenger\"\n\nimport {clip as c} from \"../src/clip/clip\"\n\nimport {window as w} from \"../src/render/window\";\n\nimport {log} from \"../src/log/logger\";\n\n\ndescribe('Phrase', ()=>{\n\n    it('is capable of iteration', test(()=>{\n        // TODO: make 1 phrase consisting of quarter notes\n        // TODO: iterate twice and ensure that the result starts on beat 3\n        // TODO: make clip DAO stub\n\n        let messenger = new m.Messenger('node', 0);\n\n        let stub_live_api = {\n            get: (property: string): any => {return 0},\n            set: (property: string, value: any): void => {},\n            call: (func: string,  ...args: any[]): any => {return 0}\n        };\n\n        let clip_dao = new c.ClipDao(stub_live_api, messenger, false);\n\n        sinon.stub(clip_dao, \"get_start_marker\").callsFake(() => {\n            return 0;\n        });\n\n        sinon.stub(clip_dao, \"get_end_marker\").callsFake(() => {\n            return 4;\n        });\n\n        sinon.stub(clip_dao, \"get_notes_within_markers\").callsFake(() => {\n            return [\"notes\",2,\"note\",50,0,1,127,0,\"note\",52,1,1,127,0,\"note\",54,2,2,127,0,\"done\"]\n        });\n\n        let clip = new c.Clip(clip_dao);\n\n        clip.load_notes_within_markers();\n\n        let phrase = new p.Phrase(\n            clip.get_start_marker(),\n            clip.get_end_marker(),\n            clip\n        );\n\n        let note_iterator = phrase.note_iterator;\n\n        // TODO: see why undefined\n        // let note = note_iterator.next().value;\n\n        // TODO: assert result starts on beat 3\n\n    }));\n});\n\ndescribe('PredictionPreprocessor', ()=> {\n    it('obeys limit', ()=>{\n\n    });\n\n    it('resets properly', ()=>{\n\n    });\n    // function test() {\n    //\n    //     function assert(statement) {\n    //         if (!eval(statement)) {\n    //             throw statement\n    //         }\n    //     }\n    //\n    //     var prediction_preprocessor = new PredictionPreprocessor('monophonic_guitar');\n    //\n    //     assert('prediction_preprocessor.get_state_primed() === false');\n    //\n    //     prediction_preprocessor.accept(60);\n    //\n    //     assert('prediction_preprocessor.get_state_primed() === true');\n    //     assert('JSON.stringify(prediction_preprocessor.get_prediction()) === JSON.stringify([60])');\n    //\n    //     prediction_preprocessor.accept(62);\n    //     prediction_preprocessor.accept(64);\n    //\n    //     assert('prediction_preprocessor.get_state_primed() === true');\n    //     assert('JSON.stringify(prediction_preprocessor.get_prediction()) === JSON.stringify([60])');\n    //\n    //     prediction_preprocessor.reset();\n    //\n    //     assert('JSON.stringify(prediction_preprocessor.get_prediction()) === JSON.stringify([])');\n    // }\n});\n\ndescribe('Target', ()=>{\n   it('iterates over both phrases and notes', ()=>{\n       // TODO: make 2 phrase, each a measure long, consisting of quarter notes\n       // TODO: iterate until the first note of the second phrase\n\n   }) ;\n});\n\n// describe('Pwindow', test(()=>{\n//\n//     it('calculate rendering messages for tree correctly', test(()=>{\n//         let env: string = 'node';\n//\n//         let stub1LiveAPI = {\n//             get: () => {return 0},\n//             set: () => {},\n//             call: () => {}\n//         };\n//\n//         let stub2LiveAPI = {\n//             get: () => {return 0},\n//             set: () => {},\n//             call: () => {}\n//         };\n//\n//         let stub3LiveAPI = {\n//             get: () => {return 0},\n//             set: () => {},\n//             call: () => {}\n//         };\n//\n//         let stub4LiveAPI = {\n//             get: () => {return 0},\n//             set: () => {},\n//             call: () => {}\n//         };\n//\n//         // clip 1\n//         let clip_dao_1 = new c.ClipDao(\n//             stub1LiveAPI,\n//             new m.Messenger(env, 0),\n//             false\n//         );\n//         sinon.stub(clip_dao_1, \"get_start_marker\").callsFake(() => {\n//             return 0;\n//         });\n//         sinon.stub(clip_dao_1, \"get_end_marker\").callsFake(() => {\n//             return 4;\n//         });\n//         sinon.stub(clip_dao_1, \"get_notes_within_markers\").callsFake(() => {\n//             return [\"notes\",1,\"note\",50,0,4,127,0,\"done\"]\n//         });\n//\n//\n//         // clip 2\n//         let clip_dao_2 = new c.ClipDao(\n//             stub2LiveAPI,\n//             new m.Messenger(env, 0),\n//             false\n//         );\n//         sinon.stub(clip_dao_2, \"get_start_marker\").callsFake(() => {\n//             return 0;\n//         });\n//         sinon.stub(clip_dao_2, \"get_end_marker\").callsFake(() => {\n//             return 4;\n//         });\n//         sinon.stub(clip_dao_2, \"get_notes_within_markers\").callsFake(() => {\n//             return [\"notes\",2,\"note\",50,0,2,127,0,\"note\",54,2,2,127,0,\"done\"]\n//         });\n//\n//\n//         // clip 3\n//         let clip_dao_3 = new c.ClipDao(\n//             stub3LiveAPI,\n//             new m.Messenger(env, 0),\n//             false\n//         );\n//\n//         sinon.stub(clip_dao_3, \"get_start_marker\").callsFake(() => {\n//             return 0;\n//         });\n//         sinon.stub(clip_dao_3, \"get_end_marker\").callsFake(() => {\n//             return 4;\n//         });\n//         sinon.stub(clip_dao_3, \"get_notes_within_markers\").callsFake(() => {\n//             return [\"notes\",3,\"note\",50,0,1,127,0,\"note\",52,1,1,127,0,\"note\",54,2,2,127,0,\"done\"]\n//         });\n//\n//\n//         // clip 4\n//         let clip_dao_4 = new c.ClipDao(\n//             stub4LiveAPI,\n//             new m.Messenger(env, 0),\n//             false\n//         );\n//\n//         sinon.stub(clip_dao_4, \"get_start_marker\").callsFake(() => {\n//             return 0;\n//         });\n//         sinon.stub(clip_dao_4, \"get_end_marker\").callsFake(() => {\n//             return 4;\n//         });\n//         sinon.stub(clip_dao_4, \"get_notes_within_markers\").callsFake(() => {\n//             return [\"notes\",4,\"note\",50,0,1,127,0,\"note\",52,1,1,127,0,\"note\",54,2,1,127,0,\"note\",55,3,1,127,0,\"done\"]\n//         });\n//\n//         let clip_1 = new c.Clip(clip_dao_1);\n//         let clip_2 = new c.Clip(clip_dao_2);\n//         let clip_3 = new c.Clip(clip_dao_3);\n//         let clip_4 = new c.Clip(clip_dao_4);\n//\n//         clip_1.load_notes_within_markers();\n//         clip_2.load_notes_within_markers();\n//         clip_3.load_notes_within_markers();\n//         clip_4.load_notes_within_markers();\n//\n//         var dim = 16 * 6 * 4;\n//\n//         var pwindow = new w.Pwindow(\n//             dim,\n//             dim,\n//             new m.Messenger(env, 0)\n//         );\n//\n//         pwindow.set_clip(clip_1);\n//\n//         pwindow.elaborate(\n//             clip_2.get_notes_within_markers(),\n//             clip_2.get_notes_within_markers()[0].model.note.beat_start,\n//             clip_2.get_notes_within_markers()[1].model.note.get_beat_end()\n//         );\n//\n//         pwindow.elaborate(\n//             clip_3.get_notes_within_markers().slice(0, 2),\n//             clip_3.get_notes_within_markers().slice(0, 2)[0].model.note.beat_start,\n//             clip_3.get_notes_within_markers().slice(0, 2)[1].model.note.get_beat_end()\n//         );\n//\n//         pwindow.elaborate(\n//             clip_4.get_notes_within_markers().slice(2, 4),\n//             clip_4.get_notes_within_markers().slice(2, 4)[0].model.note.beat_start,\n//             clip_4.get_notes_within_markers().slice(2, 4)[1].model.note.get_beat_end()\n//         );\n//\n//         let messages = pwindow.get_messages_render_tree();\n//\n//         // TODO: tack on colors to end of message, make color configurable\n//         // TODO: make order of messages not matter\n//         assert.deepEqual(\n//             messages[4],\n//             ['linesegment', 240, 312, 288, 105.6, 255, 0, 0],\n//         );\n//\n//         assert.deepEqual(\n//             messages[5],\n//             ['linesegment', 336, 296, 288, 105.6, 255, 0, 0],\n//         );\n//\n//         assert.deepEqual(\n//             messages[0],\n//             ['linesegment', 96, 182.4, 192, 48, 255, 0, 0],\n//         );\n//\n//         assert.deepEqual(\n//             messages[1],\n//             ['linesegment', 288, 105.6, 192, 48, 255, 0, 0],\n//         );\n//\n//         assert.deepEqual(\n//             messages[2],\n//             ['linesegment', 48, 278.4, 96, 182.4, 255, 0, 0]\n//         );\n//\n//         assert.deepEqual(\n//             messages[3],\n//             ['linesegment', 144, 240, 96, 182.4, 255, 0, 0],\n//         );\n//     }));\n//\n//     it(\"calculates rendering messages for multiple clips correctly\", test(()=>{\n//\n//         let env: string = 'node';\n//\n//         let stub1LiveAPI = {\n//             get: () => {return 0},\n//             set: () => {},\n//             call: () => {}\n//         };\n//\n//         // sinon.stub(stub1LiveAPI, \"get\").callsFake(() => {\n//         //\n//         // });\n//         // sinon.stub(stub1LiveAPI, \"set\").callsFake(() => {\n//         //\n//         // });\n//         // sinon.stub(stub1LiveAPI, \"call\").callsFake(() => {\n//         //\n//         // });\n//\n//         let stub2LiveAPI = {\n//             get: () => {return 0},\n//             set: () => {},\n//             call: () => {}\n//         };\n//\n//         // sinon.stub(stub2LiveAPI, \"get\").callsFake(() => {\n//         //\n//         // });\n//         // sinon.stub(stub2LiveAPI, \"set\").callsFake(() => {\n//         //\n//         // });\n//         // sinon.stub(stub2LiveAPI, \"call\").callsFake(() => {\n//         //\n//         // });\n//\n//         let stub3LiveAPI = {\n//             get: () => {return 0},\n//             set: () => {},\n//             call: () => {}\n//         };\n//\n//         // sinon.stub(stub3LiveAPI, \"get\").callsFake(() => {\n//         //\n//         // });\n//         // sinon.stub(stub3LiveAPI, \"set\").callsFake(() => {\n//         //\n//         // });\n//         // sinon.stub(stub3LiveAPI, \"call\").callsFake(() => {\n//         //\n//         // });\n//\n//         let stub4LiveAPI = {\n//             get: () => {return 0},\n//             set: () => {},\n//             call: () => {}\n//         };\n//\n//         // sinon.stub(stub4LiveAPI, \"get\").callsFake(() => {\n//         //\n//         // });\n//         // sinon.stub(stub4LiveAPI, \"set\").callsFake(() => {\n//         //\n//         // });\n//         // sinon.stub(stub4LiveAPI, \"call\").callsFake(() => {\n//         //\n//         // });\n//\n//         // clip 1\n//         let clip_dao_1 = new c.ClipDao(\n//             stub1LiveAPI,\n//             new m.Messenger(env, 0),\n//             false\n//         );\n//         sinon.stub(clip_dao_1, \"get_start_marker\").callsFake(() => {\n//             return 0;\n//         });\n//         sinon.stub(clip_dao_1, \"get_end_marker\").callsFake(() => {\n//             return 4;\n//         });\n//         sinon.stub(clip_dao_1, \"get_notes_within_markers\").callsFake(() => {\n//             return [\"notes\",1,\"note\",50,0,4,127,0,\"done\"]\n//         });\n//\n//\n//         // clip 2\n//         let clip_dao_2 = new c.ClipDao(\n//             stub2LiveAPI,\n//             new m.Messenger(env, 0),\n//             false\n//         );\n//         sinon.stub(clip_dao_2, \"get_start_marker\").callsFake(() => {\n//             return 0;\n//         });\n//         sinon.stub(clip_dao_2, \"get_end_marker\").callsFake(() => {\n//             return 4;\n//         });\n//         sinon.stub(clip_dao_2, \"get_notes_within_markers\").callsFake(() => {\n//             return [\"notes\",2,\"note\",50,0,2,127,0,\"note\",54,2,2,127,0,\"done\"]\n//         });\n//\n//\n//         // clip 3\n//         let clip_dao_3 = new c.ClipDao(\n//             stub3LiveAPI,\n//             new m.Messenger(env, 0),\n//             false\n//         );\n//\n//         sinon.stub(clip_dao_3, \"get_start_marker\").callsFake(() => {\n//             return 0;\n//         });\n//         sinon.stub(clip_dao_3, \"get_end_marker\").callsFake(() => {\n//             return 4;\n//         });\n//         sinon.stub(clip_dao_3, \"get_notes_within_markers\").callsFake(() => {\n//             return [\"notes\",3,\"note\",50,0,1,127,0,\"note\",52,1,1,127,0,\"note\",54,2,2,127,0,\"done\"]\n//         });\n//\n//\n//         // clip 4\n//         let clip_dao_4 = new c.ClipDao(\n//             stub4LiveAPI,\n//             new m.Messenger(env, 0),\n//             false\n//         );\n//\n//         sinon.stub(clip_dao_4, \"get_start_marker\").callsFake(() => {\n//             return 0;\n//         });\n//         sinon.stub(clip_dao_4, \"get_end_marker\").callsFake(() => {\n//             return 4;\n//         });\n//         sinon.stub(clip_dao_4, \"get_notes_within_markers\").callsFake(() => {\n//             return [\"notes\",4,\"note\",50,0,1,127,0,\"note\",52,1,1,127,0,\"note\",54,2,1,127,0,\"note\",55,3,1,127,0,\"done\"]\n//         });\n//\n//         let clip_1 = new c.Clip(clip_dao_1);\n//         let clip_2 = new c.Clip(clip_dao_2);\n//         let clip_3 = new c.Clip(clip_dao_3);\n//         let clip_4 = new c.Clip(clip_dao_4);\n//\n//         clip_1.load_notes_within_markers();\n//         clip_2.load_notes_within_markers();\n//         clip_3.load_notes_within_markers();\n//         clip_4.load_notes_within_markers();\n//\n//         var dim = 16 * 6 * 4;\n//\n//         var pwindow = new w.Pwindow(\n//             dim,\n//             dim,\n//             new m.Messenger(env, 0)\n//         );\n//\n//         // pwindow.add_clip(clip_4);\n//         // pwindow.add_clip(clip_3);\n//         // pwindow.add_clip(clip_2);\n//         // pwindow.add_clip(clip_1);\n//         // pwindow.add_clip(clip_1);\n//         // pwindow.add_clip(clip_2);\n//         // pwindow.add_clip(clip_3);\n//         // pwindow.add_clip(clip_4);\n//\n//         pwindow.set_clip(clip_1);\n//\n//         pwindow.elaborate(\n//             clip_2.get_notes_within_markers(),\n//             clip_2.get_notes_within_markers()[0].model.note.beat_start,\n//             clip_2.get_notes_within_markers()[1].model.note.get_beat_end()\n//         );\n//\n//         pwindow.elaborate(\n//             clip_3.get_notes_within_markers().slice(0, 2),\n//             clip_3.get_notes_within_markers().slice(0, 2)[0].model.note.beat_start,\n//             clip_3.get_notes_within_markers().slice(0, 2)[1].model.note.get_beat_end()\n//         );\n//\n//         pwindow.elaborate(\n//             clip_4.get_notes_within_markers().slice(2, 4),\n//             clip_4.get_notes_within_markers().slice(2, 4)[0].model.note.beat_start,\n//             clip_4.get_notes_within_markers().slice(2, 4)[1].model.note.get_beat_end()\n//         );\n//\n//         let messages = pwindow.get_messages_render_clips();\n//\n//         assert.deepEqual(\n//             messages[6],\n//             ['paintrect', 0, 368, 96, 384, 0, 0, 0]\n//         );\n//\n//         assert.deepEqual(\n//             messages[7],\n//             ['paintrect', 96, 336, 192, 352, 0, 0, 0]\n//         );\n//\n//         assert.deepEqual(\n//             messages[8],\n//             ['paintrect', 192, 304, 288, 320, 0, 0, 0]\n//         );\n//\n//         assert.deepEqual(\n//             messages[9],\n//             ['paintrect', 288, 288, 384, 304, 0, 0, 0]\n//         );\n//\n//         assert.deepEqual(\n//             messages[3],\n//             ['paintrect', 0, 268.8, 96, 288, 0, 0, 0]\n//         );\n//\n//         assert.deepEqual(\n//             messages[4],\n//             ['paintrect', 96, 230.4, 192, 249.6, 0, 0, 0]\n//         );\n//\n//         assert.deepEqual(\n//             messages[5],\n//             ['paintrect', 192, 192, 384, 211.2, 0, 0, 0]\n//         );\n//\n//         //\n//         assert.deepEqual(\n//             messages[1],\n//             ['paintrect', 0, 172.8, 192, 192, 0, 0, 0]\n//         );\n//\n//         assert.deepEqual(\n//             messages[2],\n//             ['paintrect', 192, 96, 384, 115.2, 0, 0, 0]\n//         );\n//\n//         //\n//         assert.deepEqual(\n//             messages[0],\n//             ['paintrect', 0, 0, 384, 96, 0, 0, 0]\n//         );\n//\n//     }));\n//\n//     it(\"calculates rendering messages of a single clip correctly\", test(()=>{\n//\n//         let stubLiveAPI = {\n//             get: () => {return 0},\n//             set: () => {},\n//             call: () => {}\n//         };\n//\n//         let stub_clip_dao = new c.ClipDao(\n//             stubLiveAPI,\n//             new m.Messenger('node', 0),\n//             false\n//         );\n//\n//         sinon.stub(stub_clip_dao, \"get_start_marker\").callsFake(() => {\n//             return 0;\n//         });\n//         sinon.stub(stub_clip_dao, \"get_end_marker\").callsFake(() => {\n//             return 4;\n//         });\n//         sinon.stub(stub_clip_dao, \"get_notes_within_markers\").callsFake(() => {\n//             return [\"notes\",4,\"note\",50,0,1,127,0,\"note\",52,1,1,127,0,\"note\",54,2,1,127,0,\"note\",55,3,1,127,0,\"done\"]\n//         });\n//\n//         var clip = new c.Clip(stub_clip_dao);\n//\n//         clip.load_notes_within_markers();\n//\n//         var dim = 16 * 6 * 4;\n//\n//         var pwindow = new w.Pwindow(\n//             dim,\n//             dim,\n//             new m.Messenger('node', 0)\n//         );\n//\n//         pwindow.add_clip(clip);\n//\n//         let messages = pwindow.get_messages_render_clips();\n//\n//         assert.deepEqual(\n//             messages[0],\n//             ['paintrect', 0, 320, 96, 384, 0, 0, 0]\n//         );\n//\n//         assert.deepEqual(\n//             messages[1],\n//             ['paintrect', 96, 192, 192, 256, 0, 0, 0]\n//         );\n//\n//         assert.deepEqual(\n//             messages[2],\n//             ['paintrect', 192, 64, 288, 128, 0, 0, 0]\n//         );\n//\n//         assert.deepEqual(\n//             messages[3],\n//             ['paintrect', 288, 0, 384, 64, 0, 0, 0]\n//         );\n//     }));\n//\n// }));"]}