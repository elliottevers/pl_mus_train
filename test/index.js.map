{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import \"mocha\";\n// import * as assert from \"assert\";\nimport {note as n} from \"../src/note/note\"\nimport TreeModel = require(\"tree-model\");\nconst assert = require('chai').assert;\n\ndescribe(\"note\", ()=>{\n    // it(\"should store pitch information\", ()=>{\n    //     let note = new n.Note(60, 0, 4, 100, 0);\n    //     assert.equal(note.pitch, 60);\n    // });\n});\n\ndescribe('tree', function () {\n    it('works', ()=>{\n        // let tree = new TreeModel();\n        //\n        // let root = tree.parse({\n        //     id: 1,\n        //     children: [\n        //         {\n        //             id: 11,\n        //             children: [{id: 111}]\n        //         },\n        //         {\n        //             id: 12,\n        //             children: [{id: 121, attribute_test: 'hello world'}, {id: 122}]\n        //         },\n        //         {\n        //             id: 13\n        //         }\n        //     ]\n        // });\n        //\n        // let path_length = root.first(function (node) {     return node.model.attribute_test === 'hello world'; });\n        // assert.equal(path_length, 2);\n    })\n});\n\ndescribe('Phrase', ()=>{\n\n    it('is capable of iteration', ()=>{\n        // var index_track = 9;\n        // var index_clip_slot = 0;\n        // var path_clip = 'live_set tracks 9 clip_slots 0 clip';\n\n        // TODO: make 1 phrase consisting of quarter notes\n        // TODO: iterate twice and ensure that the result starts on beat 3\n        // TODO: make clip DAO stub\n\n        var deferlow = false;\n\n        var int_outlet = 0;\n\n        var messenger = m.Messenger('max', int_outlet);\n\n        var clip_dao = new cd.ClipDao(index_track, index_clip_slot, messenger, deferlow);\n\n        var clip = new c.Clip(clip_dao);\n\n        var data_phrase = [0, 8];\n\n        var phrase = new Phrase(\n            data_phrase[0],\n            data_phrase[1],\n            clip\n        );\n\n        var direction_forward = true;\n\n        // TODO: have to mock notes\n        phrase.load_notes(direction_forward);\n\n        var note_iterator = phrase.note_iterator;\n\n        var note = note_iterator.next().value;\n\n        // l.log(note);\n    })\n    // function test() {\n    //     // TODO: mock this track\n    //     var index_track = 9;\n    //     var index_clip_slot = 0;\n    //     // var path_clip = 'live_set tracks 9 clip_slots 0 clip';\n    //\n    //     var deferlow = false;\n    //\n    //     var int_outlet = 0;\n    //\n    //     var messenger = m.Messenger('max', int_outlet);\n    //\n    //     var clip_dao = new cd.ClipDao(index_track, index_clip_slot, messenger, deferlow);\n    //\n    //     var clip = new c.Clip(clip_dao);\n    //\n    //     var data_phrase = [0, 8];\n    //\n    //     var phrase = new Phrase(\n    //         data_phrase[0],\n    //         data_phrase[1],\n    //         clip\n    //     );\n    //\n    //     var direction_forward = true;\n    //\n    //     // TODO: have to mock notes\n    //     phrase.load_notes(direction_forward);\n    //\n    //     var note_iterator = phrase.note_iterator;\n    //\n    //     var note = note_iterator.next().value;\n    //\n    //     l.log(note);\n    // }\n});\n\ndescribe('PredictionPreprocessor', ()=> {\n    it('obeys limit', ()=>{\n\n    });\n\n    it('resets properly', ()=>{\n\n    });\n    // function test() {\n    //\n    //     function assert(statement) {\n    //         if (!eval(statement)) {\n    //             throw statement\n    //         }\n    //     }\n    //\n    //     var prediction_preprocessor = new PredictionPreprocessor('monophonic_guitar');\n    //\n    //     assert('prediction_preprocessor.get_state_primed() === false');\n    //\n    //     prediction_preprocessor.accept(60);\n    //\n    //     assert('prediction_preprocessor.get_state_primed() === true');\n    //     assert('JSON.stringify(prediction_preprocessor.get_prediction()) === JSON.stringify([60])');\n    //\n    //     prediction_preprocessor.accept(62);\n    //     prediction_preprocessor.accept(64);\n    //\n    //     assert('prediction_preprocessor.get_state_primed() === true');\n    //     assert('JSON.stringify(prediction_preprocessor.get_prediction()) === JSON.stringify([60])');\n    //\n    //     prediction_preprocessor.reset();\n    //\n    //     assert('JSON.stringify(prediction_preprocessor.get_prediction()) === JSON.stringify([])');\n    // }\n});\n\ndescribe('Target', ()=>{\n   it('iterates over both phrases and notes', ()=>{\n       // TODO: make 2 phrase, each a measure long, consisting of quarter notes\n       // TODO: iterate until the first note of the second phrase\n   }) ;\n});"]}