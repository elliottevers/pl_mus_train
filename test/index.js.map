{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;AAAA,iBAAe;AAEf,IAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;AACtC,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC/B,IAAM,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACxC,IAAM,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;AAI9B,+CAAgD;AAEhD,sDAAqD;AAErD,yCAA0C;AAO1C,QAAQ,CAAC,QAAQ,EAAE;IAEf,EAAE,CAAC,yBAAyB,EAAE,IAAI,CAAC;QAC/B,kDAAkD;QAClD,kEAAkE;QAClE,2BAA2B;QAE3B,IAAI,SAAS,GAAG,IAAI,mBAAC,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAE3C,IAAI,aAAa,GAAG;YAChB,GAAG,EAAE,UAAC,QAAgB,IAAW,OAAO,CAAC,CAAA,CAAA,CAAC;YAC1C,GAAG,EAAE,UAAC,QAAgB,EAAE,KAAU,IAAY,CAAC;YAC/C,IAAI,EAAE,UAAC,IAAY;gBAAG,cAAc;qBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;oBAAd,6BAAc;;gBAAW,OAAO,CAAC,CAAA;YAAA,CAAC;SAC3D,CAAC;QAEF,IAAI,QAAQ,GAAG,IAAI,WAAC,CAAC,OAAO,CAAC,aAAa,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;QAE9D,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC,SAAS,CAAC;YAC/C,OAAO,CAAC,CAAC;QACb,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC,SAAS,CAAC;YAC7C,OAAO,CAAC,CAAC;QACb,CAAC,CAAC,CAAC;QAEH,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,0BAA0B,CAAC,CAAC,SAAS,CAAC;YACvD,OAAO,CAAC,OAAO,EAAC,CAAC,EAAC,MAAM,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,MAAM,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,MAAM,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,MAAM,CAAC,CAAA;QACzF,CAAC,CAAC,CAAC;QAEH,IAAI,IAAI,GAAG,IAAI,WAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEhC,IAAI,CAAC,yBAAyB,EAAE,CAAC;QAEjC,IAAI,MAAM,GAAG,IAAI,eAAC,CAAC,MAAM,CACrB,IAAI,CAAC,gBAAgB,EAAE,EACvB,IAAI,CAAC,cAAc,EAAE,EACrB,IAAI,CACP,CAAC;QAEF,IAAI,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAEzC,0BAA0B;QAC1B,yCAAyC;QAEzC,uCAAuC;IAE3C,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC","sourcesContent":["import \"mocha\";\nimport TreeModel = require(\"tree-model\");\nconst assert = require(\"chai\").assert;\nconst sinon = require(\"sinon\");\nconst sinonTest = require('sinon-test');\nconst test = sinonTest(sinon);\n\nimport {note as n} from \"../src/note/note\"\n\nimport {phrase as p} from \"../src/phrase/phrase\"\n\nimport {message as m} from \"../src/message/messenger\"\n\nimport {clip as c} from \"../src/clip/clip\"\n\nimport {window as w} from \"../src/render/window\";\n\nimport {log} from \"../src/log/logger\";\n\n\ndescribe('Phrase', ()=>{\n\n    it('is capable of iteration', test(()=>{\n        // TODO: make 1 phrase consisting of quarter notes\n        // TODO: iterate twice and ensure that the result starts on beat 3\n        // TODO: make clip DAO stub\n\n        let messenger = new m.Messenger('node', 0);\n\n        let stub_live_api = {\n            get: (property: string): any => {return 0},\n            set: (property: string, value: any): void => {},\n            call: (func: string,  ...args: any[]): any => {return 0}\n        };\n\n        let clip_dao = new c.ClipDao(stub_live_api, messenger, false);\n\n        sinon.stub(clip_dao, \"get_start_marker\").callsFake(() => {\n            return 0;\n        });\n\n        sinon.stub(clip_dao, \"get_end_marker\").callsFake(() => {\n            return 4;\n        });\n\n        sinon.stub(clip_dao, \"get_notes_within_markers\").callsFake(() => {\n            return [\"notes\",2,\"note\",50,0,1,127,0,\"note\",52,1,1,127,0,\"note\",54,2,2,127,0,\"done\"]\n        });\n\n        let clip = new c.Clip(clip_dao);\n\n        clip.load_notes_within_markers();\n\n        let phrase = new p.Phrase(\n            clip.get_start_marker(),\n            clip.get_end_marker(),\n            clip\n        );\n\n        let note_iterator = phrase.note_iterator;\n\n        // TODO: see why undefined\n        // let note = note_iterator.next().value;\n\n        // TODO: assert result starts on beat 3\n\n    }));\n});"]}