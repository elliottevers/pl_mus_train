{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import \"mocha\";\nimport TreeModel = require(\"tree-model\");\nconst assert = require(\"chai\").assert;\nconst sinon = require(\"sinon\");\nconst sinonTest = require('sinon-test');\nconst test = sinonTest(sinon);\n\ndescribe('tree', function () {\n    it('works', ()=>{\n        // let tree = new TreeModel();\n        //\n        // let root = tree.parse({\n        //     id: 1,\n        //     children: [\n        //         {\n        //             id: 11,\n        //             children: [{id: 111}]\n        //         },\n        //         {\n        //             id: 12,\n        //             children: [{id: 121, attribute_test: 'hello world'}, {id: 122}]\n        //         },\n        //         {\n        //             id: 13\n        //         }\n        //     ]\n        // });\n        //\n        // let path_length = root.first(function (node) {     return node.model.attribute_test === 'hello world'; });\n        // assert.equal(path_length, 2);\n    })\n});\n\nimport {note as n} from \"../src/note/note\"\n\nimport {phrase as p} from \"../src/phrase/phrase\"\n\nimport {message as m} from \"../src/message/messenger\"\n\nimport {clip as c} from \"../src/clip/clip\"\n\n\ndescribe('Phrase', ()=>{\n\n    it('is capable of iteration', test(()=>{\n        // TODO: make 1 phrase consisting of quarter notes\n        // TODO: iterate twice and ensure that the result starts on beat 3\n        // TODO: make clip DAO stub\n\n        let messenger = new m.Messenger('node', 0);\n\n        let clip_dao = new c.ClipDao(0, 0, messenger, false);\n\n        sinon.stub(clip_dao, \"get_start_marker\").callsFake(() => {\n            return 0;\n        });\n\n        sinon.stub(clip_dao, \"get_end_marker\").callsFake(() => {\n            return 4;\n        });\n\n        sinon.stub(clip_dao, \"get_notes\").callsFake(() => {\n            return [\"notes\",2,\"note\",50,0,1,127,0,\"note\",52,1,1,127,0,\"note\",54,2,2,127,0,\"done\"]\n        });\n\n        let clip = new c.Clip(clip_dao);\n\n        clip.load_notes();\n\n        let phrase = new p.Phrase(\n            clip.get_start_marker(),\n            clip.get_end_marker(),\n            clip\n        );\n\n        let note_iterator = phrase.note_iterator;\n\n        // TODO: see why undefined\n        let note = note_iterator.next().value;\n\n        // TODO: assert result starts on beat 3\n\n    }));\n});\n\ndescribe('PredictionPreprocessor', ()=> {\n    it('obeys limit', ()=>{\n\n    });\n\n    it('resets properly', ()=>{\n\n    });\n    // function test() {\n    //\n    //     function assert(statement) {\n    //         if (!eval(statement)) {\n    //             throw statement\n    //         }\n    //     }\n    //\n    //     var prediction_preprocessor = new PredictionPreprocessor('monophonic_guitar');\n    //\n    //     assert('prediction_preprocessor.get_state_primed() === false');\n    //\n    //     prediction_preprocessor.accept(60);\n    //\n    //     assert('prediction_preprocessor.get_state_primed() === true');\n    //     assert('JSON.stringify(prediction_preprocessor.get_prediction()) === JSON.stringify([60])');\n    //\n    //     prediction_preprocessor.accept(62);\n    //     prediction_preprocessor.accept(64);\n    //\n    //     assert('prediction_preprocessor.get_state_primed() === true');\n    //     assert('JSON.stringify(prediction_preprocessor.get_prediction()) === JSON.stringify([60])');\n    //\n    //     prediction_preprocessor.reset();\n    //\n    //     assert('JSON.stringify(prediction_preprocessor.get_prediction()) === JSON.stringify([])');\n    // }\n});\n\ndescribe('Target', ()=>{\n   it('iterates over both phrases and notes', ()=>{\n       // TODO: make 2 phrase, each a measure long, consisting of quarter notes\n       // TODO: iterate until the first note of the second phrase\n   }) ;\n});\n\ndescribe('Pwindow', ()=>{\n    it(\"sends correct rendering methods for its notes\", ()=>{\n\n    });\n\n    // var clip_dao_stub_1 = Object.assign({}, cds.ClipDaoStub);\n    // var clip_dao_stub_2 = Object.assign({}, cds.ClipDaoStub);\n    // var clip_dao_stub_3 = Object.assign({}, cds.ClipDaoStub);\n    // var clip_dao_stub_4 = Object.assign({}, cds.ClipDaoStub);\n    //\n    // clip_dao_stub_1.get_end_marker = function() {\n    //     return JSON.parse('[4]')\n    // };\n    // clip_dao_stub_2.get_end_marker = function() {\n    //     return JSON.parse('[4]')\n    // };\n    // clip_dao_stub_3.get_end_marker = function() {\n    //     return JSON.parse('[4]')\n    // };\n    // clip_dao_stub_4.get_end_marker = function() {\n    //     return JSON.parse('[4]')\n    // };\n    //\n    //\n    // clip_dao_stub_1.get_notes = function() {\n    //     return JSON.parse('[\"notes\",4,\"note\",50,0,1,127,0,\"note\",52,1,1,127,0,\"note\",54,2,1,127,0,\"note\",55,3,1,127,0,\"done\"]')\n    // };\n    // clip_dao_stub_2.get_notes = function() {\n    //     return JSON.parse('[\"notes\",3,\"note\",50,0,1,127,0,\"note\",52,1,1,127,0,\"note\",54,2,2,127,0,\"done\"]')\n    // };\n    // clip_dao_stub_3.get_notes = function() {\n    //     return JSON.parse('[\"notes\",2,\"note\",50,0,2,127,0,\"note\",54,2,2,127,0,\"done\"]')\n    // };\n    // clip_dao_stub_4.get_notes = function() {\n    //     return JSON.parse('[\"notes\",1,\"note\",50,0,4,127,0,\"done\"]')\n    // };\n    //\n    // var clip_1 = new c.Clip(clip_dao_stub_1);\n    // var clip_2 = new c.Clip(clip_dao_stub_2);\n    // var clip_3 = new c.Clip(clip_dao_stub_3);\n    // var clip_4 = new c.Clip(clip_dao_stub_4);\n    //\n    // clip_1.load_notes();\n    // clip_2.load_notes();\n    // clip_3.load_notes();\n    // clip_4.load_notes();\n    //\n    // var dim = 16 * 6 * 4;\n    // var pwindow = new pw.Pwindow(dim, dim);\n    //\n    // pwindow.add_clip(clip_4);\n    // pwindow.add_clip(clip_3);\n    // pwindow.add_clip(clip_2);\n    // pwindow.add_clip(clip_1);\n    //\n    // // TODO:\n    // // assert pwindow.get_messages_render_clips() === gt\n    // // assert pwindow.get_messages_render_tree() === gt\n    //\n    // logger.log(pwindow.parse_tree.length)\n    // // logger.log(pwindow.get_messages_render_tree());\n    // // logger.log(pwindow.get_messages_render_clips().length);\n    // // logger.log(pwindow.get_messages_render_notes(0).length);\n    //\n    // // console.log(clip_dao_stub_1.get_end_marker());\n    // // console.log(clip_dao_stub_2.get_notes());\n});"]}