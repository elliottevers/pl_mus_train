{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import \"mocha\";\nimport TreeModel = require(\"tree-model\");\nconst assert = require(\"chai\").assert;\nconst sinon = require(\"sinon\");\nconst sinonTest = require('sinon-test');\nconst test = sinonTest(sinon);\n\ndescribe('tree', function () {\n    it('works', ()=>{\n        // let tree = new TreeModel();\n        //\n        // let root = tree.parse({\n        //     id: 1,\n        //     attribute_test: 'hello world',\n        //     children: [\n        //         {\n        //             id: 11,\n        //             children: [{id: 111}]\n        //         },\n        //         {\n        //             id: 12,\n        //             children: [{id: 121}, {id: 122}]\n        //         },\n        //         {\n        //             id: 13\n        //         }\n        //     ]\n        // });\n        //\n        // let path_length = root.first(function (node) {     return node.model.attribute_test === 'hello world'; });\n        // assert.equal(path_length, 2);\n    })\n});\n\nimport {note as n} from \"../src/note/note\"\n\nimport {phrase as p} from \"../src/phrase/phrase\"\n\nimport {message as m} from \"../src/message/messenger\"\n\nimport {clip as c} from \"../src/clip/clip\"\n\nimport {window as w} from \"../src/render/window\";\n\n\ndescribe('Phrase', ()=>{\n\n    it('is capable of iteration', test(()=>{\n        // TODO: make 1 phrase consisting of quarter notes\n        // TODO: iterate twice and ensure that the result starts on beat 3\n        // TODO: make clip DAO stub\n\n        let messenger = new m.Messenger('node', 0);\n\n        let clip_dao = new c.ClipDao(0, 0, messenger, false);\n\n        sinon.stub(clip_dao, \"get_start_marker\").callsFake(() => {\n            return 0;\n        });\n\n        sinon.stub(clip_dao, \"get_end_marker\").callsFake(() => {\n            return 4;\n        });\n\n        sinon.stub(clip_dao, \"get_notes\").callsFake(() => {\n            return [\"notes\",2,\"note\",50,0,1,127,0,\"note\",52,1,1,127,0,\"note\",54,2,2,127,0,\"done\"]\n        });\n\n        let clip = new c.Clip(clip_dao);\n\n        clip.load_notes();\n\n        let phrase = new p.Phrase(\n            clip.get_start_marker(),\n            clip.get_end_marker(),\n            clip\n        );\n\n        let note_iterator = phrase.note_iterator;\n\n        // TODO: see why undefined\n        // let note = note_iterator.next().value;\n\n        // TODO: assert result starts on beat 3\n\n        // throw 'testing'\n\n    }));\n});\n\ndescribe('PredictionPreprocessor', ()=> {\n    it('obeys limit', ()=>{\n\n    });\n\n    it('resets properly', ()=>{\n\n    });\n    // function test() {\n    //\n    //     function assert(statement) {\n    //         if (!eval(statement)) {\n    //             throw statement\n    //         }\n    //     }\n    //\n    //     var prediction_preprocessor = new PredictionPreprocessor('monophonic_guitar');\n    //\n    //     assert('prediction_preprocessor.get_state_primed() === false');\n    //\n    //     prediction_preprocessor.accept(60);\n    //\n    //     assert('prediction_preprocessor.get_state_primed() === true');\n    //     assert('JSON.stringify(prediction_preprocessor.get_prediction()) === JSON.stringify([60])');\n    //\n    //     prediction_preprocessor.accept(62);\n    //     prediction_preprocessor.accept(64);\n    //\n    //     assert('prediction_preprocessor.get_state_primed() === true');\n    //     assert('JSON.stringify(prediction_preprocessor.get_prediction()) === JSON.stringify([60])');\n    //\n    //     prediction_preprocessor.reset();\n    //\n    //     assert('JSON.stringify(prediction_preprocessor.get_prediction()) === JSON.stringify([])');\n    // }\n});\n\ndescribe('Target', ()=>{\n   it('iterates over both phrases and notes', ()=>{\n       // TODO: make 2 phrase, each a measure long, consisting of quarter notes\n       // TODO: iterate until the first note of the second phrase\n   }) ;\n});\n\ndescribe('Pwindow', ()=>{\n    it(\"sends correct rendering methods for its notes\", ()=>{\n\n        // clip 1\n        let clip_dao_1 = new c.ClipDao(0, 0, new m.Messenger('node', 0), false);\n        sinon.stub(clip_dao_1, \"get_start_marker\").callsFake(() => {\n            return 0;\n        });\n        sinon.stub(clip_dao_1, \"get_end_marker\").callsFake(() => {\n            return 4;\n        });\n        sinon.stub(clip_dao_1, \"get_notes\").callsFake(() => {\n            return [\"notes\",1,\"note\",50,0,4,127,0,\"done\"]\n        });\n\n\n        // clip 2\n        let clip_dao_2 = new c.ClipDao(0, 0, new m.Messenger('node', 0), false);\n        sinon.stub(clip_dao_2, \"get_start_marker\").callsFake(() => {\n            return 0;\n        });\n        sinon.stub(clip_dao_2, \"get_end_marker\").callsFake(() => {\n            return 4;\n        });\n        sinon.stub(clip_dao_2, \"get_notes\").callsFake(() => {\n            return [\"notes\",1,\"note\",50,0,4,127,0,\"done\"]\n        });\n\n\n        // clip 3\n        let clip_dao_3 = new c.ClipDao(0, 0, new m.Messenger('node', 0), false);\n        sinon.stub(clip_dao_3, \"get_start_marker\").callsFake(() => {\n            return 0;\n        });\n        sinon.stub(clip_dao_3, \"get_end_marker\").callsFake(() => {\n            return 4;\n        });\n        sinon.stub(clip_dao_3, \"get_notes\").callsFake(() => {\n            return [\"notes\",1,\"note\",50,0,4,127,0,\"done\"]\n        });\n\n\n        // clip 1\n        let clip_dao_4 = new c.ClipDao(0, 0, new m.Messenger('node', 0), false);\n        sinon.stub(clip_dao_4, \"get_start_marker\").callsFake(() => {\n            return 0;\n        });\n        sinon.stub(clip_dao_4, \"get_end_marker\").callsFake(() => {\n            return 4;\n        });\n        sinon.stub(clip_dao_4, \"get_notes\").callsFake(() => {\n            return [\"notes\",1,\"note\",50,0,4,127,0,\"done\"]\n        });\n\n\n        let clip_1 = new c.Clip(clip_dao_1);\n        let clip_2 = new c.Clip(clip_dao_2);\n        let clip_3 = new c.Clip(clip_dao_3);\n        let clip_4 = new c.Clip(clip_dao_4);\n\n        clip_1.load_notes();\n        clip_2.load_notes();\n        clip_3.load_notes();\n        clip_4.load_notes();\n\n        var dim = 16 * 6 * 4;\n        var pwindow = new w.Pwindow(\n            dim,\n            dim,\n            new m.Messenger('node', 0)\n        );\n\n        pwindow.add_clip(clip_4);\n        pwindow.add_clip(clip_3);\n        pwindow.add_clip(clip_2);\n        pwindow.add_clip(clip_1);\n\n\n        // clip.load_notes();\n        //\n        // let phrase = new p.Phrase(\n        //     clip.get_start_marker(),\n        //     clip.get_end_marker(),\n        //     clip\n        // );\n        //\n        // let note_iterator = phrase.note_iterator;\n    });\n\n    it(\"calculates rendering messages of a single clip correctly\", test(()=>{\n\n        let stub_clip_dao = new c.ClipDao(\n            0,\n            0,\n            new m.Messenger('node', 0),\n            false\n        );\n\n        sinon.stub(stub_clip_dao, \"get_start_marker\").callsFake(() => {\n            return 0;\n        });\n        sinon.stub(stub_clip_dao, \"get_end_marker\").callsFake(() => {\n            return 4;\n        });\n        sinon.stub(stub_clip_dao, \"get_notes\").callsFake(() => {\n            return [\"notes\",4,\"note\",50,0,1,127,0,\"note\",52,1,1,127,0,\"note\",54,2,1,127,0,\"note\",55,3,1,127,0,\"done\"]\n        });\n\n        var clip = new c.Clip(stub_clip_dao);\n\n        clip.load_notes();\n\n        var dim = 16 * 6 * 4;\n\n        var pwindow = new w.Pwindow(\n            dim,\n            dim,\n            new m.Messenger('node', 0)\n        );\n\n        pwindow.add_clip(clip);\n\n        // let messages = pwindow.get_messages_render_tree();\n\n        let messages = pwindow.get_messages_render_clips();\n\n        assert.deepEqual(\n            messages[0],\n            ['paintrect', 0, 320, 96, 384]\n        );\n\n        assert.deepEqual(\n            messages[1],\n            ['paintrect', 96, 192, 192, 256]\n        );\n\n        assert.deepEqual(\n            messages[2],\n            ['paintrect', 192, 64, 288, 128]\n        );\n\n        assert.deepEqual(\n            messages[3],\n            ['paintrect', 288, 0, 384, 64]\n        );\n    }));\n\n    it(\"calculates rendering messages of multiple clips correctly\", test(()=>{\n\n    }));\n\n});"]}