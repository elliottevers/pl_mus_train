{"version":3,"file":"fret_mapper.js","sourceRoot":"","sources":["fret_mapper.ts"],"names":[],"mappings":";;AAAA,iBAAe;AACf,6CAA0C;AAC1C,IAAO,UAAU,GAAG,SAAG,CAAC,UAAU,CAAC;AACnC,yDAAoD;AACpD,IAAO,SAAS,GAAG,mBAAO,CAAC,SAAS,CAAC;AACrC,IAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;AACtC,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAC/B,IAAM,SAAS,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AACxC,IAAM,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;AAE9B,QAAQ,CAAC,YAAY,EAAE;IACnB,EAAE,CAAC,oCAAoC,EAAE,IAAI,CAAC;QAC1C,IAAI,GAAG,GAAG,MAAM,CAAC;QACjB,IAAI,SAAS,GAAc,IAAI,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjD,IAAI,MAAM,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC;QACvC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAC,4CAA4C,EAAE,IAAI,CAAC;QAClD,IAAI,GAAG,GAAG,MAAM,CAAC;QACjB,IAAI,SAAS,GAAc,IAAI,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjD,IAAI,MAAM,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC;QACvC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAC,qCAAqC,EAAE,IAAI,CAAC;QAC3C,IAAI,GAAG,GAAG,MAAM,CAAC;QACjB,IAAI,SAAS,GAAc,IAAI,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjD,IAAI,MAAM,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC;QACvC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC,CAAC;IAEJ,EAAE,CAAC,mCAAmC,EAAE,IAAI,CAAC;QACzC,IAAI,GAAG,GAAG,MAAM,CAAC;QACjB,IAAI,SAAS,GAAc,IAAI,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjD,IAAI,MAAM,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC;QACvC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC,CAAC;AACR,CAAC,CAAC,CAAC","sourcesContent":["import \"mocha\";\nimport {map} from \"../../src/control/map\";\nimport FretMapper = map.FretMapper;\nimport {message} from \"../../src/message/messenger\";\nimport Messenger = message.Messenger;\nconst assert = require(\"chai\").assert;\nconst sinon = require(\"sinon\");\nconst sinonTest = require('sinon-test');\nconst test = sinonTest(sinon);\n\ndescribe('FretMapper', ()=>{\n    it('maps to frets below root of config', test(()=>{\n        let env = 'node';\n        let messenger: Messenger = new Messenger(env, 0);\n        let mapper = new FretMapper(messenger);\n        assert.deepEqual(mapper.map(40), [6, 0]);\n    }));\n\n    it('maps to frets above highest note of config', test(()=>{\n        let env = 'node';\n        let messenger: Messenger = new Messenger(env, 0);\n        let mapper = new FretMapper(messenger);\n        assert.deepEqual(mapper.map(74), [1, 10]);\n    }));\n\n    it('maps to intervals directly in cofig', test(()=>{\n        let env = 'node';\n        let messenger: Messenger = new Messenger(env, 0);\n        let mapper = new FretMapper(messenger);\n        assert.deepEqual(mapper.map(57), [4, 7]);\n    }));\n\n    it('maps to intervals *not* in config', test(()=>{\n        let env = 'node';\n        let messenger: Messenger = new Messenger(env, 0);\n        let mapper = new FretMapper(messenger);\n        assert.deepEqual(mapper.map(58), [3, 3]);\n    }));\n});"]}