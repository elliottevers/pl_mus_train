{"version":3,"file":"predict.js","sourceRoot":"","sources":["predict.ts"],"names":[],"mappings":"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","sourcesContent":["import {note as n} from \"../../src/note/note\";\nimport TreeModel = require(\"tree-model\");\nimport {user_input} from \"../../src/control/user_input\";\nimport UserInputHandler = user_input.UserInputHandler;\nimport {message} from \"../../src/message/messenger\";\nimport Messenger = message.Messenger;\nimport {live} from \"../../src/live/live\";\nimport LiveClipVirtual = live.LiveClipVirtual;\nimport {segment} from \"../../src/segment/segment\";\nimport Segment = segment.Segment;\nimport {clip} from \"../../src/clip/clip\";\nimport Clip = clip.Clip;\nimport {algorithm} from \"../../src/train/algorithm\";\nimport Detect = algorithm.Detect;\nimport {freeze, thaw} from \"../../src/serialize/serialize\";\nimport TrainFreezer = freeze.TrainFreezer;\nimport TrainThawer = thaw.TrainThawer;\nimport {window} from \"../../src/render/window\";\nimport {trainer} from \"../../src/train/trainer\";\nimport Trainer = trainer.Trainer;\nimport {modes_control, modes_texture} from \"../../src/constants/constants\";\nimport POLYPHONY = modes_texture.POLYPHONY;\nimport INSTRUMENTAL = modes_control.INSTRUMENTAL;\nimport MatrixWindow = window.MatrixWindow;\nimport MONOPHONY = modes_texture.MONOPHONY;\nimport Predict = algorithm.Predict;\n\n\nlet tree: TreeModel = new TreeModel();\n\nlet segment_note_1 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            51,\n            1,\n            4,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet segment_note_2 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            51,\n            5,\n            4,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\n\n\nlet note_target_1_subtarget_1 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            51,\n            1,\n            2,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\n// let note_target_1_subtarget_2 = tree.parse(\n//     {\n//         id: -1, // TODO: hashing scheme for clip id and beat start\n//         note: new n.Note(\n//             53,\n//             1,\n//             2,\n//             90,\n//             0\n//         ),\n//         children: [\n//\n//         ]\n//     }\n// );\n\n\n\nlet note_target_2_subtarget_1 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            52,\n            3,\n            2,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\n// let note_target_2_subtarget_2 = tree.parse(\n//     {\n//         id: -1, // TODO: hashing scheme for clip id and beat start\n//         note: new n.Note(\n//             54,\n//             3,\n//             2,\n//             90,\n//             0\n//         ),\n//         children: [\n//\n//         ]\n//     }\n// );\n\n\n\nlet note_target_3_subtarget_1 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            53,\n            5,\n            2,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\n// let note_target_3_subtarget_2 = tree.parse(\n//     {\n//         id: -1, // TODO: hashing scheme for clip id and beat start\n//         note: new n.Note(\n//             55,\n//             5,\n//             2,\n//             90,\n//             0\n//         ),\n//         children: [\n//\n//         ]\n//     }\n// );\n\n\n\nlet note_target_4_subtarget_1 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            54,\n            7,\n            2,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\n// let note_target_4_subtarget_2 = tree.parse(\n//     {\n//         id: -1, // TODO: hashing scheme for clip id and beat start\n//         note: new n.Note(\n//             56,\n//             7,\n//             2,\n//             90,\n//             0\n//         ),\n//         children: [\n//\n//         ]\n//     }\n// );\n\n\nlet mode_texture = MONOPHONY;\nlet mode_control = INSTRUMENTAL;\n\nlet user_input_handler = new UserInputHandler(\n    mode_texture,\n    mode_control\n);\n\nlet env: string = 'node_for_max';\n// env = 'node';\n\n\nlet messenger = new Messenger(env, 0, 'render_predict');\n\nlet algorithm_train = new Predict(\n    user_input_handler\n);\n\nlet window_local = new MatrixWindow(\n    384,\n    384,\n    messenger,\n    algorithm_train\n);\n\n// stubs\nlet song = {\n    set_overdub: (int) => {},\n    set_session_record: (int) => {},\n    stop: () => {}\n};\n\nlet clip_user_input = {\n    fire: () => {},\n    stop: () => {},\n    set_endpoints_loop: (former, latter) => {}\n};\n\nlet notes_segments = [\n    segment_note_1,\n    segment_note_2\n];\n\nlet notes_target_clip = [\n    note_target_1_subtarget_1,\n    // note_target_1_subtarget_2,\n    note_target_2_subtarget_1,\n    // note_target_2_subtarget_2,\n    note_target_3_subtarget_1,\n    // note_target_3_subtarget_2,\n    note_target_4_subtarget_1,\n    // note_target_4_subtarget_2\n];\n\nlet segments: Segment[] = [];\n\nfor (let note of notes_segments) {\n    segments.push(\n        new Segment(\n            note\n        )\n    )\n}\n\nlet clip_dao_virtual = new LiveClipVirtual(notes_target_clip);\n\nlet clip_target = new Clip(clip_dao_virtual);\n\nlet trainer_local = new Trainer(\n    window_local,\n    user_input_handler,\n    algorithm_train,\n    clip_user_input,\n    clip_target,\n    song,\n    segments,\n    messenger\n);\n\n// test case - 2 segments, 2 notes a piece\n\ntrainer_local.init(\n\n);\n\ntrainer_local.accept_input(\n    [note_target_1_subtarget_1]\n);\n\n// trainer_local.accept_input(\n//     [note_target_1_subtarget_2]\n// );\n\ntrainer_local.accept_input(\n    [note_target_2_subtarget_1]\n);\n\n// trainer_local.accept_input(\n//     [note_target_2_subtarget_2]\n// );\n\ntrainer_local.accept_input(\n    [note_target_3_subtarget_1]\n);\n\ntrainer_local.render_window(\n\n);\n\n// trainer_local.clear_window(\n//\n// );\n//\n// let freezer = new TrainFreezer(\n//     env\n// );\n//\n// freezer.freeze(\n//     trainer_local,\n//     '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync/tk_music_ts/cache/train_detect.json'\n// );\n//\n// let thawer = new TrainThawer(\n//     env\n// );\n//\n// let config = {\n//     'window': window_local,\n//     'user_input_handler': user_input_handler,\n//     'algorithm': algorithm_train,\n//     'clip_user_input': clip_user_input,\n//     'clip_target': clip_target,\n//     'song': song,\n//     'segments': segments,\n//     'messenger': messenger,\n//     'env': env\n// };\n//\n// let train_thawed = thawer.thaw(\n//     '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync/tk_music_ts/cache/train_detect.json',\n//     config\n// );\n//\n// train_thawed.render_window(\n//\n// );"]}