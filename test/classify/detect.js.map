{"version":3,"file":"detect.js","sourceRoot":"","sources":["detect.ts"],"names":[],"mappings":"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","sourcesContent":["import {note as n} from \"../../src/note/note\";\nimport TreeModel = require(\"tree-model\");\nimport {user_input} from \"../../src/control/user_input\";\nimport UserInputHandler = user_input.UserInputHandler;\nimport {message} from \"../../src/message/messenger\";\nimport Messenger = message.Messenger;\nimport {live} from \"../../src/live/live\";\nimport LiveClipVirtual = live.LiveClipVirtual;\nimport {segment} from \"../../src/segment/segment\";\nimport Segment = segment.Segment;\nimport {clip} from \"../../src/clip/clip\";\nimport Clip = clip.Clip;\nimport {algorithm} from \"../../src/train/algorithm\";\nimport Detect = algorithm.Detect;\nimport {freeze, thaw} from \"../../src/serialize/serialize\";\nimport TrainFreezer = freeze.TrainFreezer;\nimport TrainThawer = thaw.TrainThawer;\nimport {window} from \"../../src/render/window\";\nimport {trainer} from \"../../src/train/trainer\";\nimport Trainer = trainer.Trainer;\nimport {modes_control, modes_texture} from \"../../src/constants/constants\";\nimport POLYPHONY = modes_texture.POLYPHONY;\nimport INSTRUMENTAL = modes_control.INSTRUMENTAL;\nimport MatrixWindow = window.MatrixWindow;\nimport {track} from \"../../src/track/track\";\nimport TrackVirtual = track.TrackVirtual;\nimport ClipVirtual = clip.ClipVirtual;\nimport {song} from \"../../src/song/song\";\nimport SongVirtual = song.SongVirtual;\n\n\nlet tree: TreeModel = new TreeModel();\n\nlet segment_note_1 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            51,\n            1,\n            4,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\nlet segment_note_2 = tree.parse(\n    {\n        id: -1, // TODO: hashing scheme for clip id and beat start\n        note: new n.Note(\n            51,\n            5,\n            4,\n            90,\n            0\n        ),\n        children: [\n\n        ]\n    }\n);\n\n\n\nlet note_target_1_subtarget_1 = tree.parse(\n    {\n            id: -1, // TODO: hashing scheme for clip id and beat start\n            note: new n.Note(\n                51,\n                1,\n                2,\n                90,\n                0\n            ),\n            children: [\n\n            ]\n    }\n);\n\nlet note_target_1_subtarget_2 = tree.parse(\n    {\n            id: -1, // TODO: hashing scheme for clip id and beat start\n            note: new n.Note(\n                53,\n                1,\n                2,\n                90,\n                0\n            ),\n            children: [\n\n            ]\n    }\n);\n\n\n\nlet note_target_2_subtarget_1 = tree.parse(\n    {\n            id: -1, // TODO: hashing scheme for clip id and beat start\n            note: new n.Note(\n                52,\n                3,\n                2,\n                90,\n                0\n            ),\n            children: [\n\n            ]\n    }\n);\n\nlet note_target_2_subtarget_2 = tree.parse(\n    {\n            id: -1, // TODO: hashing scheme for clip id and beat start\n            note: new n.Note(\n                54,\n                3,\n                2,\n                90,\n                0\n            ),\n            children: [\n\n            ]\n    }\n);\n\n\n\nlet note_target_3_subtarget_1 = tree.parse(\n    {\n            id: -1, // TODO: hashing scheme for clip id and beat start\n            note: new n.Note(\n                53,\n                5,\n                2,\n                90,\n                0\n            ),\n            children: [\n\n            ]\n    }\n);\n\nlet note_target_3_subtarget_2 = tree.parse(\n    {\n            id: -1, // TODO: hashing scheme for clip id and beat start\n            note: new n.Note(\n                55,\n                5,\n                2,\n                90,\n                0\n            ),\n            children: [\n\n            ]\n    }\n);\n\n\n\nlet note_target_4_subtarget_1 = tree.parse(\n    {\n            id: -1, // TODO: hashing scheme for clip id and beat start\n            note: new n.Note(\n                54,\n                7,\n                2,\n                90,\n                0\n            ),\n            children: [\n\n            ]\n    }\n);\n\nlet note_target_4_subtarget_2 = tree.parse(\n    {\n            id: -1, // TODO: hashing scheme for clip id and beat start\n            note: new n.Note(\n                56,\n                7,\n                2,\n                90,\n                0\n            ),\n            children: [\n\n            ]\n    }\n);\n\n\nlet mode_texture = POLYPHONY;\nlet mode_control = INSTRUMENTAL;\n\nlet user_input_handler = new UserInputHandler(\n    mode_texture,\n    mode_control\n);\n\nlet env: string = 'node_for_max';\n// env = 'node';\n\n\nlet messenger = new Messenger(env, 0, 'render_detect');\n\nlet algorithm_train = new Detect(\n);\n\nlet window_local = new MatrixWindow(\n    384,\n    384,\n    messenger\n);\n\nlet song = new SongVirtual();\n\n// let num_clip_slots = 2;\n\nlet track_user_input = new TrackVirtual();\n\ntrack_user_input.set_clip_at_index(\n    new ClipVirtual(\n        segment_note_1\n    ),\n    0\n);\n\ntrack_user_input.set_clip_at_index(\n    new ClipVirtual(\n        segment_note_2\n    ),\n    1\n);\n\nlet track_target = new TrackVirtual();\n\ntrack_target.set_clip_at_index(\n    new ClipVirtual(\n        note_target_1_subtarget_1,\n        note_target_1_subtarget_2,\n        note_target_2_subtarget_1,\n        note_target_2_subtarget_2\n    ),\n    0\n);\n\ntrack_target.set_clip_at_index(\n    new ClipVirtual(\n        note_target_3_subtarget_1,\n        note_target_3_subtarget_2,\n        note_target_4_subtarget_1,\n        note_target_4_subtarget_2\n    ),\n    1\n);\n\n// let clip_user_input_async = {\n//     fire: () => {},\n//     stop: () => {},\n//     set_endpoints_loop: (former, latter) => {}\n// };\n//\n// let clip_user_input_synchronous = {\n//     fire: () => {},\n//     stop: () => {},\n//     set_endpoints_loop: (former, latter) => {}\n// };\n\n// let notes_segments = [\n//     segment_note_1,\n//     segment_note_2\n// ];\n\n// let notes_target_clip = [\n//     note_target_1_subtarget_1,\n//     note_target_1_subtarget_2,\n//     note_target_2_subtarget_1,\n//     note_target_2_subtarget_2,\n//     note_target_3_subtarget_1,\n//     note_target_3_subtarget_2,\n//     note_target_4_subtarget_1,\n//     note_target_4_subtarget_2\n// ];\n\n// let segments: Segment[] = [];\n//\n// for (let note of notes_segments) {\n//     segments.push(\n//         new Segment(\n//             note\n//         )\n//     )\n// }\n\n// let clip_dao_virtual = new LiveClipVirtual(notes_target_clip);\n//\n// let clip_target = new Clip(clip_dao_virtual);\n\nlet trainer_local = new Trainer(\n    window_local,\n    user_input_handler,\n    algorithm_train,\n    track_target,\n    track_user_input\n    song,\n    messenger\n);\n\n// test case - 2 segments, 2 notes a piece\n\ntrainer_local.init(\n\n);\n\ntrainer_local.accept_input(\n    [note_target_1_subtarget_1]\n);\n\ntrainer_local.accept_input(\n    [note_target_1_subtarget_2]\n);\n\ntrainer_local.accept_input(\n    [note_target_2_subtarget_1]\n);\n\ntrainer_local.accept_input(\n    [note_target_2_subtarget_2]\n);\n\ntrainer_local.accept_input(\n    [note_target_3_subtarget_1]\n);\n\ntrainer_local.render_window(\n\n);\n\n// trainer_local.clear_window(\n//\n// );\n//\n// let freezer = new TrainFreezer(\n//     env\n// );\n//\n// freezer.freeze(\n//     trainer_local,\n//     '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync/tk_music_ts/cache/train_detect.json'\n// );\n//\n// let thawer = new TrainThawer(\n//     env\n// );\n//\n// let config = {\n//     'window': window_local,\n//     'user_input_handler': user_input_handler,\n//     'algorithm': algorithm_train,\n//     'clip_user_input': clip_user_input,\n//     'clip_user_input_synchronous': clip_user_input_synchronous,\n//     'notes_target': notes_target_clip,\n//     // 'clip_target': clip_target,\n//     'song': song,\n//     'segments': segments,\n//     'messenger': messenger,\n//     'env': env\n// };\n//\n// let train_thawed = thawer.thaw(\n//     '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync/tk_music_ts/cache/train_detect.json',\n//     config\n// );\n//\n// train_thawed.render_window(\n//\n// );"]}