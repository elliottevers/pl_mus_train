{"version":3,"file":"harmony.js","sourceRoot":"","sources":["harmony.ts"],"names":[],"mappings":"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","sourcesContent":["import {note as n} from \"../note/note\";\nimport TreeModel = require(\"tree-model\");\nimport {target} from \"../target/target\";\nimport {history} from \"../history/history\";\nconst _ = require('underscore');\n\nexport namespace harmony {\n    import TypeTarget = history.TypeTarget;\n\n    export class Harmony {\n        public static group(notes: TreeModel.Node<n.Note>[]): TreeModel.Node<n.Note>[][] {\n            // TODO: should probably factor in beat end as well, but this works for now\n            let grouped = _.groupBy(notes, (note) => {\n                return note.model.note.beat_start\n            });\n\n            let notes_grouped: TreeModel.Node<n.Note>[][] = [];\n\n            for (let beat_start in grouped) {\n                notes_grouped.push(\n                    grouped[beat_start]\n                )\n            }\n\n            return notes_grouped\n        }\n\n        public static monophonify(notes: TreeModel.Node<n.Note>[]): TypeTarget {\n            function compare(note_former,note_latter) {\n                if (note_former.model.note.beat_start < note_latter.model.note.beat_start)\n                    return -1;\n                if (note_former.model.note.beat_start > note_latter.model.note.beat_start)\n                    return 1;\n                return 0;\n            }\n\n            notes.sort(compare);\n\n            let length_beats = notes[notes.length - 1].model.note.get_beat_end() - notes[0].model.note.beat_start;\n\n            let duration_monophonic = length_beats/notes.length;\n\n            let beat_current = notes[0].model.note.beat_start;\n\n            let notes_monophonic: TreeModel.Node<n.Note>[] = [];\n\n            let tree: TreeModel = new TreeModel();\n\n            for (let note of notes) {\n                notes_monophonic.push(\n                    tree.parse(\n                        {\n                            id: -1, // TODO: hashing scheme for clip id and beat start\n                            note: new n.Note(\n                                note.model.note.pitch,\n                                beat_current,\n                                duration_monophonic,\n                                note.model.note.velocity,\n                                note.model.note.muted\n                            ),\n                            children: [\n\n                            ]\n                        }\n                    )\n                );\n                beat_current = beat_current + duration_monophonic\n            }\n\n            return notes_monophonic;\n        }\n\n        public static arpeggiate(notes) {\n            let chords_grouped: TypeTarget[] = Harmony.group(\n                notes\n            );\n\n            let chords_monophonified: TypeTarget[] = [];\n\n            for (let chord of chords_grouped) {\n                let notes_monophonified: TypeTarget = Harmony.monophonify(\n                    chord\n                );\n\n                chords_monophonified.push(notes_monophonified)\n            }\n\n            return chords_monophonified;\n        }\n    }\n}\n"]}