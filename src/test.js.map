{"version":3,"file":"test.js","sourceRoot":"","sources":["test.ts"],"names":[],"mappings":"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","sourcesContent":["import {log} from \"./log/logger\";\nimport Logger = log.Logger;\nimport {message} from \"./message/messenger\";\nimport Messenger = message.Messenger;\nimport {execute} from \"./execute/executor\";\nimport SynchronousDagExecutor = execute.SynchronousDagExecutor;\nimport CallableMax = execute.CallableMax;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nenum Mode {\n    Stream = 'stream',\n    BulkWrite = 'bulk_write',\n    Query = 'query'\n}\n\nlet executor: SynchronousDagExecutor;\n\nlet messenger_execute: Messenger;\n\nlet logger: Logger;\n\nlet scale_factor: number;\n\nlet length_coll: number;\n\nlet max_coll: number;\n\nlet min_coll: number;\n\nlet channel_execute: number = 0;\n\nlet done = false;\n\n\nlet returns = (index_callable, val_return) => {\n\n    if (done) {\n        return;\n    }\n\n    executor.return(index_callable, val_return);\n\n    let next_result = executor.next();\n\n    if (!next_result.done) {\n\n        let next_callable = next_result.value['callable'];\n\n        next_callable.call(next_result.value['index']);\n\n        return;\n    }\n\n    done = true;\n\n    logger.log('done');\n};\n\n\nlet main = () => {\n\n    done = false;\n\n    messenger_execute = new Messenger(env, channel_execute);\n\n    logger = new Logger(env);\n\n    let hook_set_length = (val_return) => {\n        length_coll = val_return;\n    };\n\n    let hook_set_min = (val_return) => {\n        min_coll = val_return;\n    };\n\n    let hook_set_max = (val_return) => {\n        max_coll = val_return;\n    };\n\n    let hook_calculate_scale_factor = (arg) => {\n        return max_coll * 2\n    };\n\n    let hook_get_length = (arg) => {\n        return length_coll\n    };\n\n    executor = new SynchronousDagExecutor(\n            [\n            new CallableMax( // 0\n                Mode.Query,\n                null,\n                null,\n                null,\n                null,\n                messenger_execute\n            ),\n            new CallableMax( // 1\n                'length',\n                null,\n                null,\n                null,\n                null,\n                messenger_execute\n            ),\n            new CallableMax( // 2\n                'length',\n                null,\n                hook_set_length,\n                null,\n                null,\n                messenger_execute\n            ),\n            new CallableMax( // 3\n                'min',\n                null,\n                null,\n                null,\n                null,\n                messenger_execute\n            ),\n            new CallableMax( // 4\n                'min',\n                null,\n                hook_set_min,\n                null,\n                null,\n                messenger_execute\n            ),\n            new CallableMax( // 5\n                'max',\n                null,\n                null,\n                null,\n                null,\n                messenger_execute\n            ),\n            new CallableMax( // 6\n                'max',\n                null,\n                hook_set_max,\n                null,\n                null,\n                messenger_execute\n            ),\n            new CallableMax( // 7\n                Mode.BulkWrite,\n                null,\n                null,\n                null,\n                null,\n                messenger_execute\n            ),\n            new CallableMax( // 8\n                null,\n                null,\n                null,\n                hook_calculate_scale_factor,\n                null,\n                messenger_execute\n            ),\n            new CallableMax( // 9\n                null,\n                null,\n                null,\n                hook_get_length,\n                null,\n                messenger_execute\n            ),\n            new CallableMax( // 10\n                0,\n                null,\n                null,\n                null,\n                null,\n                messenger_execute\n            ),\n            new CallableMax( // 11\n                'clear',\n                null,\n                null,\n                null,\n                null,\n                messenger_execute\n            ),\n            new CallableMax( // 12 - initialize buffer size\n                null,\n                null,\n                null,\n                hook_get_length,\n                null,\n                messenger_execute\n            ),\n            new CallableMax( // 13\n                'dump',\n                null,\n                null,\n                null,\n                null,\n                messenger_execute\n            ),\n            new CallableMax( // 14 - send size of buffer out of outlet\n                null,\n                null,\n                null,\n                hook_get_length,\n                null,\n                messenger_execute\n            ),\n            new CallableMax( // 15\n                Mode.Stream,\n                null,\n                null,\n                null,\n                null,\n                messenger_execute\n            ),\n        ],\n        messenger_execute\n    );\n\n    executor.run()\n};\n\nlet test = () => {\n\n};\n\n// test();\n\nif (typeof Global !== \"undefined\") {\n    Global.test = {};\n    Global.test.main = main;\n    Global.test.returns = returns;\n    Global.test.test = test;\n}\n"]}