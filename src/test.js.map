{"version":3,"file":"test.js","sourceRoot":"","sources":["test.ts"],"names":[],"mappings":"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","sourcesContent":["import {log} from \"./log/logger\";\nimport Logger = log.Logger;\nimport {message} from \"./message/messenger\";\nimport Messenger = message.Messenger;\nimport {execute} from \"./execute/executor\";\nimport SynchronousDagExecutor = execute.SynchronousDagExecutor;\nimport CallableMax = execute.CallableMax;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nenum Mode {\n    Stream = 'stream',\n    BulkWrite = 'bulk_write',\n    Query = 'query'\n}\n\nlet executor: SynchronousDagExecutor;\n\nlet messenger: Messenger;\n\nlet scale_factor: number;\n\nlet length_coll: number;\n\nlet max_coll: number;\n\nlet min_coll: number;\n\nlet initial = 2;\n\nlet called_pre_call_hook = false;\n\nlet called_post_return_hook = false;\n\nlet final: number;\n\n\nlet returns = (index_callable, val_return) => {\n\n    executor.return(index_callable, val_return);\n\n    let next_result = executor.next();\n\n    if (!next_result.done) {\n\n        let next_callable = next_result.value['callable'];\n\n        next_callable.call(next_result.value['index'])\n    }\n\n    messenger.message(['done'])\n};\n\nlet main = () => {\n    // set router to query mode\n\n    // query coll length\n\n    // wait for response, with guarantee that no other responses could come back except that one\n\n    // query coll max\n\n    // wait\n\n    // query coll min\n\n    // wait\n\n    // calculate metadata\n\n    // set scale factor\n\n    // set router to bulk write mode\n\n    // send coll \"dump\"\n\n    // after last value is written, set route to stream mode\n\n    let hook_preprocess_arg = (arg) => {\n        return arg*3\n    };\n\n    let hook_pre_call = (arg) => {\n        called_pre_call_hook = true;\n    };\n\n    let hook_post_return = (val_return) => {\n        called_post_return_hook = true;\n        final = val_return;\n    };\n\n    let hook_postprocess_return = (val_return) => {\n        return val_return\n    };\n\n    let hook_preprocess_arg_set_final = (arg) => {\n        return final\n    };\n\n    messenger = new Messenger(env, 0);\n\n    executor = new SynchronousDagExecutor([\n        new CallableMax(\n            initial,\n            hook_pre_call,\n            hook_post_return,\n            hook_preprocess_arg,\n            hook_postprocess_return,\n            messenger\n        ),\n        new CallableMax(\n            null,\n            null,\n            null,\n            hook_preprocess_arg_set_final,\n            null,\n            messenger\n        )\n    ]);\n\n    executor.run()\n};\n\nlet test = () => {\n    main();\n    returns(0, 24);\n};\n\n// test();\n\nif (typeof Global !== \"undefined\") {\n    Global.test = {};\n    Global.test.main = main;\n    Global.test.returns = returns;\n    Global.test.test = test;\n}\n"]}