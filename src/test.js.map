{"version":3,"file":"test.js","sourceRoot":"","sources":["test.ts"],"names":[],"mappings":"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","sourcesContent":["import {log} from \"./log/logger\";\nimport Logger = log.Logger;\nimport {message} from \"./message/messenger\";\nimport Messenger = message.Messenger;\nimport {execute} from \"./execute/executor\";\nimport SynchronousDagExecutor = execute.SynchronousDagExecutor;\nimport CallableMax = execute.CallableMax;\n// import {Target} from \"./target/target\";\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nenum Mode {\n    Stream = 'stream',\n    BulkWrite = 'bulk_write',\n    Query = 'query'\n}\n\nlet executor: SynchronousDagExecutor;\n\nlet messenger: Messenger;\n\nlet scale_factor: number;\n\nlet length_coll: number;\n\nlet max_coll: number;\n\nlet min_coll: number;\n\nlet testing = 1;\n\n\n// // TODO: sends message with (name of method being executed), ...\n// let executor = new SynchronousDagExecutor(\n//     {'set_mode': Mode.Query},\n//     {'get_length_coll': null},\n//     {'get_min_coll': null},\n//     {'get_max_coll': null},\n//     {'set_scale_factor': scale_factor},\n//     {'set_mode': Mode.BulkWrite},\n//     {'dump_coll': null},\n//     {'set_mode': Mode.Stream}\n// );\n\n// let process_response = (envoker, response) => {\n//\n// };\n\nlet init = () => {\n    call_set_mode(Mode.Query)\n};\n\nlet call_set_mode = (mode) => {\n    switch (mode) {\n        case Mode.Query: {\n            messenger.message(['set_mode', Mode.Query]);\n            break;\n        }\n\n        case Mode.BulkWrite: {\n            messenger.message(['set_mode', Mode.BulkWrite]);\n            break;\n        }\n\n        case Mode.Stream: {\n            messenger.message(['set_mode', Mode.Stream]);\n            break;\n        }\n    }\n};\n\nlet return_set_mode = (arg_invoker, val_return) => {\n    switch (arg_invoker) {\n        case Mode.Query: {\n            call_get_length();\n            break;\n        }\n\n        case Mode.BulkWrite: {\n            call_dump_coll();\n            break;\n        }\n\n        case Mode.Stream: {\n            break;\n        }\n\n    }\n};\n\n// let call_set_mode_query = () => {\n//     messenger.message(['set_mode', Mode.Query])\n// };\n//\n// let return_set_mode = (val) => {\n//     call_get_length()\n// };\n\nlet call_get_length = () => {\n    messenger.message(['get_length', 'length'])\n};\n\nlet return_get_length = (val) => {\n    length_coll = val;\n    call_get_min()\n};\n\nlet call_get_min = () => {\n    messenger.message(['get_min', 'min'])\n};\n\nlet return_get_min = (val) => {\n    min_coll = val;\n    call_get_max()\n};\n\nlet call_get_max = () => {\n    messenger.message(['get_max', 'max'])\n};\n\nlet return_get_max = (val) => {\n    min_coll = val;\n    call_set_scale_factor()\n};\n\nlet call_set_scale_factor = () => {\n    messenger.message(['set_scale_factor', max_coll + 100])\n};\n\nlet return_set_scale_factor = (val) => {\n    call_set_mode(Mode.BulkWrite)\n};\n\n// let call_set_mode_bulk_write = () => {\n//     messenger.message(['set_mode', Mode.BulkWrite])\n// };\n//\n// let return_set_mode_bulk_write = (val) => {\n//     call_dump_coll()\n// };\n\nlet call_dump_coll = () => {\n    messenger.message(['dump_coll'])\n};\n\nlet return_dump_coll = (val) => {\n    call_set_mode(Mode.Stream)\n};\n\n// let call_set_mode_stream = () => {\n//     messenger.message(['set_mode', Mode.Stream])\n// };\n\n// [\"test1\", \"test2\"].forEach(function(name){eval(name + \"()\")})\n\nlet invoke_sequentially = (name_funcs: string[]) => {\n    name_funcs.forEach(function(name){\n        // send message\n        // wait for ack\n        // eval(name + \"()\")\n    })\n};\n\n// declare let __router: any;\n//\n// declare let __coll: any;\n\n// let receives = (name_method, val_return) => {\n//     executor.return(name_method, val_return)\n//\n// };\n//\n// let sends = (name_method, arg_method) => {\n//     executor.call(name_method, arg_method)\n// };\n\nlet initial = 2;\n\n// let postprocess_return_arg = 5;\n\nlet called_pre_call_hook = false;\n\nlet called_post_return_hook = false;\n\nlet final: number;\n\n\nlet returns = (index_callable, val_return) => {\n\n    executor.return(index_callable, val_return);\n\n    let next_result = executor.next();\n\n    if (!next_result.done) {\n\n        let next_callable = next_result.value['callable'];\n\n        next_callable.call(next_result.value['index'])\n    }\n\n    messenger.message(['done'])\n};\n\n// let calls = (index_callable, arg) => {\n//\n// };\n\nlet main = () => {\n    // set router to query mode\n\n    // query coll length\n\n    // wait for response, with guarantee that no other responses could come back except that one\n\n    // query coll max\n\n    // wait\n\n    // query coll min\n\n    // wait\n\n    // calculate metadata\n\n    // set scale factor\n\n    // set router to bulk write mode\n\n    // send coll \"dump\"\n\n    // after last value is written, set route to stream mode\n\n    // post('testing...');\n    // post('\\n');\n    // post(this.testing);\n\n\n    // let call_getter = (arg) => {\n    //     var_getter\n    // };\n\n    // let times_5 = (arg) => {\n    //     return arg**2\n    // };\n\n    let hook_preprocess_arg = (arg) => {\n        return arg*3\n    };\n\n    let hook_pre_call = (arg) => {\n        called_pre_call_hook = true;\n    };\n\n    let hook_post_return = (val_return) => {\n        called_post_return_hook = true;\n        final = val_return;\n    };\n\n    let hook_postprocess_return = (val_return) => {\n        return val_return\n    };\n\n    let hook_preprocess_arg_set_final = (arg) => {\n        return final\n    };\n\n    messenger = new Messenger(env, 0);\n\n    executor = new SynchronousDagExecutor([\n        new CallableMax(\n            initial,\n            hook_pre_call,\n            hook_post_return,\n            hook_preprocess_arg,\n            hook_postprocess_return,\n            messenger\n        ),\n        new CallableMax(\n            null,\n            null,\n            null,\n            hook_preprocess_arg_set_final,\n            null,\n            messenger\n        )\n    ]);\n\n    executor.run()\n\n    // this.name_func = name_func;\n    // this.arg = arg;\n    // this.func_pre_call = func_pre_call;\n    // this.func_post_return = func_post_return;\n    // this.func_preprocess_arg = func_preprocess_arg;\n    // this.func_postprocess_return_val = func_postprocess_return_val;\n    // this.messenger = messenger;\n\n        // {'set_mode': Mode.Query},\n        // {'get_length_coll': null},\n        // {'get_min_coll': null},\n        // {'get_max_coll': null},\n        // {'set_scale_factor': scale_factor},\n        // {'set_mode': Mode.BulkWrite},\n        // {'dump_coll': null},\n        // {'set_mode': Mode.Stream}\n    // );\n\n\n    //\n    // let executor = new SynchronousDagExecutor(\n    //     {'set_mode': Mode.Query},\n    //     {'get_length_coll': null},\n    //     {'get_min_coll': null},\n    //     {'get_max_coll': null},\n    //     {'set_scale_factor': scale_factor},\n    //     {'set_mode': Mode.BulkWrite},\n    //     {'dump_coll': null},\n    //     {'set_mode': Mode.Stream}\n    // );\n\n\n};\n\nlet test = () => {\n    main();\n    returns(0, 24);\n};\n\ntest();\n\n// let variable = 'outside';\n//\n// let to_invoke = () => {\n//     console.log(variable)\n// };\n//\n// class Inside {\n//     func: any;\n//     constructor(func) {\n//         this.func = func;\n//     }\n//\n//     invoke() {\n//         let variable = 'inside';\n//         this.func.call()\n//     }\n// }\n//\n// let thing = new Inside(to_invoke);\n//\n// variable = 'outside changed';\n//\n// thing.invoke();\n\nlet set_state_channels = (mode) => {\n    // sends messages to configure gates\n};\n\nif (typeof Global !== \"undefined\") {\n    Global.test = {};\n    Global.test.main = main;\n    Global.test.test = test;\n}\n"]}