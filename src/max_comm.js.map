{"version":3,"file":"max_comm.js","sourceRoot":"","sources":["max_comm.ts"],"names":[],"mappings":"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","sourcesContent":["// declare let Global: any;\n// TODO: make dedicated library object for the following\n// import {message} from \"./message/messenger\";\n// import Messenger = message.Messenger;\n// import {log} from \"./log/logger\";\n// import Logger = log.Logger;\n// import {cli} from \"./cli/cli\";\n\nimport {cli} from \"./cli/cli\";\nimport {message} from \"./message/messenger\";\nimport Messenger = message.Messenger;\nimport {log} from \"./log/logger\";\nimport Logger = log.Logger;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'node';\n\nif (env === 'max') {\n    autowatch = 1;\n}\n\nlet script: cli.Script;\n\nlet test = () => {\n    set_arg('NA', 'argument_test_val');\n    set_option('o', 'option_test_val');\n    set_flag( 'f', 1);\n};\n\nlet run = () => {\n    script.run()\n};\n\nlet init = () => {\n    let messenger = new Messenger(env, 0);\n    let logger = new Logger(env);\n\n    let arg = new cli.Arg('NA');\n    let option = new cli.Option('o', false);\n    let flag = new cli.Flag('f');\n\n    let path_interpreter = '/Users/elliottevers/Documents/Documents - Elliott’s MacBook Pro/git-repos.nosync/music/.venv_master_36/bin/python';\n\n    let path_script = '/Users/elliottevers/Documents/Documents - Elliott’s MacBook Pro/git-repos.nosync/music/sandbox/max_comm.py';\n\n    script = new cli.Script(\n        path_interpreter,\n        path_script,\n        [flag],\n        [option],\n        [arg],\n        messenger\n    );\n\n    // let executable_max_comm = new cli.Executable(\n    //     '/usr/local/bin/youtube-dl',\n    //     [flag_audio_only],\n    //     [option_outfile],\n    //     [arg_url],\n    //     messenger\n    // );\n\n    // executables.push(executable_youtube_dl);\n};\n\n\n\n// let messenger: Messenger;\n//\n// let logger: Logger;\n//\n// let outlet_shell_obj = 0;\n//\n// let executables = [];\n//\n// let executable: cli.Executable;\n//\n// let dir = '/Users/elliottevers/Documents/git-repos.nosync/music/';\n//\n// let path_interpreter = dir + '.venv_36_test/bin/python';\n\n\n\n\n// import argparse\n// import json\n//\n//\n// def main(args):\n// print('Hello, %s!' % args.name)\n// print(args.middle)\n// print(args.x)\n//\n// test_json = {\n//     \"a list\": [\n//         1,\n//         42,\n//         3.141,\n//         1337,\n//         \"help\",\n//         \"€\"\n//     ],\n//     \"a string\": \"bla\",\n//     \"another dict\": {\n//         \"foo\": \"bar\",\n//         \"key\": \"value\",\n//         \"the answer\": 42\n//     }\n// }\n// with open('sandbox/data.json', 'w') as outfile:\n// json.dump(test_json, outfile)\n//\n//\n// if __name__ == '__main__':\n// parser = argparse.ArgumentParser(description='Say hello')\n//\n// parser.add_argument('name', help='your name, enter it')\n//\n// # should be optional\n// parser.add_argument('--middle', help='your MIDDLE name, enter it')\n//\n// parser.add_argument('-x', help='audio only?', action='store_true')\n//\n// args = parser.parse_args()\n//\n// main(args)\n\n\n\n// let main = () => {\n//     parser.add_argument('name', help='your name, enter it');\n//\n//     parser.add_argument('--middle', help='your MIDDLE name, enter it');\n//\n//     parser.add_argument('-x', help='audio only?', action='store_true');\n// };\n\n\nlet set_arg = (name_arg, val_arg) => {\n    // post(path_executable);\n    // post(name_arg);\n    // post(val_arg);\n    script.get_arg(name_arg).set(val_arg);\n};\n\nlet set_flag = (name_flag, val_flag) => {\n    // post(path_executable);\n    // post(name_flag);\n    // post(val_flag);\n    script.get_flag(name_flag).set(val_flag);\n};\n\nlet set_option = (name_opt, val_opt) => {\n    // post(path_executable);\n    // post(name_opt);\n    // post(val_opt);\n    script.get_opt(name_opt).set(val_opt);\n};\n\ninit();\ntest();\nrun();\n\n\n// if __name__ == '__main__':\n// parser = argparse.ArgumentParser(description='Say hello')\n//\n// parser.add_argument('name', help='your name, enter it')\n//\n// # should be optional\n// parser.add_argument('--middle', help='your MIDDLE name, enter it')\n//\n// parser.add_argument('-x', help='audio only?', action='store_true')\n//\n// args = parser.parse_args()\n//\n// main(args)\n\n\n\n// let init = () => {\n//\n//     messenger = new Messenger(env, outlet_shell_obj);\n//     logger = new Logger(env);\n//\n//     let arg_url = new cli.Arg('url');\n//     let option_outfile = new cli.Option('o', true);\n//     let flag_audio_only = new cli.Flag('x');\n//\n//     let executable_youtube_dl = new cli.Executable(\n//         '/usr/local/bin/youtube-dl',\n//         [flag_audio_only],\n//         [option_outfile],\n//         [arg_url],\n//         messenger\n//     );\n//\n//     executables.push(executable_youtube_dl);\n//\n//\n//     let arg_file_out = new cli.Arg('file_out', false, true);\n//\n//     let option_file_input = new cli.Option('i', false, true);\n//\n//     let executable_ffmpeg = new cli.Executable(\n//         '/usr/local/bin/ffmpeg',\n//         [],\n//         [option_file_input],\n//         [arg_file_out],\n//         messenger\n//     );\n//\n//     executables.push(executable_ffmpeg);\n//\n// };\n//\n// let run_executable = (path_executable) => {\n//     _lookup_executable(path_executable).run()\n// };\n//\n//\n// let set_arg = (path_executable, name_arg, val_arg) => {\n//     post(path_executable);\n//     post(name_arg);\n//     post(val_arg);\n//     _lookup_executable(path_executable).get_arg(name_arg).set(val_arg);\n// };\n//\n// let set_flag = (path_executable, name_flag, val_flag) => {\n//     post(path_executable);\n//     post(name_flag);\n//     post(val_flag);\n//     _lookup_executable(path_executable).get_flag(name_flag).set(val_flag);\n// };\n//\n// let set_option = (path_executable, name_opt, val_opt) => {\n//     post(path_executable);\n//     post(name_opt);\n//     post(val_opt);\n//     _lookup_executable(path_executable).get_opt(name_opt).set(val_opt);\n// };\n//\n// let _lookup_executable = (path_executable) => {\n//     return executables.filter((executable) => {\n//         return executable.get_command_exec() === path_executable;\n//     })[0];\n// };\n//\n// let log_cmd = (path_executable) => {\n//     logger.log(\n//         _lookup_executable(path_executable).get_run_command().split(' ')\n//     );\n//     // return _lookup_executable(path_executable).get_run_command().split(' ')\n//\n// };\n//\n// let test = () => {\n//     let git_repo = '/Users/elliottevers/Documents/Documents - Elliott’s MacBook Pro/git-repos.nosync';\n//\n//     set_arg('/usr/local/bin/youtube-dl', 'url', 'https://www.youtube.com/watch?v=CbkvLYrEvF4');\n//     set_option('/usr/local/bin/youtube-dl', 'o', git_repo + '/audio/youtube/tswift_teardrops.%(ext)s');\n//     set_flag('/usr/local/bin/youtube-dl', 'x', 1);\n//\n//     // messenger.message(log_cmd('/usr/local/bin/youtube-dl'));\n//\n//\n//     set_arg('/usr/local/bin/ffmpeg', 'file_out', git_repo + '/audio/youtube/tswift_teardrops.mp3');\n//     set_option('/usr/local/bin/ffmpeg', 'i', git_repo + '/audio/youtube/tswift_teardrops.*');\n//\n//     // messenger.message(log_cmd('/usr/local/bin/ffmpeg'));\n// };\n\n\nif (typeof Global !== \"undefined\") {\n    Global.command_shell = {};\n    Global.command_shell.set_arg = set_arg;\n    Global.command_shell.set_option = set_option;\n    Global.command_shell.set_flag = set_flag;\n    Global.command_shell.init = init;\n    Global.command_shell.run = run;\n}\n"]}