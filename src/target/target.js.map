{"version":3,"file":"target.js","sourceRoot":"","sources":["target.ts"],"names":[],"mappings":"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","sourcesContent":["import TreeModel = require(\"tree-model\");\nimport {note as n} from \"../note/note\"\nimport {phrase as p} from \"../phrase/phrase\"\nimport {trainer} from \"../train/trainer\";\n\n\nexport namespace target {\n\n    // let min_width_clip = 0.25;\n\n    // export type TargetType = TreeModel.Node<n.Note>[]\n\n    import MatrixIterator = trainer.MatrixIterator;\n\n    export class Subtarget {\n        note: TreeModel.Node<n.Note>;\n\n        constructor(note: TreeModel.Node<n.Note>) {\n            this.note = note;\n        }\n\n\n    }\n\n    export class SubtargetIterator {\n\n        subtargets: Subtarget[];\n\n        constructor(subtargets: Subtarget[]) {\n            this.subtargets = subtargets;\n        }\n\n    }\n\n    export class Target {\n        constructor(subtarget_iterator: SubtargetIterator) {\n            this.subtarget_iterator = subtarget_iterator;\n        }\n    }\n\n    export class TargetIterator {\n        // need SegmentTargetable -> TargetIterator\n\n        targets: Target[];\n\n        constructor(targets: Target[]) {\n            this.targets = targets;\n        }\n\n        public static from_segment_targetable(segment_targetable: SegmentTargetable): TargetIterator {\n            return\n        }\n    }\n\n    // export class Target {\n\n        // notes_grouped: TreeModel.Node<n.Note>[][];\n        //\n        // constructor(notes_grouped: TreeModel.Node<n.Note>[][]) {\n        //     this.notes_grouped = notes_grouped\n        // }\n\n        // subtargets: Subtarget[]\n\n\n\n    //     note: TreeModel.Node<n.Note>;\n    //     phrase: p.Phrase;\n    //\n    //     constructor(note: TreeModel.Node<n.Note>, phrase: p.Phrase) {\n    //         this.note = note;\n    //         this.phrase = phrase;\n    //     }\n    //\n    //     public value(): number {\n    //         return this.note.model.pitch;\n    //     }\n    //\n    //     public get_note_interval_beats(): number[] {\n    //         return this.note.model.get_interval_beats();\n    //     }\n    //\n    //     public get_phrase_interval_beats(): number[] {\n    //         return this.phrase.get_interval_beats();\n    //     }\n    //\n    //     // TODO: annotate\n    //     public set_note_interval_beats(note_interval_beats: number[], reverse: boolean) {\n    //         let beat_lower = note_interval_beats[0];\n    //         let beat_upper = note_interval_beats[1];\n    //\n    //         if (beat_upper - beat_lower < min_width_clip) {\n    //             beat_upper = beat_lower + min_width_clip;\n    //         }\n    //\n    //         if (reverse) {\n    //             this.phrase.clip.set_clip_endpoint_upper(beat_upper);\n    //             this.phrase.clip.set_clip_endpoint_lower(beat_lower);\n    //         } else {\n    //             this.phrase.clip.set_clip_endpoint_lower(beat_lower);\n    //             this.phrase.clip.set_clip_endpoint_upper(beat_upper);\n    //         }\n    //     }\n    //\n    //     public set_phrase_interval_beats(phrase_interval_beats: number[], reverse: boolean) {\n    //         let beat_lower = phrase_interval_beats[0];\n    //         let beat_upper = phrase_interval_beats[1];\n    //         if (reverse) {\n    //             this.phrase.clip.set_loop_bracket_upper(beat_upper);\n    //             this.phrase.clip.set_loop_bracket_lower(beat_lower);\n    //         } else {\n    //             this.phrase.clip.set_loop_bracket_lower(beat_lower);\n    //             this.phrase.clip.set_loop_bracket_upper(beat_upper);\n    //         }\n    //     }\n    // }\n    //\n    // export class TargetIterator {\n    //     phrase_iterator: p.PhraseIterator;\n    //     i: number;\n    //     current: any;\n    //\n    //     // TODO: figure out how to annotate\n    //     next() {\n    //         this.i += 1;\n    //\n    //         var phrase_current = this.phrase_iterator.current();\n    //\n    //         var note_result_next = phrase_current.note_iterator.next();\n    //\n    //         var note_next = note_result_next.value;\n    //\n    //         if (!note_result_next.done) {\n    //             this.current = new Target(note_next, phrase_current);\n    //             return {\n    //                 value: this.current,\n    //                 done: false\n    //             }\n    //         }\n    //\n    //         var phrase_result_next = this.phrase_iterator.next();\n    //\n    //         if (!phrase_result_next.done) { // note_next.done is true by now\n    //             var phrase_next = this.phrase_iterator.current();\n    //\n    //             note_result_next = phrase_next.note_iterator.next();\n    //\n    //             note_next = note_result_next.value;\n    //\n    //             this.current = new Target(note_next, phrase_next);\n    //\n    //             return {\n    //                 value: this.current,\n    //                 done: false\n    //             }\n    //         }\n    //\n    //         return {\n    //             value: null,\n    //             done: true\n    //         }\n    //     }\n    //\n    //     set_note_interval_beats(): void {\n    //         // TODO: use direction in logic\n    //         if (this.phrase_iterator.current() !== null) {\n    //             var direction_forward = this.phrase_iterator.current().note_iterator.direction_forward;\n    //         }\n    //         var reverse;\n    //         var note_interval = this.current.get_note_interval_beats();\n    //\n    //         if (this.i === 0) {\n    //             this.current.set_note_interval_beats(note_interval);\n    //         } else {\n    //             reverse = true;\n    //             this.current.set_note_interval_beats(note_interval, reverse);\n    //         }\n    //     }\n    //\n    //     set_phrase_interval_beats(): void {\n    //         // TODO: use direction in logic\n    //         var direction_forward = this.phrase_iterator.direction_forward;\n    //         var reverse;\n    //         var phrase_interval_beats = this.current.get_phrase_interval_beats();\n    //\n    //         if (this.i === 0) {\n    //             this.current.set_phrase_interval_beats(phrase_interval_beats);\n    //         } else {\n    //             reverse = true;\n    //             this.current.set_phrase_interval_beats(phrase_interval_beats, reverse);\n    //         }\n    //     }\n    // }\n}"]}