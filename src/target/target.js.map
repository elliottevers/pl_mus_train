{"version":3,"file":"target.js","sourceRoot":"","sources":["target.ts"],"names":[],"mappings":"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","sourcesContent":["import TreeModel = require(\"tree-model\");\nimport {note as n} from \"../note/note\"\nimport {phrase as p} from \"../phrase/phrase\"\nimport {trainer} from \"../train/trainer\";\nimport {history} from \"../history/history\";\n// import {Segment} from \"../segment/segment\";\n// import {serialize_subtarget} from \"../serialize/serialize\";\n\n\nexport namespace target {\n\n    import TypeTarget = history.TypeTarget;\n    import TypeSequenceTarget = history.TypeSequenceTarget;\n    import TypeSubtarget = history.TypeSubtarget;\n\n    export class Subtarget {\n        note: TreeModel.Node<n.Note>;\n\n        constructor(note: TreeModel.Node<n.Note>) {\n            this.note = note;\n        }\n\n\n    }\n\n    export class SubtargetIterator {\n\n        public subtargets: Subtarget[];\n\n        i: number;\n\n        constructor(subtargets: Subtarget[]) {\n            this.subtargets = subtargets;\n            this.i = -1;\n        }\n\n        public next() {\n            let value_increment = 1;\n\n            this.i += value_increment;\n\n            if (this.i < 0) {\n                throw 'subtarget iterator < 0'\n            }\n\n            if (this.i < this.subtargets.length) {\n                return {\n                    value: this.subtargets[this.i],\n                    done: false\n                }\n            } else {\n                return {\n                    value: null,\n                    done: true\n                }\n            }\n        }\n\n        public current() {\n            if (this.i > -1) {\n                return this.subtargets[this.i];\n            } else {\n                return null;\n            }\n        }\n\n        public reset() {\n            this.i = -1;\n        }\n\n        public get_index_current() {\n            return this.i;\n        }\n    }\n\n    export class Target {\n        public iterator_subtarget: SubtargetIterator;\n\n        constructor(iterator_subtarget: SubtargetIterator) {\n            this.iterator_subtarget = iterator_subtarget;\n        }\n\n        get_notes(): TreeModel.Node<n.Note>[] {\n            let notes: TreeModel.Node<n.Note>[] = [];\n            for (let subtarget of this.iterator_subtarget.subtargets) {\n                notes.push(subtarget.note)\n            }\n            return notes;\n        }\n    }\n\n    export class TargetIterator {\n        // need SegmentTargetable -> TargetIterator\n\n        public static from_sequence_target(sequence_target: TypeSequenceTarget): TargetIterator {\n\n            let targets: Target[] = [];\n            for (let notes of sequence_target) {\n                let subtargets: Subtarget[] = [];\n                for (let note of notes) {\n                    subtargets.push(\n                        new Subtarget(note)\n                    )\n                }\n                let iterator_subtarget = new SubtargetIterator(subtargets);\n                targets.push(\n                    new Target(iterator_subtarget)\n                )\n            }\n\n            return new TargetIterator(targets)\n        }\n\n        public targets: Target[];\n\n        i: number;\n\n        constructor(targets: Target[]) {\n            this.targets = targets;\n\n            this.i = -1;\n        }\n\n        get_notes(): TreeModel.Node<n.Note>[] {\n            let notes: TreeModel.Node<n.Note>[] = [];\n            for (let target of this.targets) {\n                let iterator_subtarget = target.iterator_subtarget;\n                for (let subtarget of iterator_subtarget.subtargets) {\n                    notes.push(subtarget.note)\n                }\n            }\n            return notes;\n        }\n\n        public next() {\n            let value_increment = 1;\n\n            this.i += value_increment;\n\n            if (this.i < 0) {\n                throw 'target iterator < 0'\n            }\n\n            if (this.i < this.targets.length) {\n                return {\n                    value: this.targets[this.i],\n                    done: false\n                }\n            } else {\n                return {\n                    value: null,\n                    done: true\n                }\n            }\n        }\n\n        public current() {\n            if (this.i > -1) {\n                return this.targets[this.i];\n            } else {\n                return null;\n            }\n        }\n\n        public reset() {\n            this.i = -1;\n        }\n\n        public get_index_current() {\n            return this.i;\n        }\n    }\n\n\n\n    // export class Target {\n\n        // notes_grouped: TreeModel.Node<n.Note>[][];\n        //\n        // constructor(notes_grouped: TreeModel.Node<n.Note>[][]) {\n        //     this.notes_grouped = notes_grouped\n        // }\n\n        // subtargets: Subtarget[]\n\n\n\n    //     note: TreeModel.Node<n.Note>;\n    //     phrase: p.Phrase;\n    //\n    //     constructor(note: TreeModel.Node<n.Note>, phrase: p.Phrase) {\n    //         this.note = note;\n    //         this.phrase = phrase;\n    //     }\n    //\n    //     public value(): number {\n    //         return this.note.model.pitch;\n    //     }\n    //\n    //     public get_note_interval_beats(): number[] {\n    //         return this.note.model.get_interval_beats();\n    //     }\n    //\n    //     public get_phrase_interval_beats(): number[] {\n    //         return this.phrase.get_interval_beats();\n    //     }\n    //\n    //     // TODO: annotate\n    //     public set_note_interval_beats(note_interval_beats: number[], reverse: boolean) {\n    //         let beat_lower = note_interval_beats[0];\n    //         let beat_upper = note_interval_beats[1];\n    //\n    //         if (beat_upper - beat_lower < min_width_clip) {\n    //             beat_upper = beat_lower + min_width_clip;\n    //         }\n    //\n    //         if (reverse) {\n    //             this.phrase.clip.set_clip_endpoint_upper(beat_upper);\n    //             this.phrase.clip.set_clip_endpoint_lower(beat_lower);\n    //         } else {\n    //             this.phrase.clip.set_clip_endpoint_lower(beat_lower);\n    //             this.phrase.clip.set_clip_endpoint_upper(beat_upper);\n    //         }\n    //     }\n    //\n    //     public set_phrase_interval_beats(phrase_interval_beats: number[], reverse: boolean) {\n    //         let beat_lower = phrase_interval_beats[0];\n    //         let beat_upper = phrase_interval_beats[1];\n    //         if (reverse) {\n    //             this.phrase.clip.set_loop_bracket_upper(beat_upper);\n    //             this.phrase.clip.set_loop_bracket_lower(beat_lower);\n    //         } else {\n    //             this.phrase.clip.set_loop_bracket_lower(beat_lower);\n    //             this.phrase.clip.set_loop_bracket_upper(beat_upper);\n    //         }\n    //     }\n    // }\n    //\n    // export class TargetIterator {\n    //     phrase_iterator: p.PhraseIterator;\n    //     i: number;\n    //     current: any;\n    //\n    //     // TODO: figure out how to annotate\n    //     next() {\n    //         this.i += 1;\n    //\n    //         var phrase_current = this.phrase_iterator.current();\n    //\n    //         var note_result_next = phrase_current.note_iterator.next();\n    //\n    //         var note_next = note_result_next.value;\n    //\n    //         if (!note_result_next.done) {\n    //             this.current = new Target(note_next, phrase_current);\n    //             return {\n    //                 value: this.current,\n    //                 done: false\n    //             }\n    //         }\n    //\n    //         var phrase_result_next = this.phrase_iterator.next();\n    //\n    //         if (!phrase_result_next.done) { // note_next.done is true by now\n    //             var phrase_next = this.phrase_iterator.current();\n    //\n    //             note_result_next = phrase_next.note_iterator.next();\n    //\n    //             note_next = note_result_next.value;\n    //\n    //             this.current = new Target(note_next, phrase_next);\n    //\n    //             return {\n    //                 value: this.current,\n    //                 done: false\n    //             }\n    //         }\n    //\n    //         return {\n    //             value: null,\n    //             done: true\n    //         }\n    //     }\n    //\n    //     set_note_interval_beats(): void {\n    //         // TODO: use direction in logic\n    //         if (this.phrase_iterator.current() !== null) {\n    //             var direction_forward = this.phrase_iterator.current().note_iterator.direction_forward;\n    //         }\n    //         var reverse;\n    //         var note_interval = this.current.get_note_interval_beats();\n    //\n    //         if (this.i === 0) {\n    //             this.current.set_note_interval_beats(note_interval);\n    //         } else {\n    //             reverse = true;\n    //             this.current.set_note_interval_beats(note_interval, reverse);\n    //         }\n    //     }\n    //\n    //     set_phrase_interval_beats(): void {\n    //         // TODO: use direction in logic\n    //         var direction_forward = this.phrase_iterator.direction_forward;\n    //         var reverse;\n    //         var phrase_interval_beats = this.current.get_prhrase_interval_beats();\n    //\n    //         if (this.i === 0) {\n    //             this.current.set_phrase_interval_beats(phrase_interval_beats);\n    //         } else {\n    //             reverse = true;\n    //             this.current.set_phrase_interval_beats(phrase_interval_beats, reverse);\n    //         }\n    //     }\n    // }\n}"]}