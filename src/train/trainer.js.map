{"version":3,"file":"trainer.js","sourceRoot":"","sources":["trainer.ts"],"names":[],"mappings":"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","sourcesContent":["import {note, note as n} from \"../note/note\";\nimport TreeModel = require(\"tree-model\");\nimport {algorithm} from \"./algorithm\";\nimport {history} from \"../history/history\";\nimport {target} from \"../target/target\";\nimport {segment} from \"../segment/segment\";\nimport {parse} from \"../parse/parse\";\nimport {message} from \"../message/messenger\";\nimport {song} from \"../song/song\";\nimport {clip} from \"../clip/clip\";\nimport {iterate} from \"./iterate\";\nimport {log} from \"../log/logger\";\nimport {window} from \"../render/window\";\nimport {utils} from \"../utils/utils\";\nimport {live} from \"../live/live\";\nimport {track} from \"../track/track\";\nimport {user_input} from \"../control/user_input\";\nimport {scene} from \"../scene/scene\";\n// import {get_notes_on_track} from \"../scripts/segmenter\";\nconst _ = require('underscore');\nconst l = require('lodash');\n\nexport namespace trainer {\n\n    import HistoryUserInput = history.HistoryUserInput;\n    import TargetIterator = target.TargetIterator;\n    import Segment = segment.Segment;\n    import Subtarget = target.Subtarget;\n    import Target = target.Target;\n    import Messenger = message.Messenger;\n    import Clip = clip.Clip;\n    import SubtargetIterator = target.SubtargetIterator;\n    import StructParse = parse.StructParse;\n    import MatrixIterator = iterate.MatrixIterator;\n    import IteratorTrainFactory = iterate.IteratorTrainFactory;\n    import Note = note.Note;\n    import Track = track.Track;\n    import FactoryMatrixObjectives = iterate.FactoryMatrixObjectives;\n    import Trainable = algorithm.Trainable;\n    import UserInputHandler = user_input.UserInputHandler;\n    import Song = song.Song;\n    import MatrixWindow = window.MatrixWindow;\n    import Scene = scene.Scene;\n    import SceneDao = scene.SceneDao;\n    import Logger = log.Logger;\n\n    export type StructTargets = TargetIterator[][];\n\n    export type StructTrain = StructParse | StructTargets;\n\n    export class Trainer {\n\n        private window: MatrixWindow;\n        public trainable: Trainable; // TODO: type\n        public clip_user_input: Clip;\n        // public clip_user_input_sync: Clip;\n        // private clip_target: Clip;\n        private notes_target_track: TreeModel.Node<Note>[];\n        private track_target: Track;\n        private track_user_input: Track;\n        private song: Song;\n        private segments: Segment[];\n        private messenger: Messenger;\n\n        // public struct_parse: StructParse;\n        public history_user_input: HistoryUserInput;\n        public struct_train: StructTrain;\n\n        private counter_user_input: number;\n        private limit_user_input: number;\n        private limit_input_reached: boolean;\n\n        private segment_current: Segment;\n        public target_current: Target;\n        private subtarget_current: Subtarget;\n\n        // private matrix_targets: TargetIterator[][];\n        public iterator_matrix_train: MatrixIterator;\n        private iterator_target_current: TargetIterator;\n        private iterator_subtarget_current: SubtargetIterator;\n\n        private user_input_handler: UserInputHandler;\n\n        constructor(\n            window: MatrixWindow,\n            user_input_handler: UserInputHandler,\n            trainable: Trainable,\n            track_target: Track,\n            track_user_input: Track,\n            song: Song,\n            segments: Segment[],\n            messenger: Messenger\n        ) {\n            this.window = window;\n            this.trainable = trainable;\n            this.track_target = track_target;\n            this.track_user_input = track_user_input;\n            this.song = song;\n\n            this.user_input_handler = user_input_handler;\n\n            this.segments = segments;\n\n            // TODO: pull notes from clip user input track and transform into segments\n            // this.segments = Segment.from_notes(\n            //     this.track_user_input.get_notes()\n            // );\n            //\n            // // assign scenes to segments\n            // for (let segment of this.segments) {\n            //     segment.set_scene(\n            //         new Scene(\n            //             new SceneDao(\n            //\n            //             )\n            //         )\n            //     )\n            // }\n\n            // this.segments = segments;\n            this.messenger = messenger;\n\n            // this.notes_target_track = track.get_notes_on_track(\n            //     track_target.get_path()\n            // );\n\n            this.notes_target_track = track_target.get_notes();\n\n            // let logger = new Logger('max');\n            // logger.log(JSON.stringify(this.notes_target_track));\n\n            this.iterator_matrix_train = IteratorTrainFactory.get_iterator_train(\n                this.trainable,\n                this.segments\n            );\n\n            this.history_user_input = new HistoryUserInput(\n                FactoryMatrixObjectives.create_matrix_objectives(\n                    this.trainable,\n                    this.segments\n                )\n            );\n\n            this.window.initialize_clips(\n                this.trainable,\n                this.segments\n            );\n\n            this.window.set_length_beats(\n                this.segments[this.segments.length - 1].beat_end\n            );\n\n            // this.trainable.initialize(\n            //     this.window,\n            //     this.segments,\n            //     this.track_target,\n            //     this.user_input_handler,\n            //     this.struct_parse\n            // );\n\n            this.window = this.trainable.initialize_render(\n                this.window,\n                this.segments,\n                this.notes_target_track\n            );\n\n            this.struct_train = this.trainable.create_struct_train(\n                this.window,\n                this.segments,\n                this.track_target,\n                this.user_input_handler,\n                this.struct_train\n            );\n\n            this.struct_train = this.trainable.preprocess_struct_train(\n                this.struct_train,\n                this.segments,\n                this.notes_target_track\n            );\n\n            // this.trainable.initialize(\n            //     this.window,\n            //     this.segments,\n            //     this.track_target,\n            //     this.user_input_handler,\n            //     this.struct_train\n            // );\n\n            // TODO: figure out getting notes from the target track\n            // this.matrix_targets = this.trainable.create_matrix_targets(\n            //     this.user_input_handler,\n            //     this.segments,\n            //     this.notes_target_track\n            // );\n\n            // this.struct_train = this.trainable.create_struct_train(\n            //\n            // );\n\n            // this.struct_parse = this.trainable.create_struct_parse(\n            //     this.segments\n            // );\n\n            this.trainable.initialize_tracks(\n                this.segments,\n                this.track_target,\n                this.track_user_input,\n                this.struct_train\n            )\n        }\n\n        public clear_window() {\n            this.window.clear()\n        }\n\n        public render_window() {\n            this.window.render(\n                this.iterator_matrix_train,\n                this.trainable,\n                // this.target_current,\n                this.struct_train,\n                // this.segment_current\n            )\n        }\n\n        public unpause() {\n            this.trainable.unpause(this.song, this.segment_current.scene)\n        }\n\n        public pause() {\n            this.trainable.pause(this.song, this.segment_current.scene)\n        }\n\n        private advance() {\n            if (this.trainable.b_parsed) {\n                this.advance_segment()\n            } else if (this.trainable.b_targeted) {\n                this.advance_subtarget()\n            } else {\n                throw 'cannot determine how to advance'\n            }\n        }\n\n        public commence() {\n            this.advance()\n        }\n\n        private advance_segment() {\n\n            let obj_next_coord = this.iterator_matrix_train.next();\n\n            if (obj_next_coord.done) {\n\n                this.trainable.terminate(this.struct_train, this.segments);\n\n                this.trainable.pause(this.song, this.segment_current.scene);\n\n                return\n            }\n\n            this.next_segment()\n        }\n\n        private advance_subtarget() {\n\n            let logger = new Logger('max');\n\n            let matrix_targets = this.struct_train as StructTargets;\n\n            let have_not_begun: boolean = (!this.iterator_matrix_train.b_started);\n\n            if (have_not_begun) {\n                this.iterator_matrix_train.next();\n\n                this.iterator_target_current = matrix_targets[0][0];\n\n                this.iterator_target_current.next();\n\n                this.target_current = this.iterator_target_current.current();\n\n                this.iterator_subtarget_current = this.target_current.iterator_subtarget;\n\n                this.iterator_subtarget_current.next();\n\n                this.subtarget_current = this.iterator_subtarget_current.current();\n\n                logger.log(JSON.stringify(this.subtarget_current));\n\n                this.next_segment();\n\n                // this.trainable.stream_bounds(this.messenger, this.subtarget_current, this.segment_current);\n\n                return\n            }\n\n            let obj_next_subtarget = this.iterator_subtarget_current.next();\n\n            if (obj_next_subtarget.done) {\n\n                let obj_next_target = this.iterator_target_current.next();\n\n                if (obj_next_target.done) {\n\n                    let obj_next_coord = this.iterator_matrix_train.next();\n\n                    if (obj_next_coord.done) {\n\n                        this.trainable.terminate(this.struct_train, this.segments);\n\n                        this.trainable.pause(this.song, this.segment_current.scene);\n\n                        return\n                    }\n\n                    let coord_next = obj_next_coord.value;\n\n                    this.iterator_target_current = matrix_targets[coord_next[0]][coord_next[1]];\n\n                    let obj_next_target_twice_nested = this.iterator_target_current.next();\n\n                    this.target_current = obj_next_target_twice_nested.value;\n\n                    let obj_next_subtarget_twice_nested = this.target_current.iterator_subtarget.next();\n\n                    this.subtarget_current = obj_next_subtarget_twice_nested.value;\n\n                    this.iterator_subtarget_current = this.target_current.iterator_subtarget;\n\n                    logger.log(JSON.stringify(this.subtarget_current));\n\n                    this.next_segment();\n\n                    // this.trainable.stream_bounds(this.messenger, this.subtarget_current, this.segment_current);\n\n                    return\n                }\n\n                this.target_current = obj_next_target.value;\n\n                let obj_next_subtarget_once_nested = this.target_current.iterator_subtarget.next();\n\n                this.subtarget_current = obj_next_subtarget_once_nested.value;\n\n                logger.log(JSON.stringify(this.subtarget_current));\n\n                this.iterator_subtarget_current = this.target_current.iterator_subtarget;\n\n                this.trainable.stream_bounds(this.messenger, this.subtarget_current, this.segment_current);\n\n                return\n            }\n\n            this.subtarget_current = obj_next_subtarget.value;\n\n            this.trainable.stream_bounds(this.messenger, this.subtarget_current, this.segment_current);\n        }\n\n        next_segment() {\n            this.segment_current = this.segments[this.iterator_matrix_train.get_coord_current()[1]];\n\n            this.segment_current.scene.set_path_deferlow('scene');\n\n            this.segment_current.scene.fire(true);\n\n            this.clip_user_input = this.segment_current.clip_user_input;\n\n            this.clip_user_input.set_path_deferlow('clip_user_input');\n\n            this.trainable.stream_bounds(this.messenger, this.subtarget_current, this.segment_current)\n        }\n\n        accept_input(notes_input_user: TreeModel.Node<n.Note>[]) {\n\n            this.counter_user_input++;\n\n            if (this.counter_user_input >= this.limit_user_input) {\n                this.limit_input_reached = true\n            }\n\n            if (this.limit_input_reached) {\n                // completely ignore\n                return\n            }\n\n            if (this.trainable.warrants_advance(notes_input_user, this.subtarget_current)) {\n\n                let input_postprocessed = this.trainable.postprocess_user_input(notes_input_user, this.subtarget_current);\n\n                this.history_user_input = this.trainable.update_history_user_input(\n                    input_postprocessed,\n                    this.history_user_input,\n                    this.iterator_matrix_train\n                );\n\n                this.struct_train = this.trainable.update_struct(\n                    input_postprocessed,\n                    this.struct_train,\n                    this.trainable,\n                    this.iterator_matrix_train\n                );\n\n                // this.history_user_input.concat(\n                //     input_postprocessed,\n                //     this.iterator_matrix_train.get_coord_current()\n                // );\n\n                this.window.add_notes_to_clip(\n                    input_postprocessed,\n                    this.iterator_matrix_train.get_coord_current(),\n                    this.trainable\n                );\n\n                this.advance();\n\n                this.render_window();\n            }\n        }\n    }\n}"]}