{"version":3,"file":"trainer.js","sourceRoot":"","sources":["trainer.ts"],"names":[],"mappings":"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","sourcesContent":["import {note as n} from \"../note/note\";\nimport TreeModel = require(\"tree-model\");\n// import {parse_matrix, pwindow} from \"../scripts/parse_tree\";\nimport {algorithm, algorithm as algo} from \"./algorithm\";\nimport {history} from \"../history/history\";\nimport {target} from \"../target/target\";\nimport {segment} from \"../segment/segment\";\nimport {parse} from \"../parse/parse\";\nimport {utils} from \"../utils/utils\";\nimport {window} from \"../render/window\";\nimport {message} from \"../message/messenger\";\nimport {song} from \"../song/song\";\nimport {clip} from \"../clip/clip\";\nconst _ = require('underscore');\nconst l = require('lodash');\n\nexport namespace trainer {\n\n    // import Targetable = train.algorithm.Targetable;\n    import HistoryUserInput = history.HistoryUserInput;\n    // import TargetType = target.TargetType;\n    import TargetIterator = target.TargetIterator;\n    // import MatrixIterator = history.MatrixIterator;\n    import Segment = segment.Segment;\n    // import ParseTree = parse.ParseTree;\n    import Algorithm = algorithm.Algorithm;\n    import division_int = utils.division_int;\n    import remainder = utils.remainder;\n    import PARSE = algorithm.PARSE;\n    import DERIVE = algorithm.DERIVE;\n    import DETECT = algorithm.DETECT;\n    import PREDICT = algorithm.PREDICT;\n    import Parse = algorithm.Parse;\n    import Renderable = window.Renderable;\n    import TreeRenderable = window.TreeRenderable;\n    import Subtarget = target.Subtarget;\n    import Target = target.Target;\n    import Messenger = message.Messenger;\n    import Song = song.Song;\n    import Clip = clip.Clip;\n    import FactoryHistoryUserInput = history.FactoryHistoryUserInput;\n    import SubtargetIterator = target.SubtargetIterator;\n    import ParseMatrix = parse.ParseMatrix;\n\n    export class MatrixIterator {\n        private num_rows: number;\n        private num_columns: number;\n\n        private row_current: number;\n        private column_current: number;\n\n        private downward: boolean;\n        private rightward: boolean;\n\n        private i;\n\n        constructor(num_rows: number, num_columns: number, downward?: boolean, rightward?: boolean) {\n            this.num_rows = num_rows;\n            this.num_columns = num_columns;\n\n            this.downward = downward ? downward : true;\n            this.rightward = rightward ? rightward : true;\n\n            if (this.downward && this.rightward) {\n                this.i = -1;\n            } else if (!this.downward && this.rightward) {\n                this.i = this.num_columns * this.num_rows + 1 - this.num_columns\n            } else if (this.downward && !this.rightward) {\n                this.i = -1 + this.num_columns\n            } else if (!this.downward && !this.rightward) {\n                this.i = this.num_columns * this.num_rows + 1\n            } else {\n                throw 'matrix iterator'\n            }\n        }\n\n        private next_row() {\n            if (this.downward && this.rightward) {\n                this.i = this.i + this.num_columns;\n            } else if (!this.downward && this.rightward) {\n                this.i = this.i - 3;\n            } else if (this.downward && !this.rightward) {\n                this.i = this.i + 3;\n            } else if (!this.downward && !this.rightward) {\n                this.i = this.i - this.num_columns;\n            } else {\n                throw 'matrix iterator'\n            }\n        }\n\n        private next_column() {\n            if (this.downward && this.rightward) {\n                this.i++;\n            } else if (!this.downward && this.rightward) {\n                if (remainder(this.i + 1, this.num_rows) === 0) {\n                    this.i = this.i - (this.num_columns - 1) - this.num_columns\n                } else {\n                    this.i++\n                }\n            } else if (this.downward && !this.rightward) {\n                if (remainder(this.i + 1, this.num_rows) === 0) {\n                    this.i = this.i + (this.num_columns - 1) + this.num_columns\n                } else {\n                    this.i--\n                }\n            } else if (!this.downward && !this.rightward) {\n                this.i--;\n            } else {\n                throw 'matrix iterator'\n            }\n        }\n\n        private get_index_done(): number {\n            if (this.downward && this.rightward) {\n                return this.num_columns * this.num_rows\n            } else if (!this.downward && this.rightward) {\n                return -1 * this.num_rows\n            } else if (this.downward && !this.rightward) {\n                return this.num_columns * this.num_rows - 1 + this.num_rows\n            } else if (!this.downward && !this.rightward) {\n                return -1\n            } else {\n                throw 'matrix iterator'\n            }\n        }\n\n        public next() {\n\n            let value: number[] = null;\n\n            this.next_column();\n\n            if (this.i === this.get_index_done()) {\n                return {\n                    value: value,\n                    done: true\n                }\n            }\n\n            return {\n                value: this.get_coord_current(),\n                done: false\n            };\n        }\n\n        public get_coord_current(): number[] {\n            return MatrixIterator.get_coord(this.get_state_current() + 1, this.num_columns)\n        }\n\n        public get_state_current(): number {\n            return this.i;\n        }\n\n        public static get_coord(i, num_columns): number[] {\n            let pos_row = division_int(i, num_columns);\n            let pos_column = remainder(i, num_columns);\n            return [pos_row, pos_column]\n        }\n    }\n\n    class FactoryMatrixTargetIterator {\n        public static get_iterator_target(algorithm: Algorithm, segments: Segment[]): any[][] {\n            let matrix_data = [];\n            switch(algorithm.get_name()) {\n                case algo.DETECT || algo.PREDICT: {\n                    for (let i=0; i < 1; i++) {\n                        matrix_data[i] = new Array(segments.length);\n                    }\n                    break;\n                }\n                case algo.PARSE || algo.DERIVE: {\n                    for (let i=0; i < algorithm.get_depth(); i++) {\n                        if (i == 0) {\n                            matrix_data[i] = new Array(1); // root of tree\n                        } else {\n                            matrix_data[i] = new Array(segments.length);\n                        }\n                    }\n                    break;\n                }\n                default: {\n                    throw 'case not considered';\n                }\n            }\n            return matrix_data;\n        }\n    }\n\n    class IteratorTrainFactory {\n        public static get_iterator_train(algorithm: Algorithm, segments: Segment[]) {\n\n            let iterator: MatrixIterator;\n\n            let downward, rightward;\n\n            switch (algorithm.get_name()) {\n                case algo.DETECT: {\n                    iterator = new MatrixIterator(1, segments.length);\n                    break;\n                }\n                case algo.PREDICT: {\n                    iterator = new MatrixIterator(1, segments.length);\n                    break;\n                }\n                case algo.PARSE: {\n                    downward = false;\n                    rightward = true;\n                    iterator = new MatrixIterator(algorithm.get_depth() + 1, segments.length, downward, rightward);\n                    break;\n                }\n                case algo.DERIVE: {\n                    iterator = new MatrixIterator(algorithm.get_depth() + 1, segments.length);\n                    break;\n                }\n                default: {\n                    throw ['algorithm of name', algorithm.get_name(), 'not supported'].join(' ')\n                }\n            }\n            return iterator\n        }\n    }\n\n    export class Trainer {\n\n        private window;\n        private algorithm; // TODO: type\n        private clip_user_input: Clip;\n        private clip_target: Clip;\n        private song: Song;\n        private segments: Segment[];\n        private messenger: Messenger;\n\n        // private list_parse_tree: ParseTree[];\n        private parse_matrix: ParseMatrix;\n        public history_user_input;\n\n        private counter_user_input: number;\n        private limit_user_input: number;\n        private limit_input_reached: boolean;\n\n        private segment_current: Segment;\n        private target_current: Target;\n        private subtarget_current: Subtarget;\n\n        private matrix_target_iterator: TargetIterator[][];\n        private iterator_target_current: TargetIterator;\n\n        private iterator_matrix_train: MatrixIterator;\n\n        private iterator_subtarget_current: SubtargetIterator;\n\n        constructor(window, user_input_handler, algorithm, clip_user_input, clip_target, song, segments, messenger) {\n            this.window = window;\n            this.algorithm = algorithm;\n            this.clip_user_input = clip_user_input;\n            this.clip_target = clip_target;\n            this.song = song;\n            this.segments = segments;\n            this.messenger = messenger;\n\n            this.iterator_matrix_train = IteratorTrainFactory.get_iterator_train(\n                this.algorithm,\n                this.segments\n            );\n\n            this.matrix_target_iterator = FactoryMatrixTargetIterator.get_iterator_target(\n                this.algorithm,\n                this.segments\n            );\n\n            this.history_user_input = FactoryHistoryUserInput.create_history_user_input(\n                this.algorithm,\n                this.segments\n            );\n\n            this.history_user_input.set_matrix(\n                l.cloneDeep(this.matrix_target_iterator)\n            );\n\n            this.window.initialize_clips(\n                this.algorithm,\n                this.segments\n            );\n\n            this.window.set_length_beats(\n                this.segments[this.segments.length - 1].beat_end\n            );\n\n            if (this.algorithm.b_targeted()) {\n                this.create_targets()\n            } else {\n                this.parse_matrix = new ParseMatrix(\n                    l.cloneDeep(this.matrix_target_iterator)\n                );\n                this.initialize_parse_matrix();\n            }\n        }\n\n        // TODO: everytime we add a note, call next() on matrix iterator\n        private initialize_parse_matrix() {\n\n            // set root\n            let coord_root = [0, 0];\n\n            let note_root = this.segments[0].get_note();\n\n            this.parse_matrix.matrix_note_sequence[coord_root[0]][coord_root[1]] = [note_root];\n\n            // initialize\n            this.iterator_matrix_train.next();\n\n            // set first layer, which are the various key center estimates\n\n            for (let i_segment of this.segments) {\n                let segment = this.segments[Number(i_segment)];\n                this.parse_matrix.matrix_note_sequence[1][Number(i_segment)] = [segment.get_note()];\n                this.iterator_matrix_train.next();\n            }\n\n            switch (this.algorithm.get_name()) {\n                case PARSE: {\n                    for (let i_segment of this.segments) {\n                        let segment = this.segments[Number(i_segment)];\n                        let notes = this.clip_user_input.get_notes(\n                            segment.beat_start,\n                            0,\n                            segment.beat_end - segment.beat_start,\n                            128\n                        );\n                        this.parse_matrix.matrix_note_sequence[this.algorithm.get_depth()][Number(i_segment)] = notes\n                    }\n                    break;\n                }\n                case DERIVE: {\n                    //  TODO: anything?\n                    break;\n                }\n                default: {\n                    throw ['algorithm of name', this.algorithm.get_name(), 'not supported'].join(' ')\n                }\n            }\n        }\n\n        // now we can assume we have a list instead of a matrix\n        private create_targets() {\n\n            this.clip_target.load_notes_within_markers();\n\n            for (let i_segment in this.segments) {\n                let sequence_targets = this.algorithm.determine_targets(\n                    this.clip_target.get_notes(\n                        this.segments[Number(i_segment)].beat_start,\n                        0,\n                        this.segments[Number(i_segment)].beat_end - this.segments[Number(i_segment)].beat_start,\n                        128\n                    )\n                );\n                this.matrix_target_iterator[0][Number(i_segment)] = TargetIterator.from_sequence_target(sequence_targets);\n            }\n        }\n\n        public clear_window() {\n            this.window.clear()\n        }\n\n        public render_window() {\n            this.window.render(\n                this.iterator_matrix_train,\n                this.matrix_target_iterator,\n                this.history_user_input,\n                this.algorithm,\n                this.parse_matrix\n            )\n        }\n\n        public reset_user_input() {\n            if (_.contains([DETECT, PREDICT], this.algorithm.get_name())) {\n                let coords = this.iterator_matrix_train.get_coord_current();\n                let notes_last = this.matrix_target_iterator[coords[0] - 1][coords[1]].get_notes();\n                this.clip_user_input.set_notes(\n                    notes_last\n                );\n            } else {\n                return\n            }\n        }\n\n        private set_loop() {\n            let interval = this.segment_current.get_endpoints_loop();\n\n            this.clip_user_input.set_endpoints_loop(\n                interval[0],\n                interval[1]\n            )\n        }\n\n        public resume() {\n            this.algorithm.post_init()\n        }\n\n        public pause() {\n            this.algorithm.pre_terminate()\n        }\n\n        public terminate() {\n            this.algorithm.pre_terminate()\n        }\n\n        public init() {\n            if (this.algorithm.b_targeted()) {\n                this.advance_subtarget();\n            } else {\n                this.advance_segment();\n            }\n            this.algorithm.post_init(this.song, this.clip_user_input)\n        }\n\n        private advance_segment() {\n            // TODO:\n            let obj_next_coord = this.iterator_matrix_train.next();\n\n            if (obj_next_coord.done) {\n                this.algorithm.terminate()\n            }\n\n            let coord = obj_next_coord.value;\n\n            this.segment_current = this.segments[coord[1]];\n        }\n\n        private advance_subtarget() {\n\n            let possibly_history: Target[] = this.iterator_target_current.targets;\n\n            let coord_at_time: number[] = this.iterator_matrix_train.get_coord_current();\n\n            let obj_next_subtarget = this.iterator_subtarget_current.next();\n\n            if (obj_next_subtarget.done) {\n\n                let obj_next_target = this.iterator_target_current.next();\n\n                if (obj_next_target.done) {\n\n                    let obj_next_coord = this.iterator_matrix_train.next();\n\n                    this.history_user_input.add_sequence_target(\n                        possibly_history,\n                        coord_at_time\n                    );\n\n                    if (obj_next_coord.done) {\n                        this.history_user_input.add_sequence_target(\n                            possibly_history,\n                            coord_at_time\n                        );\n\n                        // this.window.add(\n                        //     this.matrix_target_iterator[coord_current[0]][coord_current[1]].get_notes(),\n                        //     coord_current,\n                        //     this.segment_current\n                        // );\n\n                        this.algorithm.pre_terminate();\n\n                        return\n                    }\n\n                    let coord_next = obj_next_coord.value;\n\n                    this.iterator_target_current = this.matrix_target_iterator[coord_next[0]][coord_next[1]];\n\n                    this.segment_current = this.segments[coord_next[1]];\n\n                    let obj_next_target_twice_nested = this.iterator_target_current.next();\n\n                    this.target_current = obj_next_target_twice_nested.value;\n\n                    let obj_next_subtarget_twice_nested = this.target_current.iterator_subtarget.next();\n\n                    this.subtarget_current = obj_next_subtarget_twice_nested.value;\n\n                    this.iterator_subtarget_current = this.target_current.iterator_subtarget;\n\n                    return\n                }\n\n                this.target_current = obj_next_target.value;\n\n                let obj_next_subtarget_once_nested = this.target_current.iterator_subtarget.next();\n\n                this.subtarget_current = obj_next_subtarget_once_nested.value;\n\n                this.iterator_subtarget_current = this.target_current.iterator_subtarget;\n\n                return\n            }\n\n            this.subtarget_current = obj_next_subtarget.value;\n        }\n\n        // user input can be either 1) a pitch or 2) a sequence of notes\n        accept_input(notes_input_user: TreeModel.Node<n.Note>[]) {\n\n            this.counter_user_input++;\n\n            if (this.counter_user_input >= this.limit_user_input) {\n                this.limit_input_reached = true\n            }\n\n            if (this.limit_input_reached) {\n                // completely ignore\n                return\n            }\n\n            // parse/derive logic\n            if (!this.algorithm.b_targeted()) {\n\n                this.history_user_input.add(\n                    notes_input_user,\n                    this.iterator_matrix_train.get_coord_current()\n                );\n\n                // TODO: implement\n                this.parse_matrix.add(\n                    notes_input_user,\n                    this.parse_matrix,\n                    this.iterator_matrix_train\n                );\n\n                this.advance_segment();\n\n                this.render_window();\n\n                return\n            }\n\n            // detect/predict logic\n            // NB: assumes we're only giving list of a single note as input\n            if (notes_input_user[0].model.note.pitch === this.subtarget_current.note.model.note.pitch) {\n\n                this.window.add_note_to_clip(\n                    this.subtarget_current.note,\n                    this.iterator_matrix_train.get_coord_current()\n                );\n\n                if (this.algorithm.b_targeted()) {\n                    // set the targets and shit\n                }\n\n                this.advance_subtarget();\n\n                this.set_loop();\n\n                // this.render_window();\n            }\n        }\n    }\n}"]}