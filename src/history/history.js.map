{"version":3,"file":"history.js","sourceRoot":"","sources":["history.ts"],"names":[],"mappings":"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","sourcesContent":["import {note} from \"../note/note\";\nimport {log} from \"../log/logger\";\nimport TreeModel = require(\"tree-model\");\n\nexport namespace history {\n    import Logger = log.Logger;\n\n    export class HistoryUserInput {\n\n    }\n\n    export class List {\n\n    }\n\n    export class Matrix {\n\n        data: TreeModel.Node<note.Note>[][][];\n\n        logger: Logger;\n\n        constructor(height: number, width: number) {\n            this.data = [];\n            for(let i=0; i<height; i++) {\n                this.data[i] = new Array(width);\n            }\n            this.logger = new Logger('max')\n        }\n\n        set_notes(i_height, i_width, notes): void {\n            this.data[i_height][i_width] = notes\n        }\n\n        get_notes(i_height, i_width): TreeModel.Node<note.Note>[] {\n            return this.data[i_height][i_width]\n        }\n\n        private static serialize(notes: TreeModel.Node<note.Note>[]) {\n            return notes.map((note) => {\n                return JSON.stringify(note.model);\n            })\n        }\n\n        private static deserialize(notes_serialized) {\n            if (notes_serialized === null) {\n                return null\n            }\n            let tree = new TreeModel();\n            return notes_serialized.map((note) => {\n                return tree.parse(JSON.parse(note));\n            })\n        }\n\n        save(filename) {\n            let data_serializable = this.data as any;\n            for (let i_row in this.data) {\n                for (let i_col in this.data[Number(i_row)]) {\n                    data_serializable[Number(i_row)][Number(i_col)] = ParseMatrix.serialize(this.data[Number(i_row)][Number(i_col)])\n                }\n            }\n\n            let f = new File(filename,\"write\",\"JSON\");\n\n            if (f.isopen) {\n                post(\"saving session\");\n                f.writestring(JSON.stringify(data_serializable)); //writes a string\n                f.close();\n            } else {\n                post(\"could not save session\");\n            }\n        }\n\n        public static load(filename) {\n            let f = new File(filename, \"read\",\"JSON\");\n            let a, data_serialized;\n\n            if (f.isopen) {\n                post(\"reading file\");\n                // @ts-ignore\n                while ((a = f.readline()) != null) {\n                    data_serialized = JSON.parse(a)\n                }\n                f.close();\n            } else {\n                post(\"could not open file\");\n            }\n\n            let data_deserialized = data_serialized as any;\n\n            for (let i_row in data_serialized) {\n                for (let i_col in data_serialized[Number(i_row)]) {\n                    // post(i_row);\n                    // post(i_col);\n                    data_deserialized[Number(i_row)][Number(i_col)] = ParseMatrix.deserialize(data_serialized[Number(i_row)][Number(i_col)])\n                }\n            }\n\n            return data_deserialized\n        }\n    }\n}"]}