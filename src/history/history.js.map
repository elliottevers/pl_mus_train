{"version":3,"file":"history.js","sourceRoot":"","sources":["history.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,wCAAkC;AAClC,sCAAyC;AACzC,wCAAqC;AAErC,IAAiB,OAAO,CA0KvB;AA1KD,WAAiB,OAAO;IACpB,IAAO,MAAM,GAAG,YAAG,CAAC,MAAM,CAAC;IAC3B,IAAO,YAAY,GAAG,aAAK,CAAC,YAAY,CAAC;IACzC,IAAO,SAAS,GAAG,aAAK,CAAC,SAAS,CAAC;IAEnC;QAAA;QAEA,CAAC;QAAD,uBAAC;IAAD,CAAC,AAFD,IAEC;IAED;QASI,wBAAY,QAAgB,EAAE,WAAmB;YAC7C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;YAE/B,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAChB,CAAC;QAEO,iCAAQ,GAAhB;YACI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC;QACvC,CAAC;QAEO,oCAAW,GAAnB;YACI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACxB,CAAC;QAEM,6BAAI,GAAX;YAEI,IAAI,KAAK,GAAa,IAAI,CAAC;YAE3B,IAAI,CAAC,WAAW,EAAE,CAAC;YAEnB,IAAI,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,EAAE;gBACjD,OAAO;oBACH,KAAK,EAAE,KAAK;oBACZ,IAAI,EAAE,IAAI;iBACb,CAAA;aACJ;YAED,IAAI,OAAO,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YACzD,IAAI,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YAEzD,KAAK,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;YAE9B,OAAO;gBACH,KAAK,EAAE,KAAK;gBACZ,IAAI,EAAE,KAAK;aACd,CAAC;QACN,CAAC;QACL,qBAAC;IAAD,CAAC,AA/CD,IA+CC;IA/CY,sBAAc,iBA+C1B,CAAA;IAYD;QAAiC,+BAAgB;QAAjD;;QAeA,CAAC;QAXU,mCAAa,GAApB,UAAqB,SAAwB;QAE7C,CAAC;QAED,8BAAQ,GAAR;YACI,OAAM;QACV,CAAC;QAED,8BAAQ,GAAR;QAEA,CAAC;QACL,kBAAC;IAAD,CAAC,AAfD,CAAiC,gBAAgB,GAehD;IAfY,mBAAW,cAevB,CAAA;IAED;QAAmC,iCAAgB;QAM/C,uBAAY,MAAc,EAAE,KAAa;YAAzC,iBAMC;YALG,KAAI,CAAC,IAAI,GAAG,EAAE,CAAC;YACf,KAAI,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACxB,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;aACnC;YACD,KAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,CAAA;;QACnC,CAAC;QAED,iCAAS,GAAT,UAAU,QAAQ,EAAE,OAAO,EAAE,KAAK;YAC9B,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,GAAG,KAAK,CAAA;QACxC,CAAC;QAED,iCAAS,GAAT,UAAU,QAAQ,EAAE,OAAO;YACvB,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAA;QACvC,CAAC;QAEc,uBAAS,GAAxB,UAAyB,KAAkC;YACvD,OAAO,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI;gBAClB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACtC,CAAC,CAAC,CAAA;QACN,CAAC;QAEc,yBAAW,GAA1B,UAA2B,gBAAgB;YACvC,IAAI,gBAAgB,KAAK,IAAI,EAAE;gBAC3B,OAAO,IAAI,CAAA;aACd;YACD,IAAI,IAAI,GAAG,IAAI,SAAS,EAAE,CAAC;YAC3B,OAAO,gBAAgB,CAAC,GAAG,CAAC,UAAC,IAAI;gBAC7B,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YACxC,CAAC,CAAC,CAAA;QACN,CAAC;QAED,4BAAI,GAAJ,UAAK,QAAQ;YACT,IAAI,iBAAiB,GAAG,IAAI,CAAC,IAAW,CAAC;YACzC,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,IAAI,EAAE;gBACzB,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;oBACxC,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;iBACnH;aACJ;YAED,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAC,OAAO,EAAC,MAAM,CAAC,CAAC;YAE1C,IAAI,CAAC,CAAC,MAAM,EAAE;gBACV,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBACvB,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,iBAAiB;gBACnE,CAAC,CAAC,KAAK,EAAE,CAAC;aACb;iBAAM;gBACH,IAAI,CAAC,wBAAwB,CAAC,CAAC;aAClC;QACL,CAAC;QAEa,kBAAI,GAAlB,UAAmB,QAAQ;YACvB,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAC,MAAM,CAAC,CAAC;YAC1C,IAAI,CAAC,EAAE,eAAe,CAAC;YAEvB,IAAI,CAAC,CAAC,MAAM,EAAE;gBACV,IAAI,CAAC,cAAc,CAAC,CAAC;gBACrB,aAAa;gBACb,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC,IAAI,IAAI,EAAE;oBAC/B,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;iBAClC;gBACD,CAAC,CAAC,KAAK,EAAE,CAAC;aACb;iBAAM;gBACH,IAAI,CAAC,qBAAqB,CAAC,CAAC;aAC/B;YAED,IAAI,iBAAiB,GAAG,eAAsB,CAAC;YAE/C,KAAK,IAAI,KAAK,IAAI,eAAe,EAAE;gBAC/B,KAAK,IAAI,KAAK,IAAI,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;oBAC9C,eAAe;oBACf,eAAe;oBACf,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,WAAW,CAAC,WAAW,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;iBAC3H;aACJ;YAED,OAAO,iBAAiB,CAAA;QAC5B,CAAC;QACL,oBAAC;IAAD,CAAC,AApFD,CAAmC,gBAAgB,GAoFlD;IApFY,qBAAa,gBAoFzB,CAAA;AACL,CAAC,EA1KgB,OAAO,GAAP,eAAO,KAAP,eAAO,QA0KvB","sourcesContent":["import {note as n} from \"../note/note\";\nimport {log} from \"../log/logger\";\nimport TreeModel = require(\"tree-model\");\nimport {utils} from \"../utils/utils\";\n\nexport namespace history {\n    import Logger = log.Logger;\n    import division_int = utils.division_int;\n    import remainder = utils.remainder;\n\n    class HistoryUserInput {\n\n    }\n\n    export class MatrixIterator {\n        private num_rows: number;\n        private num_columns: number;\n\n        private row_current: number;\n        private column_current: number;\n\n        private i;\n\n        constructor(num_rows: number, num_columns: number) {\n            this.num_rows = num_rows;\n            this.num_columns = num_columns;\n\n            this.i = -1;\n        }\n\n        private next_row() {\n            this.i = this.i + this.num_columns;\n        }\n\n        private next_column() {\n            this.i = this.i + 1;\n        }\n\n        public next() {\n\n            let value: number[] = null;\n\n            this.next_column();\n\n            if (this.i === this.num_columns * this.num_rows + 1) {\n                return {\n                    value: value,\n                    done: true\n                }\n            }\n\n            let pos_row = division_int(this.i + 1, this.num_columns);\n            let pos_column = remainder(this.i + 1, this.num_columns);\n\n            value = [pos_row, pos_column];\n\n            return {\n                value: value,\n                done: false\n            };\n        }\n    }\n\n    type TypeSubtarget = TreeModel.Node<n.Note>;\n\n    type TypeTarget = TypeSubtarget[]\n\n    type SegmentTargetable = TypeTarget[]\n\n    export type TypeHistoryList = SegmentTargetable[]\n\n    export type TypeHistoryMatrix = SegmentTargetable[][]\n\n    export class HistoryList extends HistoryUserInput {\n\n        private list_history: TypeHistoryList;\n\n        public add_subtarget(subtarget: TypeSubtarget): void {\n\n        }\n\n        get_list(): TypeHistoryList {\n            return\n        }\n\n        set_list(): void {\n\n        }\n    }\n\n    export class HistoryMatrix extends HistoryUserInput {\n\n        data: TreeModel.Node<note.Note>[][][];\n\n        logger: Logger;\n\n        constructor(height: number, width: number) {\n            this.data = [];\n            for(let i=0; i<height; i++) {\n                this.data[i] = new Array(width);\n            }\n            this.logger = new Logger('max')\n        }\n\n        set_notes(i_height, i_width, notes): void {\n            this.data[i_height][i_width] = notes\n        }\n\n        get_notes(i_height, i_width): TreeModel.Node<note.Note>[] {\n            return this.data[i_height][i_width]\n        }\n\n        private static serialize(notes: TreeModel.Node<note.Note>[]) {\n            return notes.map((note) => {\n                return JSON.stringify(note.model);\n            })\n        }\n\n        private static deserialize(notes_serialized) {\n            if (notes_serialized === null) {\n                return null\n            }\n            let tree = new TreeModel();\n            return notes_serialized.map((note) => {\n                return tree.parse(JSON.parse(note));\n            })\n        }\n\n        save(filename) {\n            let data_serializable = this.data as any;\n            for (let i_row in this.data) {\n                for (let i_col in this.data[Number(i_row)]) {\n                    data_serializable[Number(i_row)][Number(i_col)] = ParseMatrix.serialize(this.data[Number(i_row)][Number(i_col)])\n                }\n            }\n\n            let f = new File(filename,\"write\",\"JSON\");\n\n            if (f.isopen) {\n                post(\"saving session\");\n                f.writestring(JSON.stringify(data_serializable)); //writes a string\n                f.close();\n            } else {\n                post(\"could not save session\");\n            }\n        }\n\n        public static load(filename) {\n            let f = new File(filename, \"read\",\"JSON\");\n            let a, data_serialized;\n\n            if (f.isopen) {\n                post(\"reading file\");\n                // @ts-ignore\n                while ((a = f.readline()) != null) {\n                    data_serialized = JSON.parse(a)\n                }\n                f.close();\n            } else {\n                post(\"could not open file\");\n            }\n\n            let data_deserialized = data_serialized as any;\n\n            for (let i_row in data_serialized) {\n                for (let i_col in data_serialized[Number(i_row)]) {\n                    // post(i_row);\n                    // post(i_col);\n                    data_deserialized[Number(i_row)][Number(i_col)] = ParseMatrix.deserialize(data_serialized[Number(i_row)][Number(i_col)])\n                }\n            }\n\n            return data_deserialized\n        }\n    }\n}"]}