{"version":3,"file":"history.js","sourceRoot":"","sources":["history.ts"],"names":[],"mappings":"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","sourcesContent":["import {note as n} from \"../note/note\";\nimport {log} from \"../log/logger\";\nimport TreeModel = require(\"tree-model\");\nimport {utils} from \"../utils/utils\";\n\nexport namespace history {\n    import Logger = log.Logger;\n    import division_int = utils.division_int;\n    import remainder = utils.remainder;\n\n    export let serialize = (note: TreeModel.Node<note.Note>) => {\n        return JSON.stringify(note.model);\n    };\n\n    export let deserialize = (note_serialized) => {\n        if (note_serialized === null) {\n            return null\n        }\n        let tree = new TreeModel();\n        return tree.parse(JSON.parse(note_serialized));\n    };\n\n    interface HistoryUserInput {\n        save(filename: string): void\n\n        load(filename: string): HistoryUserInput\n    }\n\n    class TargetHistory implements HistoryUserInput {\n\n        matrix_data: SequenceTarget[][];\n\n        constructor(algorithm, segments) {\n            let matrix_data = [];\n            for (let i=0; i < 1; i++) {\n                matrix_data[i] = new Array(segments.length);\n            }\n            this.matrix_data = matrix_data;\n        }\n\n        set_sequence_target(sequence_target: SequenceTarget, coord_matrix: number[]) {\n            this.matrix_data[coord_matrix[0]][coord_matrix[1]] = sequence_target;\n        }\n\n        get_notes(i_height, i_width): SequenceTarget {\n            return this.matrix_data[i_height][i_width]\n        }\n\n        save(filename) {\n            let data_serializable = this.data as any;\n            for (let i_row in this.data) {\n                for (let i_col in this.data[Number(i_row)]) {\n                    data_serializable[Number(i_row)][Number(i_col)] = ParseMatrix.serialize(this.data[Number(i_row)][Number(i_col)])\n                }\n            }\n\n            let f = new File(filename,\"write\",\"JSON\");\n\n            if (f.isopen) {\n                post(\"saving session\");\n                f.writestring(JSON.stringify(data_serializable)); //writes a string\n                f.close();\n            } else {\n                post(\"could not save session\");\n            }\n        }\n\n        public load(filename): HistoryUserInput {\n            let f = new File(filename, \"read\",\"JSON\");\n            let a, data_serialized;\n\n            if (f.isopen) {\n                post(\"reading file\");\n                // @ts-ignore\n                while ((a = f.readline()) != null) {\n                    data_serialized = JSON.parse(a)\n                }\n                f.close();\n            } else {\n                post(\"could not open file\");\n            }\n\n            let data_deserialized = data_serialized as any;\n\n            for (let i_row in data_serialized) {\n                for (let i_col in data_serialized[Number(i_row)]) {\n                    // post(i_row);\n                    // post(i_col);\n                    data_deserialized[Number(i_row)][Number(i_col)] = ParseMatrix.deserialize(data_serialized[Number(i_row)][Number(i_col)])\n                }\n            }\n\n            return data_deserialized\n        }\n    }\n\n    type TypeSubtarget = TreeModel.Node<n.Note>;\n\n    type TypeTarget = TypeSubtarget[]\n\n    type SequenceNote = TreeModel.Node<n.Note>[];\n\n    type SequenceTarget = TypeTarget[]\n\n    // export type TypeHistoryList = SegmentTargetable[]\n    //\n    // export type TypeHistoryMatrix = SegmentTargetable[][]\n\n    export class ParseHistory implements HistoryUserInput {\n\n        // data: TreeModel.Node<note.Note>[][][];\n\n        matrix_data: SequenceNote[][];\n\n        logger: Logger;\n\n        constructor(algorithm, segments) {\n            let matrix_data = [];\n            for (let i=0; i < algorithm.get_depth(); i++) {\n                if (i == 0) {\n                    matrix_data[i] = new Array(1); // root of tree\n                } else {\n                    matrix_data[i] = new Array(segments.length);\n                }\n            }\n            this.matrix_data = matrix_data;\n        }\n\n        save(filename) {\n            // let data_serializable = this.data as any;\n            // for (let i_row in this.data) {\n            //     for (let i_col in this.data[Number(i_row)]) {\n            //         data_serializable[Number(i_row)][Number(i_col)] = ParseMatrix.serialize(this.data[Number(i_row)][Number(i_col)])\n            //     }\n            // }\n\n            let f = new File(filename,\"write\",\"JSON\");\n\n            if (f.isopen) {\n                post(\"saving session\");\n                f.writestring(JSON.stringify(data_serializable));\n                f.close();\n            } else {\n                post(\"could not save session\");\n            }\n        }\n\n        public load(filename): HistoryUserInput {\n            let f = new File(filename, \"read\",\"JSON\");\n            let a, data_serialized;\n\n            if (f.isopen) {\n                post(\"reading file\");\n                // @ts-ignore\n                while ((a = f.readline()) != null) {\n                    data_serialized = JSON.parse(a)\n                }\n                f.close();\n            } else {\n                post(\"could not open file\");\n            }\n\n            // let data_deserialized = data_serialized as any;\n            //\n            // for (let i_row in data_serialized) {\n            //     for (let i_col in data_serialized[Number(i_row)]) {\n            //         data_deserialized[Number(i_row)][Number(i_col)] = ParseMatrix.deserialize(data_serialized[Number(i_row)][Number(i_col)])\n            //     }\n            // }\n\n            return data_deserialized\n        }\n    }\n}"]}