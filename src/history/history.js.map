{"version":3,"file":"history.js","sourceRoot":"","sources":["history.ts"],"names":[],"mappings":"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","sourcesContent":["import {note as n} from \"../note/note\";\nimport {log} from \"../log/logger\";\nimport TreeModel = require(\"tree-model\");\nimport {utils} from \"../utils/utils\";\nimport {serialize} from \"../serialize/serialize\";\nimport {algorithm} from \"../train/algorithm\";\n\nexport namespace history {\n\n    import serialize_target_sequence = serialize.serialize_target_sequence;\n    import deserialize_target_sequence = serialize.deserialize_target_sequence;\n    import DETECT = algorithm.DETECT;\n    import PREDICT = algorithm.PREDICT;\n    import PARSE = algorithm.PARSE;\n\n    export type TypeSubtarget = TreeModel.Node<n.Note>;\n\n    export type TypeTarget = TypeSubtarget[]\n\n    export type TypeSequenceNote = TreeModel.Node<n.Note>[];\n\n    export type TypeSequenceTarget = TypeTarget[]\n\n    // export class SequenceTarget {\n    //     data: TypeSequenceTarget;\n    //\n    //     constructor() {\n    //\n    //     }\n    //\n    //     get_subtargets() {\n    //\n    //     }\n    // }\n\n    export class FactoryHistoryUserInput {\n        public static create_history_user_input(algorithm, segments) {\n            switch (algorithm.get_name()) {\n                case DETECT: {\n                    return new TargetHistory(algorithm, segments);\n                }\n                case PREDICT: {\n                    return new TargetHistory(algorithm, segments);\n                }\n                case PARSE: {\n                    throw 'parse not yet implemented'\n                }\n                case DETECT: {\n                    throw 'detect not yet implemented'\n                }\n                default: {\n                    throw 'from factory user input'\n                }\n            }\n        }\n    }\n\n    export interface HistoryUserInput {\n        save(filename: string): void\n\n        load(filename: string): HistoryUserInput\n    }\n\n    export class TargetHistory implements HistoryUserInput {\n\n        matrix_data: TypeSequenceTarget[][];\n\n        constructor(algorithm, segments) {\n            let matrix_data = [];\n            for (let i=0; i < 1; i++) {\n                matrix_data[i] = new Array(segments.length);\n            }\n            this.matrix_data = matrix_data;\n        }\n\n        set_sequence_target(sequence_target: TypeSequenceTarget, coord_matrix: number[]) {\n            this.matrix_data[coord_matrix[0]][coord_matrix[1]] = sequence_target;\n        }\n\n        get_sequence_target(i_height, i_width): TypeSequenceTarget {\n            return this.matrix_data[i_height][i_width]\n        }\n\n        save(filename) {\n            let data_serializable = this.matrix_data as any;\n            for (let i_row in this.matrix_data) {\n                for (let i_col in this.matrix_data[Number(i_row)]) {\n                    data_serializable[Number(i_row)][Number(i_col)] = serialize_target_sequence(\n                        this.matrix_data[Number(i_row)][Number(i_col)]\n                    )\n                }\n            }\n\n            let f = new File(filename,\"write\",\"JSON\");\n\n            if (f.isopen) {\n                post(\"saving session\");\n                f.writestring(JSON.stringify(data_serializable));\n                f.close();\n            } else {\n                post(\"could not save session\");\n            }\n        }\n\n        public load(filename): HistoryUserInput {\n            let f = new File(filename, \"read\",\"JSON\");\n            let a, data_deserialized;\n\n            if (f.isopen) {\n                post(\"reading file\");\n                // @ts-ignore\n                while ((a = f.readline()) != null) {\n                    let data_deserialized = JSON.parse(a) as any;\n                }\n                f.close();\n            } else {\n                post(\"could not open file\");\n            }\n\n            // let data_deserialized = data_serialized as any;\n            //\n            // for (let i_row in data_serialized) {\n            //     for (let i_col in data_serialized[Number(i_row)]) {\n            //         data_deserialized[Number(i_row)][Number(i_col)] = ParseMatrix.deserialize(data_serialized[Number(i_row)][Number(i_col)])\n            //     }\n            // }\n            //\n            // return data_deserialized\n\n            for (let i_row in this.matrix_data) {\n                for (let i_col in this.matrix_data[Number(i_row)]) {\n                    data_deserialized[Number(i_row)][Number(i_col)] = deserialize_target_sequence(\n                        data_deserialized[Number(i_row)][Number(i_col)]\n                    )\n                }\n            }\n\n            return data_deserialized\n        }\n    }\n\n    // export type TypeHistoryList = SegmentTargetable[]\n    //\n    // export type TypeHistoryMatrix = SegmentTargetable[][]\n\n    // export class ParseHistory implements HistoryUserInput {\n    //\n    //     // data: TreeModel.Node<note.Note>[][][];\n    //\n    //     matrix_data: SequenceNote[][];\n    //\n    //     logger: Logger;\n    //\n    //     constructor(algorithm, segments) {\n    //         let matrix_data = [];\n    //         for (let i=0; i < algorithm.get_depth(); i++) {\n    //             if (i == 0) {\n    //                 matrix_data[i] = new Array(1); // root of tree\n    //             } else {\n    //                 matrix_data[i] = new Array(segments.length);\n    //             }\n    //         }\n    //         this.matrix_data = matrix_data;\n    //     }\n    //\n    //     save(filename) {\n    //         let data_serializable = this.data as any;\n    //         for (let i_row in this.data) {\n    //             for (let i_col in this.data[Number(i_row)]) {\n    //                 data_serializable[Number(i_row)][Number(i_col)] = ParseMatrix.serialize(this.data[Number(i_row)][Number(i_col)])\n    //             }\n    //         }\n    //\n    //         let f = new File(filename,\"write\",\"JSON\");\n    //\n    //         if (f.isopen) {\n    //             post(\"saving session\");\n    //             f.writestring(JSON.stringify(data_serializable));\n    //             f.close();\n    //         } else {\n    //             post(\"could not save session\");\n    //         }\n    //     }\n    //\n    //     public load(filename): HistoryUserInput {\n    //         let f = new File(filename, \"read\",\"JSON\");\n    //         let a, data_serialized;\n    //\n    //         if (f.isopen) {\n    //             post(\"reading file\");\n    //             // @ts-ignore\n    //             while ((a = f.readline()) != null) {\n    //                 data_serialized = JSON.parse(a)\n    //             }\n    //             f.close();\n    //         } else {\n    //             post(\"could not open file\");\n    //         }\n    //\n    //         // let data_deserialized = data_serialized as any;\n    //         //\n    //         // for (let i_row in data_serialized) {\n    //         //     for (let i_col in data_serialized[Number(i_row)]) {\n    //         //         data_deserialized[Number(i_row)][Number(i_col)] = ParseMatrix.deserialize(data_serialized[Number(i_row)][Number(i_col)])\n    //         //     }\n    //         // }\n    //\n    //         return data_deserialized\n    //     }\n    // }\n}"]}