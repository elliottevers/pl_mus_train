{"version":3,"file":"history.js","sourceRoot":"","sources":["history.ts"],"names":[],"mappings":";;AASA,IAAiB,OAAO,CA2FvB;AA3FD,WAAiB,OAAO;IAqBpB,yCAAyC;IACzC,mFAAmF;IACnF,0CAA0C;IAC1C,6BAA6B;IAC7B,oEAAoE;IACpE,gBAAgB;IAChB,8BAA8B;IAC9B,oEAAoE;IACpE,gBAAgB;IAChB,4BAA4B;IAC5B,mEAAmE;IACnE,gBAAgB;IAChB,6BAA6B;IAC7B,mEAAmE;IACnE,gBAAgB;IAChB,yBAAyB;IACzB,qDAAqD;IACrD,gBAAgB;IAChB,YAAY;IACZ,QAAQ;IACR,IAAI;IAEJ;QAGI,0BAAY,MAAM;YACd,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC;QAC9B,CAAC;QAED,8BAAG,GAAH,UAAI,MAAW,EAAE,KAAe;YAC5B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;QAClD,CAAC;QAED,8BAAG,GAAH,UAAI,KAAe;YACf,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAChD,CAAC;QACL,uBAAC;IAAD,CAAC,AAdD,IAcC;IAdY,wBAAgB,mBAc5B,CAAA;IAED,0DAA0D;IAC1D,+CAA+C;IAC/C,EAAE;IACF,4BAA4B;IAC5B,qCAAqC;IACrC,QAAQ;IACR,EAAE;IACF,4DAA4D;IAC5D,wDAAwD;IACxD,QAAQ;IACR,EAAE;IACF,uDAAuD;IACvD,uDAAuD;IACvD,QAAQ;IACR,IAAI;IACJ,EAAE;IACF,2DAA2D;IAC3D,EAAE;IACF,iCAAiC;IACjC,EAAE;IACF,4BAA4B;IAC5B,oCAAoC;IACpC,QAAQ;IACR,EAAE;IACF,wDAAwD;IACxD,kEAAkE;IAClE,QAAQ;IACR,EAAE;IACF,6BAA6B;IAC7B,uDAAuD;IACvD,QAAQ;IACR,IAAI;AACR,CAAC,EA3FgB,OAAO,GAAP,eAAO,KAAP,eAAO,QA2FvB","sourcesContent":["import {note, note as n} from \"../note/note\";\nimport {log} from \"../log/logger\";\nimport TreeModel = require(\"tree-model\");\nimport {utils} from \"../utils/utils\";\nimport {serialize} from \"../serialize/serialize\";\nimport {algorithm} from \"../train/algorithm\";\nimport {target} from \"../target/target\";\nimport {trainer} from \"../train/trainer\";\n\nexport namespace history {\n\n    import serialize_target_sequence = serialize.serialize_target_sequence;\n    import deserialize_target_sequence = serialize.deserialize_target_sequence;\n    import DETECT = algorithm.DETECT;\n    import PREDICT = algorithm.PREDICT;\n    import PARSE = algorithm.PARSE;\n    import DERIVE = algorithm.DERIVE;\n    import Subtarget = target.Subtarget;\n    // import MatrixIterator = trainer.MatrixIterator;\n    import Target = target.Target;\n    import Note = note.Note;\n\n    export type TypeSubtarget = TreeModel.Node<n.Note>;\n\n    export type TypeTarget = TypeSubtarget[]\n\n    export type TypeSequenceNote = TreeModel.Node<n.Note>[];\n\n    export type TypeSequenceTarget = TypeTarget[]\n\n    // export class FactoryHistoryUserInput {\n    //     public static create_history_user_input(algorithm, matrix_target_iterator) {\n    //         switch (algorithm.get_name()) {\n    //             case DETECT: {\n    //                 return new TargetHistory(matrix_target_iterator);\n    //             }\n    //             case PREDICT: {\n    //                 return new TargetHistory(matrix_target_iterator);\n    //             }\n    //             case PARSE: {\n    //                 return new PhaseHistory(matrix_target_iterator);\n    //             }\n    //             case DERIVE: {\n    //                 return new PhaseHistory(matrix_target_iterator);\n    //             }\n    //             default: {\n    //                 throw 'factory history user input'\n    //             }\n    //         }\n    //     }\n    // }\n\n    export class HistoryUserInput {\n        matrix_data: TreeModel.Node<Note>[][][];\n\n        constructor(matrix) {\n            this.matrix_data = matrix;\n        }\n\n        add(struct: any, coord: number[]) {\n            this.matrix_data[coord[0]][coord[1]] = struct;\n        }\n\n        get(coord: number[]): any {\n            return this.matrix_data[coord[0]][coord[1]];\n        }\n    }\n\n    // export class PhaseHistory implements HistoryUserInput {\n    //     matrix_data: TreeModel.Node<Note>[][][];\n    //\n    //     constructor(matrix) {\n    //         this.matrix_data = matrix;\n    //     }\n    //\n    //     add(notes: TreeModel.Node<Note>[], coord: number[]) {\n    //         this.matrix_data[coord[0]][coord[1]] = notes;\n    //     }\n    //\n    //     get(coord: number[]): TreeModel.Node<n.Note>[] {\n    //         return this.matrix_data[coord[0]][coord[1]];\n    //     }\n    // }\n    //\n    // export class TargetHistory implements HistoryUserInput {\n    //\n    //     matrix_data: Target[][][];\n    //\n    //     constructor(matrix) {\n    //         this.matrix_data = matrix\n    //     }\n    //\n    //     add(target_sequence: Target[], coord: number[]) {\n    //         this.matrix_data[coord[0]][coord[1]] = target_sequence;\n    //     }\n    //\n    //     get(coord: number[]) {\n    //         return this.matrix_data[coord[0]][coord[1]];\n    //     }\n    // }\n}"]}