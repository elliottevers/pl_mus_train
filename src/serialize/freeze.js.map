{"version":3,"file":"freeze.js","sourceRoot":"","sources":["freeze.ts"],"names":[],"mappings":";;AACA,gDAA6C;AAC7C,mCAAgC;AAChC,yCAAsC;AAEtC,IAAiB,MAAM,CA0DtB;AA1DD,WAAiB,MAAM;IAGnB,IAAO,MAAM,GAAG,qBAAS,CAAC,MAAM,CAAC;IACjC,IAAO,OAAO,GAAG,qBAAS,CAAC,OAAO,CAAC;IACnC,IAAO,KAAK,GAAG,qBAAS,CAAC,KAAK,CAAC;IAC/B,IAAO,OAAO,GAAG,WAAI,CAAC,OAAO,CAAC;IAC9B,IAAO,uBAAuB,GAAG,qBAAS,CAAC,uBAAuB,CAAC;IACnE,IAAO,MAAM,GAAG,qBAAS,CAAC,MAAM,CAAC;IAEjC;QAII,sBAAY,GAAW;YACnB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACnB,CAAC;QAEM,6BAAM,GAAb,UAAc,OAAgB,EAAE,QAAgB;YAC5C,IAAI,iBAAiB,GAAG,OAAO,CAAC,kBAAkB,CAAC,WAAkB,CAAC;YAEtE,QAAQ,OAAO,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE;gBAClC,KAAK,MAAM,CAAC,CAAC;oBACT,KAAK,IAAI,KAAK,IAAI,OAAO,CAAC,kBAAkB,CAAC,WAAW,EAAE;wBACtD,KAAK,IAAI,KAAK,IAAI,OAAO,CAAC,kBAAkB,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;4BACrE,+EAA+E;4BAC/E,2EAA2E;4BAC3E,IAAI;4BACJ,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,uBAAuB,CACrE,OAAO,CAAC,kBAAkB,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CACvE,CAAA;yBACJ;qBACJ;oBACD,MAAM;iBACT;gBACD,KAAK,OAAO,CAAC,CAAC;oBACV,OAAO;oBACP,MAAM;iBACT;gBACD,KAAK,KAAK,CAAC,CAAC;oBACR,KAAK,IAAI,KAAK,IAAI,OAAO,CAAC,kBAAkB,CAAC,WAAW,EAAE;wBACtD,KAAK,IAAI,KAAK,IAAI,OAAO,CAAC,kBAAkB,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;4BACrE,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,uBAAuB,CACrE,OAAO,CAAC,kBAAkB,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CACvE,CAAA;yBACJ;qBACJ;oBACD,MAAM;iBACT;gBACD,KAAK,MAAM,CAAC,CAAC;oBACT,OAAO;oBACP,MAAM;iBACT;aACJ;YAED,OAAO,CAAC,iBAAiB,EAAE,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC,CAAA;QAClD,CAAC;QACL,mBAAC;IAAD,CAAC,AA/CD,IA+CC;IA/CY,mBAAY,eA+CxB,CAAA;AACL,CAAC,EA1DgB,MAAM,GAAN,cAAM,KAAN,cAAM,QA0DtB","sourcesContent":["import {trainer} from \"../train/trainer\";\nimport {algorithm} from \"../train/algorithm\";\nimport {file} from \"../io/file\";\nimport {serialize} from \"./serialize\";\n\nexport namespace freeze {\n\n    import Trainer = trainer.Trainer;\n    import DETECT = algorithm.DETECT;\n    import PREDICT = algorithm.PREDICT;\n    import PARSE = algorithm.PARSE;\n    import to_json = file.to_json;\n    import serialize_sequence_note = serialize.serialize_sequence_note;\n    import DERIVE = algorithm.DERIVE;\n\n    export class TrainFreezer {\n\n        env: string;\n\n        constructor(env: string) {\n            this.env = env;\n        }\n\n        public freeze(trainer: Trainer, filepath: string) {\n            let data_serializable = trainer.history_user_input.matrix_data as any;\n\n            switch (trainer.trainable.get_name()) {\n                case DETECT: {\n                    for (let i_row in trainer.history_user_input.matrix_data) {\n                        for (let i_col in trainer.history_user_input.matrix_data[Number(i_row)]) {\n                            // data_serializable[Number(i_row)][Number(i_col)] = serialize_target_sequence(\n                            //     trainer.history_user_input.matrix_data[Number(i_row)][Number(i_col)]\n                            // )\n                            data_serializable[Number(i_row)][Number(i_col)] = serialize_sequence_note(\n                                trainer.history_user_input.matrix_data[Number(i_row)][Number(i_col)]\n                            )\n                        }\n                    }\n                    break;\n                }\n                case PREDICT: {\n                    // TODO\n                    break;\n                }\n                case PARSE: {\n                    for (let i_row in trainer.history_user_input.matrix_data) {\n                        for (let i_col in trainer.history_user_input.matrix_data[Number(i_row)]) {\n                            data_serializable[Number(i_row)][Number(i_col)] = serialize_sequence_note(\n                                trainer.history_user_input.matrix_data[Number(i_row)][Number(i_col)]\n                            )\n                        }\n                    }\n                    break;\n                }\n                case DERIVE: {\n                    // TODO\n                    break;\n                }\n            }\n\n            to_json(data_serializable, filepath, this.env)\n        }\n    }\n}"]}