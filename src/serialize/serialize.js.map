{"version":3,"file":"serialize.js","sourceRoot":"","sources":["serialize.ts"],"names":[],"mappings":";;AAEA,sCAAyC;AACzC,4CAAyC;AACzC,mCAAgC;AAEhC,IAAiB,SAAS,CA0DzB;AA1DD,WAAiB,SAAS;IAEX,wBAAc,GAAG,UAAC,IAA+B;QACxD,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC,CAAC;IAES,0BAAgB,GAAG,UAAC,eAAe;QAC1C,IAAI,eAAe,KAAK,IAAI,EAAE;YAC1B,OAAO,IAAI,CAAA;SACd;QACD,IAAI,IAAI,GAAG,IAAI,SAAS,EAAE,CAAC;QAC3B,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC;IAIS,6BAAmB,GAAG,UAAC,SAAoB;QAClD,IAAI,oBAAyB,CAAC;QAC9B,YAAY;QACZ,wCAAwC;QACxC,oBAAoB,GAAG,SAAS,CAAC;QACjC,oBAAoB,CAAC,IAAI,GAAG,UAAA,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC3D,OAAO,oBAAoB,CAAC;IAChC,CAAC,CAAC;IAES,+BAAqB,GAAG,UAAC,oBAAoB;QACpD,IAAI,sBAAsB,GAAG,oBAAoB,CAAC;QAClD,sBAAsB,CAAC,IAAI,GAAG,UAAA,gBAAgB,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QAC1E,OAAO,sBAAsB,CAAC;IAClC,CAAC,CAAC;IAEF,kDAAkD;IAEvC,mCAAyB,GAAG,UAAC,eAAe;QACnD,IAAI,0BAA0B,GAAG,eAAe,CAAC;QACjD,KAAK,IAAI,QAAQ,IAAI,eAAe,EAAE;YAClC,IAAI,UAAU,GAAG,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,kBAAkB,CAAC,UAAU,CAAC;YACjF,KAAK,IAAI,WAAW,IAAI,UAAU,EAAE;gBAChC,IAAI,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;gBAChD,0BAA0B,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,UAAA,mBAAmB,CAAC,SAAS,CAAC,CAAA;aACrG;SACJ;QACD,OAAO,0BAA0B,CAAC;IACtC,CAAC,CAAC;IAEF,oBAAoB;IACT,qCAA2B,GAAG,UAAC,0BAA0B;QAChE,IAAI,4BAA4B,GAAG,0BAA0B,CAAC;QAE9D,KAAK,IAAI,QAAQ,IAAI,0BAA0B,EAAE;YAC7C,IAAI,UAAU,GAAG,0BAA0B,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC;YAC/E,KAAK,IAAI,WAAW,IAAI,UAAU,EAAE;gBAChC,IAAI,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;gBAChD,4BAA4B,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,GAAG,UAAA,qBAAqB,CAAC,SAAS,CAAC,CAAA;aACzG;SACJ;QACD,OAAO,4BAA4B,CAAC;IACxC,CAAC,CAAC;AACN,CAAC,EA1DgB,SAAS,GAAT,iBAAS,KAAT,iBAAS,QA0DzB;AAED,IAAiB,MAAM,CAuBtB;AAvBD,WAAiB,MAAM;IAEnB,IAAO,yBAAyB,GAAG,SAAS,CAAC,yBAAyB,CAAC;IACvE,IAAO,OAAO,GAAG,WAAI,CAAC,OAAO,CAAC;IAE9B;QACI,sBAAY,GAAW;QAEvB,CAAC;QAEM,6BAAM,GAAb,UAAc,OAAgB,EAAE,QAAgB,EAAE,GAAW;YACzD,IAAI,iBAAiB,GAAG,OAAO,CAAC,kBAAkB,CAAC,WAAkB,CAAC;YACtE,KAAK,IAAI,KAAK,IAAI,OAAO,CAAC,kBAAkB,CAAC,WAAW,EAAE;gBACtD,KAAK,IAAI,KAAK,IAAI,OAAO,CAAC,kBAAkB,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;oBACrE,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,yBAAyB,CACvE,OAAO,CAAC,kBAAkB,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CACvE,CAAA;iBACJ;aACJ;YAED,OAAO,CAAC,iBAAiB,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAA;QAC7C,CAAC;QACL,mBAAC;IAAD,CAAC,AAjBD,IAiBC;IAjBY,mBAAY,eAiBxB,CAAA;AACL,CAAC,EAvBgB,MAAM,GAAN,cAAM,KAAN,cAAM,QAuBtB;AAED,IAAiB,IAAI,CAkCpB;AAlCD,WAAiB,IAAI;IACjB,IAAO,OAAO,GAAG,iBAAO,CAAC,OAAO,CAAC;IACjC,IAAO,2BAA2B,GAAG,SAAS,CAAC,2BAA2B,CAAC;IAC3E,IAAO,SAAS,GAAG,WAAI,CAAC,SAAS,CAAC;IAElC;QACI,qBAAY,GAAW;QAEvB,CAAC;QAEM,0BAAI,GAAX,UAAY,QAAgB,EAAE,MAAM;YAEhC,IAAI,mBAAmB,GAAG,SAAS,CAAC,QAAQ,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YAE7D,KAAK,IAAI,KAAK,IAAI,mBAAmB,EAAE;gBACnC,KAAK,IAAI,KAAK,IAAI,mBAAmB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;oBAClD,mBAAmB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,2BAA2B,CAC3E,mBAAmB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CACpD,CAAA;iBACJ;aACJ;YAED,OAAO,IAAI,OAAO,CACd,MAAM,CAAC,QAAQ,CAAC,EAChB,MAAM,CAAC,oBAAoB,CAAC,EAC5B,MAAM,CAAC,WAAW,CAAC,EACnB,MAAM,CAAC,iBAAiB,CAAC,EACzB,MAAM,CAAC,qBAAqB,CAAC,EAC7B,MAAM,CAAC,MAAM,CAAC,EACd,MAAM,CAAC,UAAU,CAAC,EAClB,MAAM,CAAC,WAAW,CAAC,CACtB,CAAC;QACN,CAAC;QACL,kBAAC;IAAD,CAAC,AA5BD,IA4BC;IA5BY,gBAAW,cA4BvB,CAAA;AACL,CAAC,EAlCgB,IAAI,GAAJ,YAAI,KAAJ,YAAI,QAkCpB","sourcesContent":["import {target} from \"../target/target\";\nimport {note} from \"../note/note\";\nimport TreeModel = require(\"tree-model\");\nimport {trainer} from \"../train/trainer\";\nimport {file} from \"../io/file\";\n\nexport namespace serialize {\n\n    export let serialize_note = (note: TreeModel.Node<note.Note>) => {\n        return JSON.stringify(note.model);\n    };\n\n    export let deserialize_note = (note_serialized) => {\n        if (note_serialized === null) {\n            return null\n        }\n        let tree = new TreeModel();\n        return tree.parse(JSON.parse(note_serialized));\n    };\n\n    import Subtarget = target.Subtarget;\n\n    export let serialize_subtarget = (subtarget: Subtarget) => {\n        let subtarget_serialized: any;\n        // TODO: fix\n        // let subtarget_serialized = subtarget;\n        subtarget_serialized = subtarget;\n        subtarget_serialized.note = serialize_note(subtarget.note);\n        return subtarget_serialized;\n    };\n\n    export let deserialize_subtarget = (subtarget_serialized) => {\n        let subtarget_deserialized = subtarget_serialized;\n        subtarget_deserialized.note = deserialize_note(subtarget_serialized.note);\n        return subtarget_deserialized;\n    };\n\n    // import SequenceTarget = history.SequenceTarget;\n\n    export let serialize_target_sequence = (sequence_target) => {\n        let sequence_target_serialized = sequence_target;\n        for (let i_target in sequence_target) {\n            let subtargets = sequence_target[Number(i_target)].iterator_subtarget.subtargets;\n            for (let i_subtarget in subtargets) {\n                let subtarget = subtargets[Number(i_subtarget)];\n                sequence_target_serialized[Number(i_target)][Number(i_subtarget)] = serialize_subtarget(subtarget)\n            }\n        }\n        return sequence_target_serialized;\n    };\n\n    // TODO: deserialize\n    export let deserialize_target_sequence = (sequence_target_serialized) => {\n        let sequence_target_deserialized = sequence_target_serialized;\n\n        for (let i_target in sequence_target_serialized) {\n            let subtargets = sequence_target_serialized[Number(i_target)].get_subtargets();\n            for (let i_subtarget in subtargets) {\n                let subtarget = subtargets[Number(i_subtarget)];\n                sequence_target_deserialized[Number(i_target)][Number(i_subtarget)] = deserialize_subtarget(subtarget)\n            }\n        }\n        return sequence_target_deserialized;\n    };\n}\n\nexport namespace freeze {\n    import Trainer = trainer.Trainer;\n    import serialize_target_sequence = serialize.serialize_target_sequence;\n    import to_json = file.to_json;\n\n    export class TrainFreezer {\n        constructor(env: string) {\n\n        }\n\n        public freeze(trainer: Trainer, filepath: string, env: string) {\n            let data_serializable = trainer.history_user_input.matrix_data as any;\n            for (let i_row in trainer.history_user_input.matrix_data) {\n                for (let i_col in trainer.history_user_input.matrix_data[Number(i_row)]) {\n                    data_serializable[Number(i_row)][Number(i_col)] = serialize_target_sequence(\n                        trainer.history_user_input.matrix_data[Number(i_row)][Number(i_col)]\n                    )\n                }\n            }\n\n            to_json(data_serializable, filepath, env)\n        }\n    }\n}\n\nexport namespace thaw {\n    import Trainer = trainer.Trainer;\n    import deserialize_target_sequence = serialize.deserialize_target_sequence;\n    import from_json = file.from_json;\n\n    export class TrainThawer {\n        constructor(env: string) {\n\n        }\n\n        public thaw(filepath: string, config): Trainer {\n\n            let matrix_deserialized = from_json(filepath, config['env']);\n\n            for (let i_row in matrix_deserialized) {\n                for (let i_col in matrix_deserialized[Number(i_row)]) {\n                    matrix_deserialized[Number(i_row)][Number(i_col)] = deserialize_target_sequence(\n                        matrix_deserialized[Number(i_row)][Number(i_col)]\n                    )\n                }\n            }\n\n            return new Trainer(\n                config['window'],\n                config['user_input_handler'],\n                config['algorithm'],\n                config['clip_user_input'],\n                config['clip_target_virtual'],\n                config['song'],\n                config['segments'],\n                config['messenger']\n            );\n        }\n    }\n}"]}