{"version":3,"file":"serialize.js","sourceRoot":"","sources":["serialize.ts"],"names":[],"mappings":"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","sourcesContent":["import {target} from \"../target/target\";\nimport {note} from \"../note/note\";\nimport TreeModel = require(\"tree-model\");\nimport {trainer} from \"../train/trainer\";\nimport {file} from \"../io/file\";\n\nexport namespace serialize {\n\n    export let serialize_note = (note: TreeModel.Node<note.Note>) => {\n        return JSON.stringify(note.model);\n    };\n\n    export let deserialize_note = (note_serialized) => {\n        if (note_serialized === null) {\n            return null\n        }\n        let tree = new TreeModel();\n        return tree.parse(JSON.parse(note_serialized));\n    };\n\n    import Subtarget = target.Subtarget;\n\n    export let serialize_subtarget = (subtarget: Subtarget) => {\n        let subtarget_serialized: any;\n        // TODO: fix\n        // let subtarget_serialized = subtarget;\n        subtarget_serialized = subtarget;\n        subtarget_serialized.note = serialize_note(subtarget.note);\n        return subtarget_serialized;\n    };\n\n    export let deserialize_subtarget = (subtarget_serialized) => {\n        let subtarget_deserialized = subtarget_serialized;\n        subtarget_deserialized.note = deserialize_note(subtarget_serialized.note);\n        return subtarget_deserialized;\n    };\n\n    // import SequenceTarget = history.SequenceTarget;\n\n    export let serialize_target_sequence = (sequence_target) => {\n        let sequence_target_serialized = sequence_target;\n        for (let i_target in sequence_target) {\n            let subtargets = sequence_target[Number(i_target)].iterator_subtarget.subtargets;\n            for (let i_subtarget in subtargets) {\n                let subtarget = subtargets[Number(i_subtarget)];\n                sequence_target_serialized[Number(i_target)][Number(i_subtarget)] = serialize_subtarget(subtarget)\n            }\n        }\n        return sequence_target_serialized;\n    };\n\n    // TODO: deserialize\n    export let deserialize_target_sequence = (sequence_target_serialized) => {\n        let sequence_target_deserialized = sequence_target_serialized;\n\n        for (let i_target in sequence_target_serialized) {\n            let subtargets = sequence_target_serialized[Number(i_target)].get_subtargets();\n            for (let i_subtarget in subtargets) {\n                let subtarget = subtargets[Number(i_subtarget)];\n                sequence_target_deserialized[Number(i_target)][Number(i_subtarget)] = deserialize_subtarget(subtarget)\n            }\n        }\n        return sequence_target_deserialized;\n    };\n}\n\nexport namespace freeze {\n    import Trainer = trainer.Trainer;\n    import serialize_target_sequence = serialize.serialize_target_sequence;\n    import to_json = file.to_json;\n\n    export class TrainFreezer {\n\n        env: string;\n\n        constructor(env: string) {\n            this.env = env;\n        }\n\n        public freeze(trainer: Trainer, filepath: string) {\n            let data_serializable = trainer.history_user_input.matrix_data as any;\n            for (let i_row in trainer.history_user_input.matrix_data) {\n                for (let i_col in trainer.history_user_input.matrix_data[Number(i_row)]) {\n                    data_serializable[Number(i_row)][Number(i_col)] = serialize_target_sequence(\n                        trainer.history_user_input.matrix_data[Number(i_row)][Number(i_col)]\n                    )\n                }\n            }\n\n            to_json(data_serializable, filepath, this.env)\n        }\n    }\n}\n\nexport namespace thaw {\n    import Trainer = trainer.Trainer;\n    import deserialize_target_sequence = serialize.deserialize_target_sequence;\n    import from_json = file.from_json;\n    import Note = note.Note;\n\n    export class TrainThawer {\n        constructor(env: string) {\n\n        }\n\n        public thaw(filepath: string, config): Trainer {\n\n            let matrix_deserialized = from_json(filepath, config['env']);\n\n            let notes = [];\n\n            for (let row of matrix_deserialized) {\n                for (let col of row) {\n                    if (col === null) {\n                        continue;\n                    }\n                    for (let sequence_target of col) {\n                        for (let note of sequence_target.iterator_subtarget.subtargets) {\n                            notes.push(note)\n                        }\n                    }\n                }\n            }\n\n            let notes_parsed = notes.map((obj)=>{return JSON.parse(obj.note)});\n\n            let trainer =  new Trainer(\n                config['window'],\n                config['user_input_handler'],\n                config['algorithm'],\n                config['clip_user_input'],\n                config['clip_target_virtual'],\n                config['song'],\n                config['segments'],\n                config['messenger']\n            );\n\n            trainer.init(\n\n            );\n\n            let tree: TreeModel = new TreeModel();\n\n            for (let note_parsed of notes_parsed) {\n                let note_recovered = tree.parse(\n                    {\n                        id: -1, // TODO: hashing scheme for clip id and beat start\n                        note: new Note(\n                            note_parsed.note.pitch,\n                            note_parsed.note.beat_start,\n                            note_parsed.note.beats_duration,\n                            note_parsed.note.velocity,\n                            note_parsed.note.b_muted\n                        ),\n                        children: [\n\n                        ]\n                    }\n                );\n                trainer.accept_input(\n                    [note_recovered]\n                );\n            }\n\n            return trainer;\n        }\n    }\n}"]}