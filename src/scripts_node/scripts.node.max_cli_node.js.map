{"version":3,"file":"scripts.node.max_cli_node.js","sourceRoot":"","sources":["scripts.node.max_cli_node.ts"],"names":[],"mappings":"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","sourcesContent":["import {cli} from \"../cli/cli\";\n\nlet shell = require('shelljs');\n\nlet arg_url = new cli.Arg('url');\nlet option_outfile = new cli.Option('o', false, false, true);\nlet flag_audio_only = new cli.Flag('x');\nlet option_format = new cli.Option('audio-format');\n\nlet executable_youtube_dl = new cli.Executable(\n    '/usr/local/bin/youtube-dl',\n    [flag_audio_only],\n    [option_outfile, option_format],\n    [arg_url]\n);\n\nlet run = () => {\n    executable_youtube_dl.run()\n};\n\nlet set_arg = (name_arg, val_arg) => {\n    executable_youtube_dl.get_arg(name_arg).set(val_arg);\n};\n\nlet set_flag = (name_flag, val_flag) => {\n    executable_youtube_dl.get_flag(name_flag).set(val_flag);\n};\n\nlet set_option = (name_opt, val_opt) => {\n    executable_youtube_dl.get_opt(name_opt).set(val_opt);\n};\n\n\nlet git_repo = '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync';\n\nset_arg('url', 'https://www.youtube.com/watch?v=Uybtn6ebG0I');\nset_option('o', git_repo + '/tk_music_projects/downloads/project_name.%(ext)s');\nset_flag('x', 1);\nset_option('audio-format', 'wav');\n\n// console.log(executable_youtube_dl.get_command_full());\n\n    // messenger.message(log_cmd('/usr/local/bin/youtube-dl'));\n\n\n    // set_arg('file_out', git_repo + '/audio/youtube/tswift_teardrops.mp3');\n    // set_option('i', git_repo + '/audio/youtube/tswift_teardrops.*');\n\n    // messenger.message(log_cmd('/usr/local/bin/ffmpeg'));\n// };\n\n// let script: cli.Script;\n\n// let messenger = new Messenger(env, 0);\n\n// let args: cli.Arg[] = [];\n// let options: cli.Option[] = [];\n// let flags: cli.Flag[] = [];\n//\n// let path_interpreter;\n// let path_script;\n\n// let run = () => {\n//     script = new cli.Script(\n//         path_interpreter,\n//         path_script,\n//         flags,\n//         options,\n//         args,\n//         messenger,\n//         true\n//     );\n//     script.run()\n// };\n\n// let set_arg = (name_arg, val_arg) => {\n//     if (_.contains(args.map((arg) => {return arg.name}), name_arg)) {\n//         let arg_existing = args.filter(arg => arg.name === name_arg)[0];\n//         arg_existing.set(val_arg);\n//     } else {\n//         let arg = new cli.Arg(name_arg);\n//         arg.set(val_arg);\n//         args.push(arg);\n//     }\n// };\n//\n// let set_flag = (name_flag, val_flag) => {\n//     if (_.contains(flags.map((flag) => {return flag.name}), name_flag)) {\n//         let flag_existing = flags.filter(flag => flag.name === name_flag)[0];\n//         flag_existing.set(val_flag);\n//     } else {\n//         let flag = new cli.Flag(name_flag);\n//         flag.set(val_flag);\n//         flags.push(flag);\n//     }\n// };\n//\n// let set_option = (name_opt, val_opt) => {\n//     if (_.contains(options.map((opt) => {return opt.name}), name_opt)) {\n//         let opt_existing = options.filter(opt => opt.name === name_opt)[0];\n//         opt_existing.set(val_opt);\n//     } else {\n//         let opt = new cli.Option(name_opt);\n//         opt.set(val_opt);\n//         options.push(opt);\n//     }\n// };\n//\n// let set_interpreter = (path) => {\n//     // path_interpreter = path;\n// };\n//\n// let set_script = (path) => {\n//     // path_script = path;\n// };\n\n\n\n\n\n\n\n\n\nshell.exec(\n    executable_youtube_dl.get_command_full().join(' '),\n{silent:true}\n);\n\n\n\n\n\n\n\n\n// console.log(version);\n\n// let child = shell.exec('some_long_running_process', {async:true});\n// child.stdout.on('data', function(data) {\n//     /* ... do something with data ... */\n// });\n//\n// shell.exec('some_long_running_process', function(code, stdout, stderr) {\n//     console.log('Exit code:', code);\n//     console.log('Program output:', stdout);\n//     console.log('Program stderr:', stderr);\n// });"]}