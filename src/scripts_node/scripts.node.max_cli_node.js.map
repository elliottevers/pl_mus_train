{"version":3,"file":"scripts.node.max_cli_node.js","sourceRoot":"","sources":["scripts.node.max_cli_node.ts"],"names":[],"mappings":"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","sourcesContent":["import {cli} from \"../cli/cli\";\nlet shell = require('shelljs');\nconst _ = require('underscore');\nconst max_api = require('max-api');\n\nlet executable: cli.Executable;\n\nlet args: cli.Arg[] = [];\nlet options: cli.Option[] = [];\nlet flags: cli.Flag[] = [];\n\nlet path_binary;\n\nmax_api.addHandler(\"run\", () => {\n    executable = new cli.Executable(\n        path_binary,\n        flags,\n        options,\n        args\n    );\n\n    executable.run();\n\n    let msg;\n\n    shell.exec(\n        executable.get_command_full().join(' '),\n        {silent: true},\n        (code, stdout, stderr) => {\n            if (code === 0) {\n                msg = 'done'\n            } else {\n                msg = 'error'\n            }\n        }\n    );\n\n    max_api.outlet(msg);\n});\n\nmax_api.addHandler(\"set_arg\", (name_arg, val_arg) => {\n    if (_.contains(args.map((arg) => {return arg.name}), name_arg)) {\n        let arg_existing = args.filter(arg => arg.name === name_arg)[0];\n        arg_existing.set(val_arg);\n    } else {\n        let arg = new cli.Arg(name_arg);\n        arg.set(val_arg);\n        args.push(arg);\n    }\n});\n\nmax_api.addHandler(\"set_flag\", (name_flag, val_flag) => {\n    if (_.contains(flags.map((flag) => {return flag.name}), name_flag)) {\n        let flag_existing = flags.filter(flag => flag.name === name_flag)[0];\n        flag_existing.set(val_flag);\n    } else {\n        let flag = new cli.Flag(name_flag);\n        flag.set(val_flag);\n        flags.push(flag);\n    }\n});\n\nmax_api.addHandler(\"set_option\", (name_opt, val_opt, num_dashes?: number) => {\n    if (_.contains(options.map((opt) => {return opt.name}), name_opt)) {\n        let opt_existing = options.filter(opt => opt.name === name_opt)[0];\n        opt_existing.set(val_opt);\n    } else {\n        let opt = new cli.Option(name_opt, false, false, true, num_dashes);\n        opt.set(val_opt);\n        options.push(opt);\n    }\n});\n\nmax_api.addHandler(\"set_executable\", (path) => {\n    path_binary = path;\n});\n"]}