{"version":3,"file":"download_youtube.js","sourceRoot":"","sources":["download_youtube.ts"],"names":[],"mappings":";;AAAA,kCAA+B;AAC/B,IAAI,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAC/B,sCAAsC;AAEtC,IAAI,OAAO,GAAG,IAAI,SAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACjC,IAAI,cAAc,GAAG,IAAI,SAAG,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;AAC7D,IAAI,eAAe,GAAG,IAAI,SAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACxC,IAAI,aAAa,GAAG,IAAI,SAAG,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;AAEnD,IAAI,QAAQ,GAAG,mEAAmE,CAAC;AAEnF,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AAEzB,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAEvB,IAAI,YAAY,CAAC;AAEjB,oBAAoB;AACpB,0CAA0C;AAE1C,2CAA2C;AAC3C,wBAAwB;AACxB,MAAM;AACN,EAAE;AACF,qDAAqD;AACrD,0BAA0B;AAC1B,MAAM;AAEN,2CAA2C;AAC3C,wBAAwB;AACxB,MAAM;AACN,EAAE;AACF,qDAAqD;AACrD,0BAA0B;AAC1B,MAAM;AAEN,OAAO,CAAC,GAAG,CAAC,6CAA6C,CAAC,CAAC;AAE3D,YAAY,GAAG,cAAc,CAAC;AAE9B,IAAI,QAAQ,GAAG;IACX,IAAI,WAAW,GAAG,QAAQ,GAAG,8BAA8B,GAAG,YAAY,CAAC;IAE3E,IAAI,SAAS,GAAG,WAAW,GAAG,QAAQ,CAAC;IAEvC,IAAI,aAAa,GAAG,QAAQ,GAAG,+BAA+B,CAAC;IAE/D,qBAAqB;IAErB,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IAE/B,wCAAwC;IAExC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAE7B,4CAA4C;IAE5C,IAAI,GAAG,CAAC;IAER,cAAc,CAAC,GAAG,CAAC,SAAS,GAAG,GAAG,GAAG,YAAY,GAAG,UAAU,CAAC,CAAC;IAEhE,IAAI,2BAA2B,GAAG,IAAI,SAAG,CAAC,UAAU,CAChD,2BAA2B,EAC3B,CAAC,eAAe,CAAC,EACjB,CAAC,cAAc,EAAE,aAAa,CAAC,EAC/B,CAAC,OAAO,CAAC,CACZ,CAAC;IAEF,KAAK,CAAC,IAAI,CACN,2BAA2B,CAAC,gBAAgB,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,EACxD,EAAC,MAAM,EAAE,IAAI,EAAC,CACjB,CAAC;IAEF,cAAc,CAAC,GAAG,CAAC,aAAa,GAAG,GAAG,GAAG,YAAY,GAAG,UAAU,CAAC,CAAC;IAEpE,IAAI,+BAA+B,GAAG,IAAI,SAAG,CAAC,UAAU,CACpD,2BAA2B,EAC3B,CAAC,eAAe,CAAC,EACjB,CAAC,cAAc,EAAE,aAAa,CAAC,EAC/B,CAAC,OAAO,CAAC,CACZ,CAAC;IAEF,KAAK,CAAC,IAAI,CACN,+BAA+B,CAAC,gBAAgB,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,EAC5D,EAAC,MAAM,EAAE,IAAI,EAAC,EACd,UAAC,IAAI,EAAE,MAAM,EAAE,MAAM;QACjB,IAAI,IAAI,KAAK,CAAC,EAAE;YACZ,GAAG,GAAG,MAAM,CAAA;SACf;aAAM;YACH,GAAG,GAAG,OAAO,CAAA;SAChB;IACL,CAAC,CACJ,CAAC;IAEF,uBAAuB;AAC3B,CAAC,CAAC;AAEF,yCAAyC;AACzC,iBAAiB;AACjB,MAAM;AAEN,QAAQ,EAAE,CAAA","sourcesContent":["import {cli} from \"../cli/cli\";\nlet shell = require('shelljs');\n// const max_api = require('max-api');\n\nlet arg_url = new cli.Arg('url');\nlet option_outfile = new cli.Option('o', false, false, true);\nlet flag_audio_only = new cli.Flag('x');\nlet option_format = new cli.Option('audio-format');\n\nlet git_repo = '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync';\n\noption_format.set('wav');\n\nflag_audio_only.set(1);\n\nlet name_project;\n\n// TODO: set arg url\n// TODO: get project name from save dialog\n\n// max_api.addHandler('set_url', (url) => {\n//     arg_url.set(url);\n// });\n//\n// max_api.addHandler('set_project_name', (name) => {\n//     name_project = name\n// });\n\n// max_api.addHandler('set_url', (url) => {\n//     arg_url.set(url);\n// });\n//\n// max_api.addHandler('set_project_name', (name) => {\n//     name_project = name\n// });\n\narg_url.set('https://www.youtube.com/watch?v=Uybtn6ebG0I');\n\nname_project = 'project_name';\n\nlet download = () => {\n    let dir_project = git_repo + '/tk_music_projects/projects/' + name_project;\n\n    let dir_audio = dir_project + '/audio';\n\n    let dir_downloads = git_repo + '/tk_music_projects/downloads/';\n\n    // mkdir project name\n\n    shell.mkdir('-p', dir_project);\n\n    // mkdir underneath project called audio\n\n    shell.mkdir('-p', dir_audio);\n\n    // download to 1) audio dir 2) downloads dir\n\n    let msg;\n\n    option_outfile.set(dir_audio + '/' + name_project + '.%(ext)s');\n\n    let executable_youtube_dl_audio = new cli.Executable(\n        '/usr/local/bin/youtube-dl',\n        [flag_audio_only],\n        [option_outfile, option_format],\n        [arg_url]\n    );\n\n    shell.exec(\n        executable_youtube_dl_audio.get_command_full().join(' '),\n        {silent: true}\n    );\n\n    option_outfile.set(dir_downloads + '/' + name_project + '.%(ext)s');\n\n    let executable_youtube_dl_downloads = new cli.Executable(\n        '/usr/local/bin/youtube-dl',\n        [flag_audio_only],\n        [option_outfile, option_format],\n        [arg_url]\n    );\n\n    shell.exec(\n        executable_youtube_dl_downloads.get_command_full().join(' '),\n        {silent: true},\n        (code, stdout, stderr) => {\n            if (code === 0) {\n                msg = 'done'\n            } else {\n                msg = 'error'\n            }\n        }\n    );\n\n    // max_api.outlet(msg);\n};\n\n// max_api.addHandler(\"download\", () => {\n//     download()\n// });\n\ndownload()"]}