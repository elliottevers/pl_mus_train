{"version":3,"file":"scripts.node.max_python_cli.js","sourceRoot":"","sources":["scripts.node.max_python_cli.ts"],"names":[],"mappings":";;AAEA,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,IAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAEnC,mDAAmD;AACnD,OAAO,CAAC,IAAI,CAAC,gBAAc,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,YAAS,CAAC,CAAC;AAE/D,gFAAgF;AAChF,OAAO,CAAC,UAAU,CAAC,MAAM,EAAE;IACvB,OAAO,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;AAC/C,CAAC,CAAC,CAAC;AAEH,yEAAyE;AACzE,OAAO,CAAC,UAAU,CAAC,MAAM,EAAE,UAAC,GAAG;IAC3B,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AACxB,CAAC,CAAC,CAAC;AAUH,0BAA0B;AAE1B,yCAAyC;AAEzC,4BAA4B;AAC5B,kCAAkC;AAClC,8BAA8B;AAC9B,EAAE;AACF,wBAAwB;AACxB,mBAAmB;AAEnB,IAAI,GAAG,GAAG;IACN,2BAA2B;IAC3B,wBAAwB;IACxB,mBAAmB;IACnB,aAAa;IACb,eAAe;IACf,YAAY;IACZ,iBAAiB;IACjB,WAAW;IACX,KAAK;IACL,eAAe;AACnB,CAAC,CAAC;AAEF,IAAI,OAAO,GAAG,UAAC,QAAQ,EAAE,OAAO;IAC5B,oEAAoE;IACpE,uEAAuE;IACvE,iCAAiC;IACjC,WAAW;IACX,uCAAuC;IACvC,wBAAwB;IACxB,sBAAsB;IACtB,IAAI;AACR,CAAC,CAAC;AAEF,6CAAyC;AAEzC,IAAI,OAAO,GAAG;IACV,IAAI,EAAE,MAAM;IACZ,UAAU,EAAE,gBAAgB;IAC5B,aAAa,EAAE,CAAC,IAAI,CAAC;IACrB,UAAU,EAAE,oBAAoB;IAChC,IAAI,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;CACvC,CAAC;AAEF,sMAAsM;AAEtM,0BAAW,CAAC,GAAG,CAAC,cAAc,EAAE,OAAO,EAAE,UAAU,GAAG,EAAE,OAAO;IAC3D,IAAI,GAAG;QAAE,MAAM,GAAG,CAAC;IACnB,wEAAwE;IACxE,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;AACxC,CAAC,CAAC,CAAC;AAEH,IAAI,QAAQ,GAAG,UAAC,SAAS,EAAE,QAAQ;IAC/B,wEAAwE;IACxE,4EAA4E;IAC5E,mCAAmC;IACnC,WAAW;IACX,0CAA0C;IAC1C,0BAA0B;IAC1B,wBAAwB;IACxB,IAAI;AACR,CAAC,CAAC;AAEF,IAAI,UAAU,GAAG,UAAC,QAAQ,EAAE,OAAO;IAC/B,uEAAuE;IACvE,0EAA0E;IAC1E,iCAAiC;IACjC,WAAW;IACX,0CAA0C;IAC1C,wBAAwB;IACxB,yBAAyB;IACzB,IAAI;AACR,CAAC,CAAC;AAEF,IAAI,eAAe,GAAG,UAAC,IAAI;IACvB,2BAA2B;AAC/B,CAAC,CAAC;AAEF,IAAI,UAAU,GAAG,UAAC,IAAI;IAClB,sBAAsB;AAC1B,CAAC,CAAC","sourcesContent":["import {cli} from \"../cli/cli\";\n\nconst path = require('path');\nconst max_api = require('max-api');\n\n// This will be printed directly to the Max console\nmax_api.post(`Loaded the ${path.basename(__filename)} script`);\n\n// Use the 'addHandler' function to register a function for a particular message\nmax_api.addHandler(\"bang\", () => {\n    max_api.post(\"Who you think you bangin'?\");\n});\n\n// Use the 'outlet' function to send messages out of node.script's outlet\nmax_api.addHandler(\"echo\", (msg) => {\n    max_api.outlet(msg);\n});\n\n\n\n\n\n\n\n\n\n// let script: cli.Script;\n\n// let messenger = new Messenger(env, 0);\n\n// let args: cli.Arg[] = [];\n// let options: cli.Option[] = [];\n// let flags: cli.Flag[] = [];\n//\n// let path_interpreter;\n// let path_script;\n\nlet run = () => {\n    // script = new cli.Script(\n    //     path_interpreter,\n    //     path_script,\n    //     flags,\n    //     options,\n    //     args,\n    //     messenger,\n    //     true\n    // );\n    // script.run()\n};\n\nlet set_arg = (name_arg, val_arg) => {\n    // if (_.contains(args.map((arg) => {return arg.name}), name_arg)) {\n    //     let arg_existing = args.filter(arg => arg.name === name_arg)[0];\n    //     arg_existing.set(val_arg);\n    // } else {\n    //     let arg = new cli.Arg(name_arg);\n    //     arg.set(val_arg);\n    //     args.push(arg);\n    // }\n};\n\nimport {PythonShell} from 'python-shell';\n\nlet options = {\n    mode: 'text',\n    pythonPath: 'path/to/python',\n    pythonOptions: ['-x'],\n    scriptPath: 'path/to/my/scripts',\n    args: ['value1', 'value2', 'value3']\n};\n\n// youtube-dl  --audio-format wav --o \"/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync/tk_music_projects/downloads/project_name.%(ext)s\" https://www.youtube.com/watch?v=Uybtn6ebG0I\n\nPythonShell.run('my_script.py', options, function (err, results) {\n    if (err) throw err;\n    // results is an array consisting of messages collected during execution\n    console.log('results: %j', results);\n});\n\nlet set_flag = (name_flag, val_flag) => {\n    // if (_.contains(flags.map((flag) => {return flag.name}), name_flag)) {\n    //     let flag_existing = flags.filter(flag => flag.name === name_flag)[0];\n    //     flag_existing.set(val_flag);\n    // } else {\n    //     let flag = new cli.Flag(name_flag);\n    //     flag.set(val_flag);\n    //     flags.push(flag);\n    // }\n};\n\nlet set_option = (name_opt, val_opt) => {\n    // if (_.contains(options.map((opt) => {return opt.name}), name_opt)) {\n    //     let opt_existing = options.filter(opt => opt.name === name_opt)[0];\n    //     opt_existing.set(val_opt);\n    // } else {\n    //     let opt = new cli.Option(name_opt);\n    //     opt.set(val_opt);\n    //     options.push(opt);\n    // }\n};\n\nlet set_interpreter = (path) => {\n    // path_interpreter = path;\n};\n\nlet set_script = (path) => {\n    // path_script = path;\n};"]}