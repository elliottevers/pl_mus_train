{"version":3,"file":"render_ts.js","sourceRoot":"","sources":["render_ts.ts"],"names":[],"mappings":";;AAWA,IAAI,GAAG,GAAW,MAAM,CAAC;AAEzB,IAAI,GAAG,KAAK,KAAK,EAAE;IACf,SAAS,GAAG,CAAC,CAAC;CACjB;AAED,IAAI,OAAO,GAAG,UAAC,UAAU,EAAE,SAAS,EAAE,WAAW;IAC7C,IAAI,GAAG,GAAG,EAAE,CAAC;IACb,IAAI,SAAS,GAAG,UAAU,CAAC;IAC3B,IAAI,IAAI,GAAG,CAAC,SAAS,GAAG,UAAU,CAAC,GAAG,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;IACxD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;QAClC,GAAG,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;KACpC;IACD,OAAO,GAAG,CAAC;AACf,CAAC,CAAC;AAEF,IAAI,IAAI,GAAG;IACP,IAAI,OAAO,GAAG,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IACtC,mBAAmB;IACnB,IAAI,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC;IACjC,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,SAAA,EAAE,EAAI,CAAC,CAAA,CAAC,CAAC;IAC5C,IAAI,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,SAAA,EAAE,EAAI,CAAC,CAAA,CAAC,CAAC;IAElD,IAAI,iBAAiB,GAAG,iBAAiB,GAAC,WAAW,CAAC;IACtD,IAAI,OAAO,GAAG,CAAC,CAAC;IAChB,kCAAkC;IAClC,yBAAyB;IACzB,IAAI;AACR,CAAC,CAAC;AAGF,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IAC/B,MAAM,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,MAAM,CAAC,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC;CAChC;AAED,IAAI,EAAE,CAAC","sourcesContent":["// declare let Global: any;\n// TODO: make dedicated library object for the following\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'node';\n\nif (env === 'max') {\n    autowatch = 1;\n}\n\nlet makeArr = (startValue, stopValue, cardinality) => {\n    var arr = [];\n    var currValue = startValue;\n    var step = (stopValue - startValue) / (cardinality - 1);\n    for (var i = 0; i < cardinality; i++) {\n        arr.push(currValue + (step * i));\n    }\n    return arr;\n};\n\nlet main = () => {\n    let arr_lin = makeArr(0, 1000, 75752);\n    // let testing = 1;\n    let num_samples = arr_lin.length;\n    let len_song_ms = Math.round(2.2 * 10 ** 5);\n    let len_window_pixels = Math.round(1.0 * 10 ** 4);\n\n    let len_sample_pixels = len_window_pixels/num_samples;\n    let testing = 1;\n    // for (let message in messages) {\n    //     outlet(0, message)\n    // }\n};\n\n\nif (typeof Global !== \"undefined\") {\n    Global.render_ts = {};\n    Global.render_ts.main = main;\n}\n\nmain();"]}