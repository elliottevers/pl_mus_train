{"version":3,"file":"control.js","sourceRoot":"","sources":["control.ts"],"names":[],"mappings":";;AACA,IAAM,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAEhC,IAAiB,OAAO,CAsFvB;AAtFD,WAAiB,OAAO;IAKP,+BAAuB,GAAG;QACnC,CAAC,EAAE,EAAE;QACL,CAAC,EAAE,EAAE;QACL,CAAC,EAAE,EAAE;QACL,CAAC,EAAE,EAAE;QACL,CAAC,EAAE,EAAE;QACL,CAAC,EAAE,EAAE;KACR,CAAC;IAEF;QAMI,mBAAY,WAAW,EAAE,SAAS,EAAE,SAAS;YACzC,IAAI,OAAO,GAAG,EAAE,CAAC;YAEjB,IAAI,aAAa,GAAG,UAAC,CAAC;gBAClB,OAAO,CAAC,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC,QAAA,uBAAuB,CAAC,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;YACvH,CAAC,CAAC;YAEF,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;YAEpC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YAEvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC/B,CAAC;QAED,wBAAI,GAAJ,UAAK,eAAuB,EAAE,aAAqB;YAC/C,IAAI,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;YACnD,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACvC,CAAC;QAED,0BAAM,GAAN,UAAO,eAAuB;YAC1B,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAA;QACzD,CAAC;QAED,yBAAK,GAAL,UAAM,eAAuB;YACzB,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,CAAA;QACxD,CAAC;QACL,gBAAC;IAAD,CAAC,AAhCD,IAgCC;IAhCY,iBAAS,YAgCrB,CAAA;IAED;QAQI,gBAAY,SAAe,EAAE,SAAoB;YAC7C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAC3B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAC3B,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;QAClC,CAAC;QAGD,oCAAoC;QACpC,uBAAM,GAAN,UAAO,eAAe;YAClB,iDAAiD;YACjD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,GAAG,eAAe,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAC,CAAC;QACpF,CAAC;QAED,yBAAQ,GAAR,UAAS,aAAqB;YAC1B,OAAO,IAAI,CAAC,SAAS,GAAG,aAAa,CAAA;QACzC,CAAC;QAED,sBAAK,GAAL,UAAM,eAAe;YACjB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,GAAG,eAAe,EAAE,OAAO,EAAE,IAAI,CAAC,eAAe,EAAE,EAAE,GAAG,CAAC,CAAC,CAAA;QAC9F,CAAC;QAEM,gCAAe,GAAtB;YACI,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QACpD,CAAC;QAGD,qBAAI,GAAJ,UAAK,aAAqB;YACtB,IAAI,CAAC,oBAAoB,GAAG,aAAa,CAAC;QAC9C,CAAC;QACL,aAAC;IAAD,CAAC,AArCD,IAqCC;IArCY,cAAM,SAqClB,CAAA;AACL,CAAC,EAtFgB,OAAO,GAAP,eAAO,KAAP,eAAO,QAsFvB","sourcesContent":["import {message} from \"../message/messenger\";\nconst _ = require(\"underscore\");\n\nexport namespace control {\n\n    import Messenger = message.Messenger;\n    type midi = number;\n\n    export const string_to_root_note_map = {\n        6: 40,\n        5: 45,\n        4: 50,\n        3: 55,\n        2: 59,\n        1: 64\n    };\n\n    export class Fretboard {\n\n        strings;\n\n        num_frets: number;\n\n        constructor(num_strings, num_frets, messenger) {\n            let strings = {};\n\n            let create_string = (i) => {\n                strings[num_strings - Number(i)] = new control.String(string_to_root_note_map[num_strings - Number(i)], messenger);\n            };\n\n            _.times(num_strings, create_string);\n\n            this.strings = strings;\n\n            this.num_frets = num_frets;\n        }\n\n        fret(position_string: number, position_fret: number) {\n            let string_fretted = this.strings[position_string];\n            string_fretted.fret(position_fret);\n        }\n\n        dampen(position_string: number) {\n            this.strings[position_string].dampen(position_string)\n        }\n\n        pluck(position_string: number) {\n            this.strings[position_string].pluck(position_string)\n        }\n    }\n\n    export class String {\n\n        note_root: midi;\n\n        messenger: Messenger;\n\n        fret_highest_fretted: number;\n\n        constructor(note_root: midi, messenger: Messenger) {\n            this.note_root = note_root;\n            this.messenger = messenger;\n            this.fret_highest_fretted = 0;\n        }\n\n\n        // TODO: don't make this an argument\n        dampen(position_string) {\n            // TODO: will have to flush on a per string basis\n            this.messenger.message(['string' + position_string, 'dampen', position_string]);\n        }\n\n        get_note(position_fret: number) {\n            return this.note_root + position_fret\n        }\n\n        pluck(position_string) {\n            this.messenger.message(['string' + position_string, 'pluck', this.will_sound_note(), 127])\n        }\n\n        public will_sound_note():midi {\n            return this.get_note(this.fret_highest_fretted);\n        }\n\n\n        fret(position_fret: number) {\n            this.fret_highest_fretted = position_fret;\n        }\n    }\n}"]}