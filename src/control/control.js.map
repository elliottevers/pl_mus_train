{"version":3,"file":"control.js","sourceRoot":"","sources":["control.ts"],"names":[],"mappings":";;AAEA,IAAM,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAEhC,IAAiB,OAAO,CA0HvB;AA1HD,WAAiB,OAAO;IAKpB,IAAM,uBAAuB,GAAG;QAC5B,CAAC,EAAE,EAAE;QACL,CAAC,EAAE,EAAE;QACL,CAAC,EAAE,EAAE;QACL,CAAC,EAAE,EAAE;QACL,CAAC,EAAE,EAAE;QACL,CAAC,EAAE,EAAE;KACR,CAAC;IAEF;QAQI,mBAAY,WAAW,EAAE,SAAS,EAAE,SAAS;YACzC,IAAI,OAAO,GAAG,EAAE,CAAC;YAEjB,IAAI,aAAa,GAAG,UAAC,CAAC;gBAClB,OAAO,CAAC,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,OAAO,CAAC,MAAM,CAAC,uBAAuB,CAAC,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;gBACnH,gGAAgG;YACpG,CAAC,CAAC;YAEF,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;YAEpC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YAEvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC/B,CAAC;QAED,oDAAoD;QACpD,2EAA2E;QAC3E,8DAA8D;QAC9D,kDAAkD;QAClD,IAAI;QAEJ,qCAAqC;QACrC,+BAA+B;QAC/B,8DAA8D;QAC9D,gDAAgD;QAChD,IAAI;QAEJ,wBAAI,GAAJ,UAAK,eAAuB,EAAE,aAAqB;YAC/C,wBAAwB;YACxB,6BAA6B;YAC7B,2CAA2C;YAC3C,uEAAuE;YACvE,IAAI,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;YACnD,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACvC,CAAC;QAED,0BAAM,GAAN,UAAO,eAAuB;YAC1B,iCAAiC;YACjC,sBAAsB;YACtB,IAAI;YACJ,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAA;QACzD,CAAC;QAED,yBAAK,GAAL,UAAM,eAAuB;YACzB,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,CAAA;QACxD,CAAC;QACL,gBAAC;IAAD,CAAC,AAtDD,IAsDC;IAtDY,iBAAS,YAsDrB,CAAA;IAED;QAWI,gBAAY,SAAe,EAAE,SAAoB;YAC7C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAC3B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAC3B,4BAA4B;YAC5B,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC;QAClC,CAAC;QAED,2BAA2B;QAC3B,0CAA0C;QAC1C,IAAI;QAEJ,oCAAoC;QACpC,uBAAM,GAAN,UAAO,eAAe;YAClB,mDAAmD;YACnD,6BAA6B;YAC7B,iDAAiD;YACjD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,GAAG,eAAe,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAC,CAAC;QACpF,CAAC;QAED,yBAAQ,GAAR,UAAS,aAAqB;YAC1B,OAAO,IAAI,CAAC,SAAS,GAAG,aAAa,CAAA;QACzC,CAAC;QAED,sBAAK,GAAL,UAAM,eAAe;YACjB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,GAAG,eAAe,EAAE,OAAO,EAAE,IAAI,CAAC,eAAe,EAAE,EAAE,GAAG,CAAC,CAAC,CAAA;QAC9F,CAAC;QAEM,gCAAe,GAAtB;YACI,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QACpD,CAAC;QAED,gCAAgC;QAChC,6EAA6E;QAC7E,6CAA6C;QAC7C,QAAQ;QACR,IAAI;QAEJ,qBAAI,GAAJ,UAAK,aAAqB;YACtB,IAAI,CAAC,oBAAoB,GAAG,aAAa,CAAC;QAC9C,CAAC;QACL,aAAC;IAAD,CAAC,AAnDD,IAmDC;IAnDY,cAAM,SAmDlB,CAAA;AACL,CAAC,EA1HgB,OAAO,GAAP,eAAO,KAAP,eAAO,QA0HvB","sourcesContent":["import {message} from \"../message/messenger\";\nimport {log} from \"../log/logger\";\nconst _ = require(\"underscore\");\n\nexport namespace control {\n\n    import Messenger = message.Messenger;\n    type midi = number;\n\n    const string_to_root_note_map = {\n        6: 40,\n        5: 45,\n        4: 50,\n        3: 55,\n        2: 59,\n        1: 64\n    };\n\n    export class Fretboard {\n\n        currently_sounding: number[];\n\n        strings;\n\n        num_frets: number;\n\n        constructor(num_strings, num_frets, messenger) {\n            let strings = {};\n\n            let create_string = (i) => {\n                strings[num_strings - Number(i)] = new control.String(string_to_root_note_map[num_strings - Number(i)], messenger);\n                // strings.push(new control.String(string_to_root_note_map[num_strings - Number(i)], messenger))\n            };\n\n            _.times(num_strings, create_string);\n\n            this.strings = strings;\n\n            this.num_frets = num_frets;\n        }\n\n        // get_coordinate_duple(coordinate_scalar: number) {\n        //     let position_string = Math.floor(coordinate_scalar/ this.num_frets);\n        //     let position_fret = coordinate_scalar % this.num_frets;\n        //     return [position_string + 1, position_fret]\n        // }\n\n        // fret(coordinate_duple: number[]) {\n        //     // string, position fret\n        //     let string_fretted = this.strings[coordinate_duple[0]];\n        //     string_fretted.fret(coordinate_duple[1]);\n        // }\n\n        fret(position_string: number, position_fret: number) {\n            // string, position fret\n            // post(position_string - 1);\n            // log.Logger.log_max_static(this.strings);\n            // let string_fretted = this.strings[(position_string - 1).toString()];\n            let string_fretted = this.strings[position_string];\n            string_fretted.fret(position_fret);\n        }\n\n        dampen(position_string: number) {\n            // for (string of this.strings) {\n            //     string.dampen()\n            // }\n            this.strings[position_string].dampen(position_string)\n        }\n\n        pluck(position_string: number) {\n            this.strings[position_string].pluck(position_string)\n        }\n    }\n\n    export class String {\n        // note_sounding: midi | null;\n\n        // fret_fretted: number | null;\n\n        note_root: midi;\n\n        messenger: Messenger;\n\n        fret_highest_fretted: number;\n\n        constructor(note_root: midi, messenger: Messenger) {\n            this.note_root = note_root;\n            this.messenger = messenger;\n            // this.fret_fretted = null;\n            this.fret_highest_fretted = 0;\n        }\n\n        // is_sounding(): boolean {\n        //     return this.note_sounding === null;\n        // }\n\n        // TODO: don't make this an argument\n        dampen(position_string) {\n            // this.messenger.message([this.note_sounding, 0]);\n            // this.note_sounding = null;\n            // TODO: will have to flush on a per string basis\n            this.messenger.message(['string' + position_string, 'dampen', position_string]);\n        }\n\n        get_note(position_fret: number) {\n            return this.note_root + position_fret\n        }\n\n        pluck(position_string) {\n            this.messenger.message(['string' + position_string, 'pluck', this.will_sound_note(), 127])\n        }\n\n        public will_sound_note():midi {\n            return this.get_note(this.fret_highest_fretted);\n        }\n\n        // fret(position_fret: number) {\n        //     if (this.fret_fretted === null || this.fret_fretted < position_fret) {\n        //         this.fret_fretted = position_fret;\n        //     }\n        // }\n\n        fret(position_fret: number) {\n            this.fret_highest_fretted = position_fret;\n        }\n    }\n}"]}