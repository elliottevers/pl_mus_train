{"version":3,"file":"control.js","sourceRoot":"","sources":["control.ts"],"names":[],"mappings":"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","sourcesContent":["import {message} from \"../message/messenger\";\nconst _ = require(\"underscore\");\n\nexport namespace control {\n\n    import Messenger = message.Messenger;\n    type midi = number;\n\n    const string_to_root_note_map = {\n        6: 40,\n        5: 45,\n        4: 50,\n        3: 55,\n        2: 59,\n        1: 64\n    };\n\n    export class Fretboard {\n\n        currently_sounding: number[];\n\n        strings;\n\n        num_frets: number;\n\n        constructor(num_strings, num_frets, messenger) {\n            let strings = {};\n\n            let create_string = (i) => {\n                strings[num_strings - Number(i)] = new control.String(string_to_root_note_map[num_strings - Number(i)], messenger);\n                // strings.push(new control.String(string_to_root_note_map[num_strings - Number(i)], messenger))\n            };\n\n            _.times(num_strings, create_string);\n\n            this.strings = strings;\n\n            this.num_frets = num_frets;\n        }\n\n        get_coordinate_duple(coordinate_scalar: number) {\n            let position_string = Math.floor(coordinate_scalar/ this.num_frets);\n            let position_fret = coordinate_scalar % this.num_frets;\n            return [position_string + 1, position_fret]\n        }\n\n        fret(coordinate_duple: number[]) {\n            // string, position fret\n            let string_fretted = this.strings[coordinate_duple[0]];\n            string_fretted.fret(coordinate_duple[1]);\n        }\n\n        dampen(position_string: number) {\n            // for (string of this.strings) {\n            //     string.dampen()\n            // }\n            this.strings[position_string].dampen()\n        }\n\n        pluck(position_string: number) {\n            this.strings[position_string].pluck()\n        }\n    }\n\n    export class String {\n        note_sounding: midi | null;\n\n        fret_fretted: number | null;\n\n        note_root: midi;\n\n        messenger: Messenger;\n\n        constructor(note_root: midi, messenger: Messenger) {\n            this.note_root = note_root;\n            this.messenger = messenger;\n            this.fret_fretted = null;\n        }\n\n        is_sounding(): boolean {\n            return this.note_sounding === null;\n        }\n\n        dampen() {\n            this.messenger.message([this.note_sounding, 0]);\n            this.note_sounding = null;\n        }\n\n        get_note(position_fret: number) {\n            return this.note_root + position_fret\n        }\n\n        pluck() {\n            this.note_sounding = this.get_note(this.fret_fretted);\n            this.messenger.message([this.note_sounding, 127])\n        }\n\n        fret(position_fret: number) {\n            if (this.fret_fretted === null || this.fret_fretted < position_fret) {\n                this.fret_fretted = position_fret;\n            }\n        }\n    }\n}"]}