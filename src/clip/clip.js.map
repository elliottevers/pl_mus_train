{"version":3,"file":"clip.js","sourceRoot":"","sources":["clip.ts"],"names":[],"mappings":"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","sourcesContent":["import {note as n} from \"../note/note\";\nimport TreeModel = require(\"tree-model\");\nimport {live} from \"../live/live\";\nimport {message} from \"../message/messenger\";\nimport {log} from \"../log/logger\";\nimport {utils} from \"../utils/utils\";\n\nexport namespace clip {\n\n    import Messenger = message.Messenger;\n    import Logger = log.Logger;\n\n    export class Clip {\n\n        // private clip_dao;\n        public clip_dao;\n\n        private notes: TreeModel.Node<n.Note>[];\n\n        constructor(clip_dao) {\n            this.clip_dao = clip_dao;\n        }\n\n        get_path(): string {\n            return this.clip_dao.get_path();\n        }\n\n        set_path_deferlow(key_route): void {\n            this.clip_dao.set_path_deferlow(\n                key_route,\n                this.get_path()\n            )\n        }\n\n        get_num_measures(): number {\n            return (this.get_end_marker() - this.get_start_marker()) / 4;\n        }\n\n        get_end_marker(): number {\n            return this.clip_dao.get_end_marker();\n        }\n\n        get_start_marker(): number {\n            return this.clip_dao.get_start_marker();\n        }\n\n        // TODO: annotations\n        load_notes_within_markers(): void {\n            this.notes = this.get_notes(\n                this.get_start_marker(),\n                0,\n                this.get_end_marker(),\n                128\n            )\n        }\n\n        // TODO: annotations\n        get_pitch_max(): number {\n            let pitch_max = 0;\n\n            for (let node of this.get_notes_within_markers()) {\n                if (node.model.note.pitch > pitch_max) {\n                    pitch_max = node.model.note.pitch;\n                }\n            }\n\n            return pitch_max;\n        }\n\n        // TODO: annotations\n        get_pitch_min(): number {\n            let pitch_min = 128;\n\n            for (let node of this.get_notes_within_markers()) {\n                if (node.model.note.pitch < pitch_min) {\n                    pitch_min = node.model.note.pitch;\n                }\n            }\n\n            return pitch_min;\n        }\n\n        get_ambitus(): number[] {\n            return [this.get_pitch_min(), this.get_pitch_max()];\n        }\n\n        set_loop_bracket_lower(beat: number): void {\n            this.clip_dao.set_loop_bracket_lower(beat);\n        }\n\n        set_loop_bracket_upper(beat: number): void {\n            this.clip_dao.set_loop_bracket_upper(beat);\n        }\n\n        get_loop_bracket_lower(): number {\n            return this.clip_dao.get_loop_bracket_lower();\n        }\n\n        get_loop_bracket_upper(): number {\n            return this.clip_dao.get_loop_bracket_upper();\n        }\n\n        set_clip_endpoint_lower(beat: number): void {\n            this.clip_dao.set_clip_endpoint_lower(beat);\n        }\n\n        set_clip_endpoint_upper(beat: number): void {\n            this.clip_dao.set_clip_endpoint_upper(beat);\n        }\n\n        fire(): void {\n            this.clip_dao.fire();\n        }\n\n        stop(): void {\n            this.clip_dao.stop();\n        }\n\n        get_notes_within_markers(): TreeModel.Node<n.Note>[] {\n            if (!this.notes) {\n                this.load_notes_within_markers()\n            }\n            return this.notes;\n        }\n\n        public get_notes(beat_start: number, pitch_midi_min: number, beat_end: number, pitch_midi_max: number): TreeModel.Node<n.Note>[] {\n            return Clip._parse_notes(\n                this._get_notes(\n                    beat_start,\n                    pitch_midi_min,\n                    beat_end,\n                    pitch_midi_max\n                )\n            );\n        }\n\n        public set_notes(notes: TreeModel.Node<n.Note>[]): void {\n            this.clip_dao.set_notes(notes);\n        }\n\n        // TODO: *actually* make private\n        public _get_notes(beat_start: number, pitch_midi_min: number, beat_end: number, pitch_midi_max: number): string[] {\n            return this.clip_dao.get_notes(\n                beat_start,\n                pitch_midi_min,\n                beat_end,\n                pitch_midi_max\n            )\n        }\n\n        public remove_notes(beat_start: number, pitch_midi_min: number, beat_end: number, pitch_midi_max: number): void {\n            this.clip_dao.remove_notes(\n                beat_start,\n                pitch_midi_min,\n                beat_end,\n                pitch_midi_max\n            )\n        }\n\n        public static parse_note_messages(messages: string[]) {\n\n            let notes: TreeModel.Node<n.Note>[] = [];\n\n            for (let i_mess in messages) {\n                if (i_mess == String(0)) {\n                    continue\n                }\n\n                if (i_mess == String(messages.length - 1)) {\n                    continue\n                }\n\n                let tree: TreeModel = new TreeModel();\n\n                let splitted = messages[i_mess].split(' ');\n\n                notes.push(\n                    tree.parse(\n                        {\n                            id: -1, // TODO: hashing scheme for clip id and beat start\n                            note: new n.Note(\n                                Number(splitted[0]),\n                                Number(splitted[1]),\n                                Number(splitted[2]),\n                                Number(splitted[3]),\n                                Number(splitted[4])\n                            ),\n                            children: [\n\n                            ]\n                        }\n                    )\n                )\n            }\n\n            return notes\n        }\n\n        // TODO: return list of tree nodes\n        private static _parse_notes(notes: string[]): TreeModel.Node<n.Note>[] {\n            let data: any = [];\n            let notes_parsed = [];\n\n            let pitch;\n            let beat_start;\n            let beats_duration;\n            let velocity;\n            let b_muted;\n\n            let index_num_expected_notes = null;\n\n            for (var i = 0; i < notes.length; i++) {\n\n                if (notes[i] === 'done') {\n                    continue;\n                }\n\n                if (notes[i] === 'note') {\n                    data = [];\n                    continue;\n                }\n\n                if (notes[i] === 'notes') {\n                    data = [];\n                    continue;\n                }\n\n                if (i === index_num_expected_notes) {\n                    data = [];\n                    continue;\n                }\n\n                data.push(notes[i]);\n\n                if (data.length === 5) {\n\n                    pitch = data[0];\n                    beat_start = data[1];\n                    beats_duration = data[2];\n                    velocity = data[3];\n                    b_muted = data[4];\n\n                    let tree: TreeModel = new TreeModel();\n\n                    notes_parsed.push(\n                        tree.parse(\n                            {\n                                id: -1, // TODO: hashing scheme for clip id and beat start\n                                note: new n.Note(\n                                    pitch,\n                                    beat_start,\n                                    beats_duration,\n                                    velocity,\n                                    b_muted\n                                ),\n                                children: [\n\n                                ]\n                            }\n                        )\n                    );\n                }\n            }\n\n            function compare(note_former,note_latter) {\n                if (note_former.model.note.beat_start < note_latter.model.note.beat_start)\n                    return -1;\n                if (note_former.model.note.beat_start > note_latter.model.note.beat_start)\n                    return 1;\n                return 0;\n            }\n\n            notes_parsed.sort(compare);\n\n            // TODO: fail gracefully\n            // if (notes_parsed.length !== num_expected_notes) {\n            //     throw \"notes retrieved from clip less than expected\"\n            // }\n\n            // l.log(notes_parsed);\n            return notes_parsed;\n        }\n    }\n\n    export class ClipDao {\n\n        private clip_live;\n        private messenger: Messenger;\n        private deferlow: boolean;\n        private key_route: string;\n\n        constructor(clip_live: live.iLiveApiJs, messenger, deferlow?: boolean, key_route?: string) {\n            this.clip_live = clip_live;\n            this.messenger = messenger;\n            if (deferlow && !key_route) {\n                throw new Error('key route not specified when using deferlow');\n            }\n            this.deferlow = deferlow;\n            this.key_route = key_route;\n        }\n\n        set_path_deferlow(key_route_override: string, path_live: string): void {\n            let mess: any[] = [key_route_override];\n\n            for (let word of utils.PathLive.to_message(path_live)) {\n                mess.push(word)\n            }\n            // let logger = new Logger('max');\n            // logger.log(mess.toString());\n            this.messenger.message(mess)\n        }\n\n        // TODO: check if these actually return arrays\n        get_end_marker(): number {\n            return this.clip_live.get('end_marker')[0];\n        }\n\n        // TODO: check if these actually return arrays\n        get_start_marker(): number {\n            return this.clip_live.get('start_marker')[0];\n        }\n\n        get_path(): string {\n            return this.clip_live.get_path();\n        }\n\n        set_loop_bracket_lower(beat: number) {\n            if (this.deferlow) {\n                this.messenger.message([this.key_route, \"set\", \"loop_start\", beat])\n            } else {\n                this.clip_live.set('loop_start', beat);\n            }\n        }\n\n        set_loop_bracket_upper(beat: number) {\n            if (this.deferlow) {\n                this.messenger.message([this.key_route, \"set\", \"loop_end\", beat]);\n            } else {\n                this.clip_live.set('loop_end', beat);\n            }\n        }\n\n        get_loop_bracket_lower(): number {\n            return this.clip_live.get('loop_start');\n        }\n\n        get_loop_bracket_upper(): number {\n            return this.clip_live.get('loop_end');\n        }\n\n        set_clip_endpoint_lower(beat: number) {\n            if (this.deferlow) {\n                this.messenger.message([this.key_route, \"set\", \"start_marker\", beat]);\n            } else {\n                this.clip_live.set('start_marker', beat);\n            }\n        }\n\n        set_clip_endpoint_upper(beat: number) {\n            if (this.deferlow) {\n                this.messenger.message([this.key_route, \"set\", \"end_marker\", beat]);\n            } else {\n                this.clip_live.set('end_marker', beat);\n            }\n        }\n\n        fire(): void {\n            if (this.deferlow) {\n                this.messenger.message([this.key_route, \"call\", \"fire\"]);\n            } else {\n                this.clip_live.call('fire');\n            }\n        };\n\n        stop(): void {\n            if (this.deferlow) {\n                this.messenger.message([this.key_route, \"call\", \"stop\"]);\n            } else {\n                this.clip_live.call('stop');\n            }\n        };\n\n        get_notes(beat_start, pitch_midi_min, beat_end, pitch_midi_max): string[] {\n            return this.clip_live.call(\n                'get_notes',\n                beat_start,\n                pitch_midi_min,\n                beat_end,\n                pitch_midi_max\n            );\n        };\n\n        remove_notes(beat_start, pitch_midi_min, beat_end, pitch_midi_max): void {\n            if (this.deferlow) {\n                this.messenger.message(\n                    [\n                        this.key_route,\n                        \"call\",\n                        \"remove_notes\",\n                        beat_start,\n                        pitch_midi_min,\n                        beat_end,\n                        pitch_midi_max\n                    ]\n                );\n            } else {\n                this.clip_live.call(\n                    'remove_notes',\n                    beat_start,\n                    pitch_midi_min,\n                    beat_end,\n                    pitch_midi_max\n                );\n            }\n        };\n\n        set_notes(notes: TreeModel.Node<n.Note>[]): void {\n            if (this.deferlow) {\n                this.messenger.message([this.key_route, 'call', 'set_notes']);\n                this.messenger.message([this.key_route, 'call', 'notes', notes.length]);\n                for (let node of notes) {\n                    this.messenger.message([\n                        this.key_route,\n                        'call',\n                        'note',\n                        node.model.note.pitch,\n                        node.model.note.beat_start.toFixed(4),\n                        node.model.note.beats_duration.toFixed(4),\n                        node.model.note.velocity,\n                        node.model.note.muted\n                    ]);\n                }\n                this.messenger.message([this.key_route, 'call', 'done'])\n            } else {\n                this.clip_live.call('set_notes');\n                this.clip_live.call('notes', notes.length);\n                for (let node of notes) {\n                    this.clip_live.call(\n                        \"note\",\n                        node.model.note.pitch,\n                        node.model.note.beat_start.toFixed(4),\n                        node.model.note.beats_duration.toFixed(4),\n                        node.model.note.velocity,\n                        node.model.note.muted\n                    );\n                }\n                this.clip_live.call(\"done\")\n            }\n        }\n    }\n}"]}