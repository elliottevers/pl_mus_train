{"version":3,"file":"download_youtube.js","sourceRoot":"","sources":["download_youtube.ts"],"names":[],"mappings":"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","sourcesContent":["// declare let Global: any;\n// TODO: make dedicated library object for the following\nimport {message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {log} from \"../log/logger\";\nimport Logger = log.Logger;\nimport {cli} from \"../cli/cli\";\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    autowatch = 1;\n}\n\nlet messenger: Messenger;\n\nlet logger: Logger;\n\nlet outlet_shell_obj = 0;\n\n// let executables = [];\n\n// let executable: cli.Executable;\n\n// let dir = '/Users/elliottevers/Documents/git-repos.nosync/music/';\n\n// let path_interpreter = dir + '.venv_36_test/bin/python';\n\nmessenger = new Messenger(env, outlet_shell_obj);\nlogger = new Logger(env);\n\nlet arg_url = new cli.Arg('url');\nlet option_outfile = new cli.Option('o', true);\nlet flag_audio_only = new cli.Flag('x');\n\nlet executable_youtube_dl = new cli.Executable(\n    '/usr/local/bin/youtube-dl',\n    [flag_audio_only],\n    [option_outfile],\n    [arg_url],\n    messenger\n);\n\n// executables.push(executable_youtube_dl);\n\n\n// let arg_file_out = new cli.Arg('file_out', false, true);\n//\n// let option_file_input = new cli.Option('i', false, true);\n//\n// let executable_ffmpeg = new cli.Executable(\n//     '/usr/local/bin/ffmpeg',\n//     [],\n//     [option_file_input],\n//     [arg_file_out],\n//     messenger\n// );\n\n// executables.push(executable_ffmpeg);\n\n// let init = () => {\n//\n//     messenger = new Messenger(env, outlet_shell_obj);\n//     logger = new Logger(env);\n//\n//     let arg_url = new cli.Arg('url');\n//     let option_outfile = new cli.Option('o', true);\n//     let flag_audio_only = new cli.Flag('x');\n//\n//     let executable_youtube_dl = new cli.Executable(\n//\n//         [flag_audio_only],\n//         [option_outfile],\n//         [arg_url],\n//         messenger\n//     );\n//\n//     executables.push(executable_youtube_dl);\n//\n//\n//     let arg_file_out = new cli.Arg('file_out', false, true);\n//\n//     let option_file_input = new cli.Option('i', false, true);\n//\n//     let executable_ffmpeg = new cli.Executable(\n//         '/usr/local/bin/ffmpeg',\n//         [],\n//         [option_file_input],\n//         [arg_file_out],\n//         messenger\n//     );\n//\n//     executables.push(executable_ffmpeg);\n//\n// };\n\n// let run_executable = (path_executable) => {\n//     executable_youtube_dl.run()\n// };\n\nlet run = () => {\n    executable_youtube_dl.run()\n};\n\n\nlet set_arg = (name_arg, val_arg) => {\n    // post(path_executable);\n    // post(name_arg);\n    // post(val_arg);\n    executable_youtube_dl.get_arg(name_arg).set(val_arg);\n};\n\nlet set_flag = (name_flag, val_flag) => {\n    // post(path_executable);\n    // post(name_flag);\n    // post(val_flag);\n    executable_youtube_dl.get_flag(name_flag).set(val_flag);\n};\n\nlet set_option = (name_opt, val_opt) => {\n    // post(path_executable);\n    // post(name_opt);\n    // post(val_opt);\n    executable_youtube_dl.get_opt(name_opt).set(val_opt);\n};\n\n// let _lookup_executable = (path_executable) => {\n//     return executables.filter((executable) => {\n//         return executable.get_command_exec() === path_executable;\n//     })[0];\n// };\n\n// let log_cmd = (path_executable) => {\n//     logger.log(\n//         executable_youtube_dl.get_run_command().split(' ')\n//     );\n//     // return executable_youtube_dl.get_run_command().split(' ')\n//\n// };\n\nlet test = () => {\n    let git_repo = '/Users/elliottevers/Documents/Documents - Elliottâ€™s MacBook Pro/git-repos.nosync';\n\n    set_arg('url', 'https://www.youtube.com/watch?v=CbkvLYrEvF4');\n    set_option('o', git_repo + '/audio/youtube/tswift_teardrops.%(ext)s');\n    set_flag('x', 1);\n\n    // messenger.message(log_cmd('/usr/local/bin/youtube-dl'));\n\n\n    // set_arg('file_out', git_repo + '/audio/youtube/tswift_teardrops.mp3');\n    // set_option('i', git_repo + '/audio/youtube/tswift_teardrops.*');\n\n    // messenger.message(log_cmd('/usr/local/bin/ffmpeg'));\n};\n\n\nif (typeof Global !== \"undefined\") {\n    Global.download_youtube = {};\n    Global.download_youtube.set_arg = set_arg;\n    Global.download_youtube.set_option = set_option;\n    Global.download_youtube.set_flag = set_flag;\n    Global.download_youtube.run = run;\n    // Global.command_shell.init = init;\n    // Global.command_shell.log_cmd = log_cmd;\n    // Global.command_shell.run_executable = run_executable;\n    Global.download_youtube.test = test;\n    // Global.command_shell._lookup_executable = _lookup_executable;\n}\n"]}