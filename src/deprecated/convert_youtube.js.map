{"version":3,"file":"convert_youtube.js","sourceRoot":"","sources":["convert_youtube.ts"],"names":[],"mappings":"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","sourcesContent":["// declare let Global: any;\n// TODO: make dedicated library object for the following\nimport {message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {log} from \"../log/logger\";\nimport Logger = log.Logger;\nimport {cli} from \"../cli/cli\";\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    autowatch = 1;\n}\n\nlet messenger: Messenger;\n\nlet logger: Logger;\n\nlet outlet_shell_obj = 0;\n\n// let executables = [];\n\n// let executable: cli.Executable;\n\n// let dir = '/Users/elliottevers/Documents/git-repos.nosync/music/';\n\n// let path_interpreter = dir + '.venv_36_test/bin/python';\n\nmessenger = new Messenger(env, outlet_shell_obj);\n\nlogger = new Logger(env);\n\n// let arg_url = new cli.Arg('url');\n// let option_outfile = new cli.Option('o', true);\n// let flag_audio_only = new cli.Flag('x');\n//\n// let executable_youtube_dl = new cli.Executable(\n//     '/usr/local/bin/youtube-dl',\n//     [flag_audio_only],\n//     [option_outfile],\n//     [arg_url],\n//     messenger\n// );\n\n// executables.push(executable_youtube_dl);\n\n\nlet arg_file_out = new cli.Arg('file_out', false, true);\n\nlet option_file_input = new cli.Option('i', false, true);\n\nlet executable_ffmpeg = new cli.Executable(\n    '/usr/local/bin/ffmpeg',\n    [],\n    [option_file_input],\n    [arg_file_out],\n    messenger\n);\n\n// executables.push(executable_ffmpeg);\n\n// let init = () => {\n//\n//     messenger = new Messenger(env, outlet_shell_obj);\n//     logger = new Logger(env);\n//\n//     let arg_url = new cli.Arg('url');\n//     let option_outfile = new cli.Option('o', true);\n//     let flag_audio_only = new cli.Flag('x');\n//\n//     let executable_youtube_dl = new cli.Executable(\n//         '/usr/local/bin/youtube-dl',\n//         [flag_audio_only],\n//         [option_outfile],\n//         [arg_url],\n//         messenger\n//     );\n//\n//     executables.push(executable_youtube_dl);\n//\n//\n//     let arg_file_out = new cli.Arg('file_out', false, true);\n//\n//     let option_file_input = new cli.Option('i', false, true);\n//\n//     let executable_ffmpeg = new cli.Executable(\n//         '/usr/local/bin/ffmpeg',\n//         [],\n//         [option_file_input],\n//         [arg_file_out],\n//         messenger\n//     );\n//\n//     executables.push(executable_ffmpeg);\n//\n// };\n\n// let run_executable = (path_executable) => {\n//     _lookup_executable(path_executable).run()\n// };\n\nlet run = () => {\n    executable_ffmpeg.run()\n};\n\n\nlet set_arg = (name_arg, val_arg) => {\n    // post(path_executable);\n    // post(name_arg);\n    // post(val_arg);\n    executable_ffmpeg.get_arg(name_arg).set(val_arg);\n};\n\nlet set_flag = (name_flag, val_flag) => {\n    // post(path_executable);\n    // post(name_flag);\n    // post(val_flag);\n    executable_ffmpeg.get_flag(name_flag).set(val_flag);\n};\n\nlet set_option = (name_opt, val_opt) => {\n    // post(path_executable);\n    // post(name_opt);\n    // post(val_opt);\n    executable_ffmpeg.get_opt(name_opt).set(val_opt);\n};\n\n// let _lookup_executable = (path_executable) => {\n//     return executables.filter((executable) => {\n//         return executable.get_command_exec() === path_executable;\n//     })[0];\n// };\n\n// let log_cmd = (path_executable) => {\n//     logger.log(\n//         _lookup_executable(path_executable).get_run_command().split(' ')\n//     );\n//     // return _lookup_executable(path_executable).get_run_command().split(' ')\n//\n// };\n\nlet test = () => {\n    let git_repo = '/Users/elliottevers/Documents/Documents - Elliottâ€™s MacBook Pro/git-repos.nosync';\n    //\n    // set_arg('/usr/local/bin/youtube-dl', 'url', 'https://www.youtube.com/watch?v=CbkvLYrEvF4');\n    // set_option('/usr/local/bin/youtube-dl', 'o', git_repo + '/audio/youtube/tswift_teardrops.%(ext)s');\n    // set_flag('/usr/local/bin/youtube-dl', 'x', 1);\n\n    // messenger.message(log_cmd('/usr/local/bin/youtube-dl'));\n\n\n    set_arg('file_out', git_repo + '/audio/youtube/tswift_teardrops.mp3');\n    set_option('i', git_repo + '/audio/youtube/tswift_teardrops.*');\n\n    // messenger.message(log_cmd('/usr/local/bin/ffmpeg'));\n};\n\n\nif (typeof Global !== \"undefined\") {\n    Global.convert_youtube = {};\n    Global.convert_youtube.set_arg = set_arg;\n    Global.convert_youtube.set_option = set_option;\n    Global.convert_youtube.set_flag = set_flag;\n    Global.convert_youtube.run = run;\n    // Global.command_shell.init = init;\n    // Global.command_shell.log_cmd = log_cmd;\n    // Global.command_shell.run_executable = run_executable;\n    Global.convert_youtube.test = test;\n    // Global.command_shell._lookup_executable = _lookup_executable;\n}\n"]}