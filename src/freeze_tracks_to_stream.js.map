{"version":3,"file":"freeze_tracks_to_stream.js","sourceRoot":"","sources":["freeze_tracks_to_stream.ts"],"names":[],"mappings":"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","sourcesContent":["import {message as m, message} from \"./message/messenger\";\nimport Messenger = message.Messenger;\nimport {live, live as li} from \"./live/live\";\nimport {clip as c} from \"./clip/clip\";\nimport LiveApiJs = live.LiveApiJs;\nimport {log} from \"./log/logger\";\nimport Logger = log.Logger;\nimport {io} from \"./io/io\";\nimport Exporter = io.Exporter;\nimport {cli} from \"./cli/cli\";\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\ndeclare let Dict: any;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet partmap_radio = {\n    0: 'melody',\n    1: 'chord',\n    2: 'bass',\n    3: 'segment',\n    4: 'key_center'\n};\n\nlet exporter = new Exporter(\n    '/Users/elliottevers/Downloads/from_live.json'\n);\n\n// TODO: assumes all clips are same length\nlet add = (index_part) => {\n\n    let song = new li.LiveApiJs(\n        'live_set'\n    );\n\n    let clip_highlighted = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot clip'\n    );\n\n    let clip = new c.Clip(\n        new c.ClipDao(\n            clip_highlighted,\n            new m.Messenger(env, 0),\n            false\n        )\n    );\n\n    let beat_clip_end = clip_highlighted.get(\"length\");\n\n    let notes = clip.get_notes(0, 0, beat_clip_end, 128);\n\n    exporter.set_notes(\n        clip_highlighted.get_id(),\n        notes,\n        partmap_radio[index_part]\n    );\n\n    exporter.set_tempo(\n        song.get('tempo')\n    );\n\n    exporter.set_length(\n        beat_clip_end\n    );\n};\n\nlet remove = (index_part) => {\n    let clip_highlighted = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot clip'\n    );\n\n    exporter.unset_notes(\n        clip_highlighted.get_id(),\n        partmap_radio[index_part]\n    );\n};\n\n\nlet export_clips = () => {\n    exporter.export_clips(\n        ['melody', 'chords', 'bass']\n    )\n};\n\n\nlet set_midi = (filepath) => {\n    // let dict_import = new Dict(\"dict_import\");\n\n    // dict_import.import_json(filepath);\n\n    // let notes = dict_import.get('melody::notes');\n\n    // let live_api: LiveApiJs = new li.LiveApiJs(\n    //     'live_set view highlighted_clip_slot clip'\n    // );\n    //\n    // let clip = new c.Clip(\n    //     new c.ClipDao(\n    //         live_api,\n    //         new m.Messenger(env, 0),\n    //         false\n    //     )\n    // );\n\n    // let notes_parsed = c.Clip.parse_note_messages(\n    //     notes\n    // );\n    //\n    // clip.set_notes(\n    //     notes_parsed\n    // );\n};\n\n\nlet export_midi = (filepath) => {\n    let dict_export = new Dict(\"dict_export\");\n\n    let live_api: LiveApiJs;\n\n    live_api = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot clip'\n    );\n\n    let clip = new c.Clip(\n        new c.ClipDao(\n            live_api,\n            new m.Messenger(env, 0),\n            false\n        )\n    );\n\n    // let notes = clip.get_notes(0, 0, 8, 128);\n\n    // let name_part = 'melody';\n\n    // let reps = [];\n    //\n    // dict_export.replace(\"melody::notes\", \"\");\n    //\n    // reps.push(\n    //     ['notes', notes.length.toString()].join(' ')\n    // );\n    //\n    // for (let i_note in notes) {\n    //     reps.push(notes[i_note].model.note.encode());\n    // }\n    //\n    // reps.push(\n    //     ['notes', 'done'].join(' ')\n    // );\n    //\n    // // dict_export.set(\"melody::notes\", ...reps);\n\n    dict_export.export_json(filepath);\n\n    let messenger = new Messenger(env, 0);\n\n    messenger.message([filepath])\n};\n\nlet test = () => {\n\n    let song = new li.LiveApiJs(\n        'live_set'\n    );\n\n    let clip_highlighted = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot clip'\n    );\n\n    let length_clip = clip_highlighted.get(\"length\");\n\n    let tempo = song.get(\"tempo\");\n\n    let logger = new Logger(env);\n\n    logger.log(clip_highlighted.get_id())\n};\n\n\nif (typeof Global !== \"undefined\") {\n    Global.freeze_tracks_to_stream = {};\n    // Global.midi_io.export_midi = export_midi;\n    // Global.midi_io.set_midi = set_midi;\n    Global.freeze_tracks_to_stream.test = test;\n}\n"]}