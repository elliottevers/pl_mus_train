{"version":3,"file":"freeze_tracks_to_stream.js","sourceRoot":"","sources":["freeze_tracks_to_stream.ts"],"names":[],"mappings":";;AAAA,iDAA0D;AAE1D,oCAA6C;AAC7C,oCAAsC;AAItC,8BAA2B;AAC3B,IAAO,QAAQ,GAAG,OAAE,CAAC,QAAQ,CAAC;AAa9B,IAAI,GAAG,GAAW,KAAK,CAAC;AAExB,IAAI,GAAG,KAAK,KAAK,EAAE;IACf,IAAI,CAAC,sBAAsB,CAAC,CAAC;IAC7B,SAAS,GAAG,CAAC,CAAC;CACjB;AAED,IAAI,QAAQ,GAAG,IAAI,QAAQ,CACvB,gDAAgD,CACnD,CAAC;AAEF,IAAI,UAAU,GAAG;IACb,IAAI,gBAAgB,GAAG,IAAI,WAAE,CAAC,SAAS,CACnC,0CAA0C,CAC7C,CAAC;IAEF,QAAQ,CAAC,UAAU,CACf,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,CACjC,CAAC;AAEN,CAAC,CAAC;AAEF,IAAI,SAAS,GAAG;IACZ,IAAI,IAAI,GAAG,IAAI,WAAE,CAAC,SAAS,CACvB,UAAU,CACb,CAAC;IAEF,QAAQ,CAAC,SAAS,CACd,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CACpB,CAAC;AACN,CAAC,CAAC;AAEF,IAAI,GAAG,GAAG,UAAC,SAAS;IAEhB,IAAI,IAAI,GAAG,IAAI,WAAE,CAAC,SAAS,CACvB,UAAU,CACb,CAAC;IAEF,IAAI,gBAAgB,GAAG,IAAI,WAAE,CAAC,SAAS,CACnC,0CAA0C,CAC7C,CAAC;IAEF,IAAI,IAAI,GAAG,IAAI,WAAC,CAAC,IAAI,CACjB,IAAI,WAAC,CAAC,OAAO,CACT,gBAAgB,EAChB,IAAI,mBAAC,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,EACvB,KAAK,CACR,CACJ,CAAC;IAEF,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CACtB,CAAC,EACD,CAAC,EACD,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAC9B,GAAG,CACN,CAAC;IAEF,QAAQ,CAAC,SAAS,CACd,SAAS,EACT,KAAK,CACR,CAAC;AACN,CAAC,CAAC;AAEF,IAAI,MAAM,GAAG,UAAC,SAAS;IACnB,QAAQ,CAAC,WAAW,CAChB,SAAS,CACZ,CAAC;AACN,CAAC,CAAC;AAGF,IAAI,YAAY,GAAG;IACf,QAAQ,CAAC,YAAY,CACjB,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,CAC9B,CAAA;AACL,CAAC,CAAC;AAEF,IAAI,IAAI,GAAG;IAEP,+BAA+B;IAC/B,iBAAiB;IACjB,KAAK;IACL,EAAE;IACF,2CAA2C;IAC3C,iDAAiD;IACjD,KAAK;IACL,EAAE;IACF,oDAAoD;IACpD,EAAE;IACF,iCAAiC;IACjC,EAAE;IACF,gCAAgC;IAChC,EAAE;IACF,wCAAwC;AAC5C,CAAC,CAAC;AAGF,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IAC/B,MAAM,CAAC,YAAY,GAAG,EAAE,CAAC;IACzB,MAAM,CAAC,YAAY,CAAC,IAAI,GAAG,IAAI,CAAC;IAChC,MAAM,CAAC,YAAY,CAAC,GAAG,GAAG,GAAG,CAAC;IAC9B,MAAM,CAAC,YAAY,CAAC,MAAM,GAAG,MAAM,CAAC;IACpC,MAAM,CAAC,YAAY,CAAC,YAAY,GAAG,YAAY,CAAC;CACnD","sourcesContent":["import {message as m, message} from \"./message/messenger\";\nimport Messenger = message.Messenger;\nimport {live, live as li} from \"./live/live\";\nimport {clip as c} from \"./clip/clip\";\nimport LiveApiJs = live.LiveApiJs;\nimport {log} from \"./log/logger\";\nimport Logger = log.Logger;\nimport {io} from \"./io/io\";\nimport Exporter = io.Exporter;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\ndeclare let Dict: any;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet exporter = new Exporter(\n    '/Users/elliottevers/Downloads/from_live_2.json'\n);\n\nlet set_length = () => {\n    let clip_highlighted = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot clip'\n    );\n\n    exporter.set_length(\n        clip_highlighted.get(\"length\")\n    );\n\n};\n\nlet set_tempo = () => {\n    let song = new li.LiveApiJs(\n        'live_set'\n    );\n\n    exporter.set_tempo(\n        song.get('tempo')\n    );\n};\n\nlet add = (name_part) => {\n\n    let song = new li.LiveApiJs(\n        'live_set'\n    );\n\n    let clip_highlighted = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot clip'\n    );\n\n    let clip = new c.Clip(\n        new c.ClipDao(\n            clip_highlighted,\n            new m.Messenger(env, 0),\n            false\n        )\n    );\n\n    let notes = clip.get_notes(\n        0,\n        0,\n        clip_highlighted.get(\"length\"),\n        128\n    );\n\n    exporter.set_notes(\n        name_part,\n        notes\n    );\n};\n\nlet remove = (name_part) => {\n    exporter.unset_notes(\n        name_part\n    );\n};\n\n\nlet export_clips = () => {\n    exporter.export_clips(\n        ['melody', 'chord', 'bass']\n    )\n};\n\nlet test = () => {\n\n    // let song = new li.LiveApiJs(\n    //     'live_set'\n    // );\n    //\n    // let clip_highlighted = new li.LiveApiJs(\n    //     'live_set view highlighted_clip_slot clip'\n    // );\n    //\n    // let length_clip = clip_highlighted.get(\"length\");\n    //\n    // let tempo = song.get(\"tempo\");\n    //\n    // let logger = new Logger(env);\n    //\n    // logger.log(clip_highlighted.get_id())\n};\n\n\nif (typeof Global !== \"undefined\") {\n    Global.export_clips = {};\n    Global.export_clips.test = test;\n    Global.export_clips.add = add;\n    Global.export_clips.remove = remove;\n    Global.export_clips.export_clips = export_clips;\n}\n"]}