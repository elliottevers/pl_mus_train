{"version":3,"file":"track.js","sourceRoot":"","sources":["track.ts"],"names":[],"mappings":"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","sourcesContent":["import {live as li, live} from \"../live/live\";\nimport {clip} from \"../clip/clip\";\nimport {message} from \"../message/messenger\";\nconst _ = require('underscore');\n\nexport namespace track {\n    import LiveApiJs = live.LiveApiJs;\n    import Clip = clip.Clip;\n    import ClipDao = clip.ClipDao;\n    import Messenger = message.Messenger;\n\n    export let get_notes_on_track = (path_track) => {\n        let index_track = Number(path_track.split(' ')[2]);\n\n        let track = new Track(\n            new TrackDao(\n                new li.LiveApiJs(path_track)\n            )\n        );\n\n        let num_clip_slots = track.get_num_clip_slots();\n\n        // let track = new li.LiveApiJs(path_track);\n\n        // let num_clipslots = track.get(\"clip_slots\").length/2;\n\n        let notes_amassed = [];\n\n        for (let i_clipslot of _.range(0, num_clip_slots)) {\n            let path_clipslot = ['live_set', 'tracks', index_track, 'clip_slots', Number(i_clipslot)].join(' ');\n\n            let clip = new Clip(\n                new ClipDao(\n                    new li.LiveApiJs(\n                        path_clipslot.split(' ').concat(['clip']).join(' ')\n                    ),\n                    new Messenger('max', 0)\n                )\n            );\n\n            notes_amassed = notes_amassed.concat(\n                clip.get_notes(\n                    clip.get_loop_bracket_lower(),\n                    0,\n                    clip.get_loop_bracket_upper(),\n                    128\n                )\n            );\n        }\n\n        return notes_amassed\n    };\n\n    export class Track {\n\n        public track_dao;\n\n        constructor(track_dao: TrackDao) {\n            this.track_dao = track_dao;\n        }\n\n        public get_num_clip_slots() {\n            return this.get_clip_slots().length\n        }\n\n        public get_clip_slots() {\n            return this.track_dao.get_clip_slots()\n        }\n\n        // public static get_notes_on_track(path_track) {\n        //     let index_track = Number(path_track.split(' ')[2]);\n        //\n        //     let track = new li.LiveApiJs(path_track);\n        //\n        //     let num_clipslots = track.get(\"clip_slots\").length/2;\n        //\n        //     let notes_amassed = [];\n        //\n        //     for (let i_clipslot of _.range(0, num_clipslots)) {\n        //         let path_clipslot = ['live_set', 'tracks', index_track, 'clip_slots', Number(i_clipslot)].join(' ');\n        //\n        //         let clip = new Clip(\n        //             new ClipDao(\n        //                 new li.LiveApiJs(\n        //                     path_clipslot.split(' ').concat(['clip']).join(' ')\n        //                 ),\n        //                 new Messenger('max', 0)\n        //             )\n        //         );\n        //\n        //         notes_amassed = notes_amassed.concat(\n        //             clip.get_notes(\n        //                 clip.get_loop_bracket_lower(),\n        //                 0,\n        //                 clip.get_loop_bracket_upper(),\n        //                 128\n        //             )\n        //         );\n        //     }\n        //\n        //     return notes_amassed\n        // };\n    }\n\n    export class TrackDao {\n\n        private live_api: LiveApiJs;\n\n        constructor(live_api: LiveApiJs) {\n            this.live_api = live_api\n        }\n\n        get_clip_slots() {\n            let data_clip_slots = this.live_api.get(\"clip_slots\");\n\n            let clip_slots = [];\n\n            let clip_slot = [];\n\n            for (let i_datum in data_clip_slots) {\n\n                let datum = Number(i_datum);\n\n                clip_slot.push(datum);\n\n                if (Number(i_datum) % 2 === 1) {\n                    clip_slots.push(clip_slot)\n                }\n            }\n\n            return clip_slots\n        }\n    }\n}"]}