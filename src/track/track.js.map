{"version":3,"file":"track.js","sourceRoot":"","sources":["track.ts"],"names":[],"mappings":"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","sourcesContent":["import {live} from \"../live/live\";\nimport {clip} from \"../clip/clip\";\nimport {message} from \"../message/messenger\";\nimport {note} from \"../note/note\";\nimport TreeModel = require(\"tree-model\");\nimport {clip_slot} from \"../clip_slot/clip_slot\";\nimport {utils} from \"../utils/utils\";\nimport {log} from \"../log/logger\";\nconst _ = require('underscore');\n\nexport namespace track {\n    import LiveApiJs = live.LiveApiJs;\n    import Clip = clip.Clip;\n    import Messenger = message.Messenger;\n    import Note = note.Note;\n    import ClipSlot = clip_slot.ClipSlot;\n    import ClipSlotDao = clip_slot.ClipSlotDao;\n    import ClipDao = clip.ClipDao;\n    import Logger = log.Logger;\n    import ClipSlotDaoVirtual = clip_slot.ClipSlotDaoVirtual;\n    import iLiveApiJs = live.iLiveApiJs;\n\n    // export let get_notes_on_track = (path_track) => {\n    //     let index_track = Number(path_track.split(' ')[2]);\n    //\n    //     let track = new Track(\n    //         new TrackDao(\n    //             new li.LiveApiJs(path_track)\n    //         )\n    //     );\n    //\n    //     let num_clip_slots = track.get_num_clip_slots();\n    //\n    //     let notes_amassed = [];\n    //\n    //     for (let i_clipslot of _.range(0, num_clip_slots)) {\n    //         let path_clipslot = ['live_set', 'tracks', index_track, 'clip_slots', Number(i_clipslot)].join(' ');\n    //\n    //         let clip = new Clip(\n    //             new ClipDao(\n    //                 new li.LiveApiJs(\n    //                     path_clipslot.split(' ').concat(['clip']).join(' ')\n    //                 ),\n    //                 new Messenger('max', 0)\n    //             )\n    //         );\n    //\n    //         notes_amassed = notes_amassed.concat(\n    //             clip.get_notes(\n    //                 clip.get_loop_bracket_lower(),\n    //                 0,\n    //                 clip.get_loop_bracket_upper(),\n    //                 128\n    //             )\n    //         );\n    //     }\n    //\n    //     return notes_amassed\n    // };\n\n    export class Track {\n\n        public track_dao;\n\n        clip_slots: ClipSlot[] = [];\n\n        constructor(track_dao: iTrackDao) {\n            this.track_dao = track_dao;\n        }\n\n        public static get_clip_at_index(index_track: number, index_clip_slot: number, messenger: Messenger): Clip {\n            return new Clip(\n                new ClipDao(\n                    new LiveApiJs(\n                        ['live_set', 'tracks', String(index_track), 'clip_slots', String(index_clip_slot), 'clip'].join(' ')\n                    ),\n                    messenger\n                )\n            );\n        }\n\n        public static get_clip_slot_at_index(index_track: number, index_clip_slot: number, messenger: Messenger): ClipSlot {\n            return new ClipSlot(\n                new ClipSlotDao(\n                    new LiveApiJs(\n                        ['live_set', 'tracks', String(index_track), 'clip_slots', String(index_clip_slot)].join(' ')\n                    ),\n                    messenger\n                )\n            );\n        }\n\n        public get_index(): number {\n            return Number(this.track_dao.get_path().split(' ')[2])\n        }\n\n        public load_clip_slots(): void {\n            this.clip_slots = this.track_dao.get_clip_slots();\n        }\n\n        public mute() {\n            this.track_dao.mute(true);\n        }\n\n        public unmute() {\n            this.track_dao.mute(false);\n        }\n\n        // public load_clips(): void {\n        //     //\n        //     let id_pairs: string[][] = this.get_clip_slots();\n        //     for (let id_pair of id_pairs) {\n        //         let clip_slot = new ClipSlot(\n        //             new ClipSlotDao(\n        //                 new LiveApiJs(\n        //                     id_pair.join(' ')\n        //                 ),\n        //                 this.track_dao.messenger\n        //             )\n        //         );\n        //\n        //         if (clip_slot.b_has_clip()) {\n        //             this.clip\n        //         }\n        //     }\n        // }\n\n        public load_clips() {\n            this.load_clip_slots();\n\n            // let logger = new Logger('max');\n            // logger.log(JSON.stringify(this.clip_slots))\n\n            for (let clip_slot of this.clip_slots) {\n                clip_slot.load_clip();\n                // clip_slot.load_clip()\n                // if (clip_slot.b_has_clip()) {\n                //     logger.log(JSON.stringify(clip_slot.get_clip().get_notes_within_markers()))\n                // }\n            }\n        }\n\n        public delete_clips() {\n            for (let clip_slot of this.clip_slots) {\n                if (clip_slot.b_has_clip()) {\n                    clip_slot.delete_clip()\n                }\n            }\n        }\n\n        public create_clip_at_index(index: number, length_beats: number): void {\n            this.clip_slots[index].create_clip(length_beats)\n        }\n\n        public get_clip_slot_at_index(index_clip_slot: number): ClipSlot {\n            return this.clip_slots[index_clip_slot]\n        }\n\n        // TODO: should return null if the there aren't even that many scenes\n        public get_clip_at_index(index: number): Clip {\n            let clip_slot = this.clip_slots[index];\n            return clip_slot.get_clip()\n        }\n\n        public get_num_clip_slots() {\n            return this.get_clip_slots().length\n        }\n\n        public get_clip_slots() {\n            return this.track_dao.get_clip_slots()\n        }\n\n        // NB: assumes that the clips form a perfect partition of the duration inside the start, end marker\n        get_notes(): TreeModel.Node<Note>[] {\n            let notes_amassed = [];\n            for (let clip_slot of this.clip_slots) {\n                if (clip_slot.b_has_clip()) {\n                    notes_amassed = notes_amassed.concat(\n                        clip_slot.get_clip().get_notes_within_markers()\n                    )\n                }\n            }\n            return notes_amassed;\n        }\n\n        public get_path(): string {\n            // TODO: implement\n            return this.track_dao.get_path()\n        }\n    }\n\n    export interface iTrackDao {\n        // get_notes(): TreeModel.Node<Note>[]\n        get_clip_slots(int: number)\n        get_path()\n    }\n\n    // TODO: please change everything in here\n    export class TrackDaoVirtual implements iTrackDao {\n\n        num_clip_slots: number;\n        clips: Clip[];\n\n        constructor(clips: Clip[]) {\n            this.clips = clips;\n        }\n\n        mute() {\n\n        }\n\n        // get_num_clip_slots(): number {\n        //     return this.num_clip_slots;\n        // }\n\n        get_notes(): TreeModel.Node<Note>[] {\n            let notes_amassed = [];\n            for (let clip of this.clips) {\n                notes_amassed = notes_amassed.concat(\n                    clip.get_notes(\n                        clip.get_loop_bracket_lower(),\n                        0,\n                        clip.get_loop_bracket_upper(),\n                        128\n                    )\n                )\n            }\n            return notes_amassed;\n        }\n\n        // only return as many clip slots as there are clips\n        get_clip_slots(): ClipSlot[] {\n            let clip_slots = [];\n            for (let clip of this.clips) {\n                clip_slots.push(\n                    new ClipSlot(\n                        new ClipSlotDaoVirtual(\n                            clip\n                        )\n                    )\n                )\n            }\n            return clip_slots\n        }\n\n        get_path(): string {\n            return\n        }\n    }\n\n    export class TrackDao implements iTrackDao {\n\n        live_api;\n        messenger: Messenger;\n        deferlow: boolean;\n        key_route: string;\n        env: string;\n\n        constructor(live_api: iLiveApiJs, messenger, deferlow?: boolean, key_route?: string, env?: string) {\n            this.live_api = live_api;\n            this.messenger = messenger;\n            if (deferlow && !key_route) {\n                throw new Error('key route not specified when using deferlow');\n            }\n            this.deferlow = deferlow;\n            this.key_route = key_route;\n            this.env = env;\n        }\n\n        set_path_deferlow(key_route_override: string, path_live: string): void {\n            let mess: any[] = [key_route_override];\n\n            for (let word of utils.PathLive.to_message(path_live)) {\n                mess.push(word)\n            }\n\n            this.messenger.message(mess)\n        }\n\n        get_clip_slots(): ClipSlot[] {\n            let data_clip_slots = this.live_api.get(\"clip_slots\");\n\n            let clip_slots = [];\n\n            let clip_slot = [];\n\n            for (let i_datum in data_clip_slots) {\n\n                let datum = data_clip_slots[Number(i_datum)];\n\n                clip_slot.push(datum);\n\n                if (Number(i_datum) % 2 === 1) {\n                    clip_slots.push(clip_slot);\n                    clip_slot = [];\n                }\n            }\n\n            return clip_slots.map((list_id_clip_slot) => {\n                return new ClipSlot(\n                    new ClipSlotDao(\n                        new LiveApiJs(\n                            list_id_clip_slot.join(' ')\n                        ),\n                        new Messenger('max', 0)\n                    )\n                )\n            });\n        }\n\n        mute(val: boolean) {\n            if (val) {\n                this.live_api.call('mute', '1')\n            } else {\n                this.live_api.call('mute', '0')\n            }\n        }\n\n        get_path(): string {\n            return utils.cleanse_path(this.live_api.get_path())\n        }\n    }\n}"]}