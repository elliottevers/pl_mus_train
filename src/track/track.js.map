{"version":3,"file":"track.js","sourceRoot":"","sources":["track.ts"],"names":[],"mappings":";;AAAA,qCAA8C;AAC9C,qCAAkC;AAClC,kDAA6C;AAG7C,IAAM,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAEhC,IAAiB,KAAK,CAkPrB;AAlPD,WAAiB,KAAK;IAClB,IAAO,SAAS,GAAG,WAAI,CAAC,SAAS,CAAC;IAClC,IAAO,IAAI,GAAG,WAAI,CAAC,IAAI,CAAC;IACxB,IAAO,OAAO,GAAG,WAAI,CAAC,OAAO,CAAC;IAC9B,IAAO,SAAS,GAAG,mBAAO,CAAC,SAAS,CAAC;IAGrC,oDAAoD;IACpD,0DAA0D;IAC1D,EAAE;IACF,6BAA6B;IAC7B,wBAAwB;IACxB,2CAA2C;IAC3C,YAAY;IACZ,SAAS;IACT,EAAE;IACF,uDAAuD;IACvD,EAAE;IACF,8BAA8B;IAC9B,EAAE;IACF,2DAA2D;IAC3D,+GAA+G;IAC/G,EAAE;IACF,+BAA+B;IAC/B,2BAA2B;IAC3B,oCAAoC;IACpC,0EAA0E;IAC1E,qBAAqB;IACrB,0CAA0C;IAC1C,gBAAgB;IAChB,aAAa;IACb,EAAE;IACF,gDAAgD;IAChD,8BAA8B;IAC9B,iDAAiD;IACjD,qBAAqB;IACrB,iDAAiD;IACjD,sBAAsB;IACtB,gBAAgB;IAChB,aAAa;IACb,QAAQ;IACR,EAAE;IACF,2BAA2B;IAC3B,KAAK;IAEL;QAII,eAAY,SAAoB;YAC5B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC/B,CAAC;QAEM,oBAAI,GAAX;YACI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC3B,CAAC;QAEM,sBAAM,GAAb;YACI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC3B,CAAC;QAEa,uBAAiB,GAA/B,UAAgC,WAAmB,EAAE,eAAuB;YACxE,OAAO,IAAI,IAAI,CACX,IAAI,OAAO,CACP,IAAI,SAAS,CACT,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CACtD,EACD,IAAI,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CACxB,CACJ,CAAC;QACN,CAAC;QAED,kCAAkC;QAC3B,oCAAoB,GAA3B;QAEA,CAAC;QAEM,yBAAS,GAAhB;QAEA,CAAC;QAEM,+BAAe,GAAtB;QAEA,CAAC;QAEM,0BAAU,GAAjB;QAEA,CAAC;QAEM,oBAAI,GAAX;QAEA,CAAC;QAEM,4BAAY,GAAnB;QAEA,CAAC;QAEM,oCAAoB,GAA3B;QAEA,CAAC;QAEM,sCAAsB,GAA7B;QAEA,CAAC;QAED,qEAAqE;QAC9D,iCAAiB,GAAxB;QAEA,CAAC;QAEM,kCAAkB,GAAzB;YACI,OAAO,IAAI,CAAC,cAAc,EAAE,CAAC,MAAM,CAAA;QACvC,CAAC;QAEM,8BAAc,GAArB;YACI,OAAO,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAA;QAC1C,CAAC;QAED,mGAAmG;QACnG,yBAAS,GAAT;YACI,IAAI,aAAa,GAAG,EAAE,CAAC;YACvB,KAAiB,UAAe,EAAf,KAAA,IAAI,CAAC,UAAU,EAAf,cAAe,EAAf,IAAe,EAAE;gBAA7B,IAAI,MAAI,SAAA;gBACT,aAAa,GAAG,aAAa,CAAC,MAAM,CAChC,MAAI,CAAC,wBAAwB,EAAE,CAClC,CAAA;aACJ;YACD,OAAO,aAAa,CAAC;QACzB,CAAC;QAEM,wBAAQ,GAAf;QAEA,CAAC;QACL,YAAC;IAAD,CAAC,AAvFD,IAuFC;IAvFY,WAAK,QAuFjB,CAAA;IAOD;QAKI,yBAAY,KAAa;YACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACvB,CAAC;QAED,8BAAI,GAAJ;QAEA,CAAC;QAED,4CAAkB,GAAlB;YACI,OAAO,IAAI,CAAC,cAAc,CAAC;QAC/B,CAAC;QAED,mCAAS,GAAT;YACI,IAAI,aAAa,GAAG,EAAE,CAAC;YACvB,KAAiB,UAAU,EAAV,KAAA,IAAI,CAAC,KAAK,EAAV,cAAU,EAAV,IAAU,EAAE;gBAAxB,IAAI,MAAI,SAAA;gBACT,aAAa,GAAG,aAAa,CAAC,MAAM,CAChC,MAAI,CAAC,SAAS,CACV,MAAI,CAAC,sBAAsB,EAAE,EAC7B,CAAC,EACD,MAAI,CAAC,sBAAsB,EAAE,EAC7B,GAAG,CACN,CACJ,CAAA;aACJ;YACD,OAAO,aAAa,CAAC;QACzB,CAAC;QAED,wCAAc,GAAd;YACI,yDAAyD;YACzD,EAAE;YACF,uBAAuB;YACvB,EAAE;YACF,sBAAsB;YACtB,EAAE;YACF,yCAAyC;YACzC,EAAE;YACF,mCAAmC;YACnC,EAAE;YACF,6BAA6B;YAC7B,EAAE;YACF,uCAAuC;YACvC,qCAAqC;YACrC,QAAQ;YACR,IAAI;YACJ,EAAE;YACF,oBAAoB;YAEpB,IAAI,IAAI,GAAa,EAAE,CAAC;YACxB,KAAc,UAA+B,EAA/B,KAAA,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,EAA/B,cAA+B,EAA/B,IAA+B,EAAE;gBAA1C,IAAI,CAAC,SAAA;gBACN,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;aACxB;YACD,OAAO,IAAI,CAAC;QAChB,CAAC;QACL,sBAAC;IAAD,CAAC,AA3DD,IA2DC;IA3DY,qBAAe,kBA2D3B,CAAA;IAED;QAII,kBAAY,QAAmB;YAC3B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;QAC5B,CAAC;QAED,iCAAc,GAAd;YACI,IAAI,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAEtD,IAAI,UAAU,GAAG,EAAE,CAAC;YAEpB,IAAI,SAAS,GAAG,EAAE,CAAC;YAEnB,KAAK,IAAI,OAAO,IAAI,eAAe,EAAE;gBAEjC,IAAI,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;gBAE5B,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAEtB,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;oBAC3B,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;iBAC7B;aACJ;YAED,OAAO,UAAU,CAAA;QACrB,CAAC;QAED,uBAAI,GAAJ,UAAK,GAAY;YACb,IAAI,GAAG,EAAE;gBACL,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;aAClC;iBAAM;gBACH,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;aAClC;QACL,CAAC;QAED,qCAAqC;QACrC,4BAAS,GAAT;QAEA,CAAC;QACL,eAAC;IAAD,CAAC,AAzCD,IAyCC;IAzCY,cAAQ,WAyCpB,CAAA;AACL,CAAC,EAlPgB,KAAK,GAAL,aAAK,KAAL,aAAK,QAkPrB","sourcesContent":["import {live as li, live} from \"../live/live\";\nimport {clip} from \"../clip/clip\";\nimport {message} from \"../message/messenger\";\nimport {note} from \"../note/note\";\nimport TreeModel = require(\"tree-model\");\nconst _ = require('underscore');\n\nexport namespace track {\n    import LiveApiJs = live.LiveApiJs;\n    import Clip = clip.Clip;\n    import ClipDao = clip.ClipDao;\n    import Messenger = message.Messenger;\n    import Note = note.Note;\n\n    // export let get_notes_on_track = (path_track) => {\n    //     let index_track = Number(path_track.split(' ')[2]);\n    //\n    //     let track = new Track(\n    //         new TrackDao(\n    //             new li.LiveApiJs(path_track)\n    //         )\n    //     );\n    //\n    //     let num_clip_slots = track.get_num_clip_slots();\n    //\n    //     let notes_amassed = [];\n    //\n    //     for (let i_clipslot of _.range(0, num_clip_slots)) {\n    //         let path_clipslot = ['live_set', 'tracks', index_track, 'clip_slots', Number(i_clipslot)].join(' ');\n    //\n    //         let clip = new Clip(\n    //             new ClipDao(\n    //                 new li.LiveApiJs(\n    //                     path_clipslot.split(' ').concat(['clip']).join(' ')\n    //                 ),\n    //                 new Messenger('max', 0)\n    //             )\n    //         );\n    //\n    //         notes_amassed = notes_amassed.concat(\n    //             clip.get_notes(\n    //                 clip.get_loop_bracket_lower(),\n    //                 0,\n    //                 clip.get_loop_bracket_upper(),\n    //                 128\n    //             )\n    //         );\n    //     }\n    //\n    //     return notes_amassed\n    // };\n\n    export class Track {\n\n        public track_dao;\n\n        constructor(track_dao: iTrackDao) {\n            this.track_dao = track_dao;\n        }\n\n        public mute() {\n            this.track_dao.mute(1);\n        }\n\n        public unmute() {\n            this.track_dao.mute(0);\n        }\n\n        public static get_clip_at_index(index_track: number, index_clip_slot: number): Clip {\n            return new Clip(\n                new ClipDao(\n                    new LiveApiJs(\n                        path_clipslot.split(' ').concat(['clip']).join(' ')\n                    ),\n                    new Messenger(env, 0)\n                )\n            );\n        }\n\n        // TODO: maintain an interval tree\n        public get_clip_at_interval() {\n\n        }\n\n        public get_index() {\n\n        }\n\n        public load_clip_slots() {\n\n        }\n\n        public load_clips() {\n\n        }\n\n        public load() {\n\n        }\n\n        public delete_clips() {\n\n        }\n\n        public create_clip_at_index() {\n\n        }\n\n        public get_clip_slot_at_index() {\n\n        }\n\n        // TODO: should return null if the there aren't even that many scenes\n        public get_clip_at_index() {\n\n        }\n\n        public get_num_clip_slots() {\n            return this.get_clip_slots().length\n        }\n\n        public get_clip_slots() {\n            return this.track_dao.get_clip_slots()\n        }\n\n        // NB: assumes that the clips form a perfect partition of the duration inside the start, end marker\n        get_notes(): TreeModel.Node<Note>[] {\n            let notes_amassed = [];\n            for (let clip of this.clip_slots) {\n                notes_amassed = notes_amassed.concat(\n                    clip.get_notes_within_markers()\n                )\n            }\n            return notes_amassed;\n        }\n\n        public get_path() {\n\n        }\n    }\n\n    export interface iTrackDao {\n        get_notes(): TreeModel.Node<Note>[]\n        get_clip_slots(int: number)\n    }\n\n    export class TrackDaoVirtual implements iTrackDao {\n\n        num_clip_slots: number;\n        clips: Clip[];\n\n        constructor(clips: Clip[]) {\n            this.clips = clips;\n        }\n\n        mute() {\n\n        }\n\n        get_num_clip_slots(): number {\n            return this.num_clip_slots;\n        }\n\n        get_notes(): TreeModel.Node<Note>[] {\n            let notes_amassed = [];\n            for (let clip of this.clips) {\n                notes_amassed = notes_amassed.concat(\n                    clip.get_notes(\n                        clip.get_loop_bracket_lower(),\n                        0,\n                        clip.get_loop_bracket_upper(),\n                        128\n                    )\n                )\n            }\n            return notes_amassed;\n        }\n\n        get_clip_slots() {\n            // let data_clip_slots = this.live_api.get(\"clip_slots\");\n            //\n            // let clip_slots = [];\n            //\n            // let clip_slot = [];\n            //\n            // for (let i_datum in data_clip_slots) {\n            //\n            //     let datum = Number(i_datum);\n            //\n            //     clip_slot.push(datum);\n            //\n            //     if (Number(i_datum) % 2 === 1) {\n            //         clip_slots.push(clip_slot)\n            //     }\n            // }\n            //\n            // return clip_slots\n\n            let data: string[] = [];\n            for (let i of _.range(0, this.num_clip_slots)) {\n                data.push('id');\n                data.push(String(i));\n            }\n            return data;\n        }\n    }\n\n    export class TrackDao implements iTrackDao {\n\n        private live_api: LiveApiJs;\n\n        constructor(live_api: LiveApiJs) {\n            this.live_api = live_api\n        }\n\n        get_clip_slots() {\n            let data_clip_slots = this.live_api.get(\"clip_slots\");\n\n            let clip_slots = [];\n\n            let clip_slot = [];\n\n            for (let i_datum in data_clip_slots) {\n\n                let datum = Number(i_datum);\n\n                clip_slot.push(datum);\n\n                if (Number(i_datum) % 2 === 1) {\n                    clip_slots.push(clip_slot)\n                }\n            }\n\n            return clip_slots\n        }\n\n        mute(val: boolean) {\n            if (val) {\n                this.live_api.call('mute', '1')\n            } else {\n                this.live_api.call('mute', '0')\n            }\n        }\n\n        // implement the amassing notes logic\n        get_notes(): TreeModel.Node<Note>[] {\n\n        }\n    }\n}"]}