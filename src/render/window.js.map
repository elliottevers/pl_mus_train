{"version":3,"file":"window.js","sourceRoot":"","sources":["window.ts"],"names":[],"mappings":"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","sourcesContent":["import TreeModel = require(\"tree-model\");\nimport {message as m} from \"../message/messenger\"\nimport {clip as c} from \"../clip/clip\";\nimport {note as n} from \"../note/note\";\nimport {live} from \"../live/live\";\nimport * as _ from \"lodash\";\nimport {log} from \"../log/logger\";\nlet CircularJSON = require('circular-json');\n\nexport namespace window {\n\n    import LiveClipVirtual = live.LiveClipVirtual;\n    import Logger = log.Logger;\n\n    const red = [255, 0, 0];\n    const black = [0, 0, 0];\n\n    export class Pwindow {\n        height: number;\n        width: number;\n        messenger: m.Messenger;\n        clips: c.Clip[];\n        beats_per_measure: number;\n        root_parse_tree: TreeModel.Node<n.Note>;\n        leaves: TreeModel.Node<n.Note>[];\n        logger: Logger;\n\n        constructor(height: number, width: number, messenger: m.Messenger) {\n            this.height = height;\n            this.width = width;\n            this.messenger = messenger;\n            this.clips = [];\n            this.beats_per_measure = 4;\n            this.logger = new Logger('max');\n        }\n\n        get_notes_leaves(): TreeModel.Node<n.Note>[] {\n            return this.leaves;\n        }\n\n        set_root(note_root: TreeModel.Node<n.Note>) {\n            let clip_dao_virtual = new LiveClipVirtual([note_root]);\n\n            let clip_virtual = new c.Clip(clip_dao_virtual);\n\n            this.add_clip(clip_virtual);\n\n            note_root.model.id = 0;  // index of first clip\n\n            this.root_parse_tree = note_root;\n\n            this.leaves = [note_root];\n        }\n\n        elaborate(elaboration: TreeModel.Node<n.Note>[], beat_start: number, beat_end: number, index_layer: number): void {\n\n            if (index_layer + 1 > this.clips.length) {\n                let clip_dao_virtual = new LiveClipVirtual(elaboration);\n                let clip_virtual = new c.Clip(clip_dao_virtual);\n                this.add_clip(clip_virtual);\n            } else {\n                let clip_last = this.clips[this.clips.length - 1];\n                clip_last.set_notes(elaboration)\n            }\n\n            let leaves_within_interval = this.get_leaves_within_interval(beat_start, beat_end);\n\n            if (index_layer == 1) {\n                this.add_first_layer(elaboration, this.clips.length - 1)\n            } else {\n                this.add_layer(leaves_within_interval, elaboration, this.clips.length - 1);\n            }\n\n            this.update_leaves(leaves_within_interval);\n        }\n\n        splice_notes(notes_subset: TreeModel.Node<n.Note>[], clip: c.Clip, interval_beats: number[]): TreeModel.Node<n.Note>[] {\n            let notes_clip = _.cloneDeep(clip.get_notes_within_markers());\n            let num_notes_to_replace = this.get_order_of_note_at_beat_end(notes_clip, interval_beats[1]) - this.get_order_of_note_at_beat_start(notes_clip, interval_beats[0]) + 1;\n            let index_start = this.get_note_index_at_beat(interval_beats[0], notes_clip);\n            notes_clip.splice(index_start, num_notes_to_replace, ...notes_subset);\n            return notes_clip\n        }\n\n        get_note_index_at_beat(beat: number, notes: TreeModel.Node<n.Note>[]): number {\n            let val =  _.findIndex(notes, (node)=>{\n                return node.model.note.beat_start === beat\n            });\n            return val;\n        }\n\n        get_leaves_within_interval(beat_start: number, beat_end: number): TreeModel.Node<n.Note>[] {\n            let val =  this.leaves.filter((node) =>{\n                // return node.model.note.beat_start >= beat_start && node.model.note.get_beat_end() <= beat_end\n                return (node.model.note.beat_start >= beat_start && node.model.note.beat_start <= beat_end) || (node.model.note.get_beat_end() <= beat_end && node.model.note.get_beat_end() >= beat_start)\n\n            });\n            // this.logger.log(CircularJSON.stringify(this.leaves));\n            return val;\n        }\n\n        // NB: this makes the assumption that the end marker is at the end of the clip\n        get_num_measures_clip(): number {\n            return this.clips[0].get_num_measures();\n        }\n\n        // TODO: make node have indices to both clip and note\n        get_centroid(node: TreeModel.Node<n.Note>): number[] {\n\n            let dist_from_left_beat_start, dist_from_left_beat_end, dist_from_top_note_top, dist_from_top_note_bottom;\n\n            let index_clip = node.model.id;\n\n            // TODO: determine how to get the index of the clip from just depth of the node\n\n            dist_from_left_beat_start = this.get_dist_from_left(node.model.note.beat_start);\n            dist_from_left_beat_end = this.get_dist_from_left(node.model.note.beat_start + node.model.note.beats_duration);\n            dist_from_top_note_top = this.get_dist_from_top(node.model.note.pitch, index_clip);\n            dist_from_top_note_bottom = this.get_dist_from_top(node.model.note.pitch - 1, index_clip);\n\n            return [\n                dist_from_left_beat_end - ((dist_from_left_beat_end - dist_from_left_beat_start) / 2),\n                dist_from_top_note_bottom - ((dist_from_top_note_bottom - dist_from_top_note_top) / 2)\n            ]\n        };\n\n        // TODO: elaboration won't always\n        get_order_of_note_at_beat_start(notes: TreeModel.Node<n.Note>[], beat_start: number): number {\n            return _.findIndex(notes, (node) => {\n                return node.model.note.beat_start === beat_start\n            });\n        }\n\n        get_order_of_note_at_beat_end(notes: TreeModel.Node<n.Note>[], beat_end: number): number {\n            return _.findIndex(notes, (node) => {\n                return node.model.note.get_beat_end() === beat_end\n            });\n        }\n\n        get_interval_beats(notes: TreeModel.Node<n.Note>[]): number[] {\n            return [\n                notes[0].model.note.beat_start,\n                notes[notes.length - 1].model.note.get_beat_end()\n            ];\n        }\n\n        // TODO: add capability to automatically determine parent/children relationships between adjacent tracks\n        add_clip(clip: c.Clip): void {\n            this.clips.push(clip);\n        };\n\n        get_diff_index_start(notes_new: TreeModel.Node<n.Note>[], notes_old: TreeModel.Node<n.Note>[]): number {\n            let same_start, same_duration, index_start_diff;\n            for (let i=0; i < notes_old.length; i++) {\n                same_start = (notes_old[i].model.note.beat_start === notes_new[i].model.note.beat_start);\n                same_duration = (notes_old[i].model.note.beats_duration === notes_new[i].model.note.beats_duration);\n                if (!(same_start && same_duration)) {\n                    index_start_diff = i;\n                    break;\n                }\n            }\n\n            return index_start_diff;\n        }\n\n        get_diff_index_end(notes_new: TreeModel.Node<n.Note>[], notes_old: TreeModel.Node<n.Note>[]): number {\n            let same_start, same_duration, index_end_diff;\n            for (let i=-1; i > -1 * (notes_new.length + 1); i--) {\n                same_start = (notes_new.slice(i)[0].model.note.beat_start === notes_old.slice(i)[0].model.note.beat_start);\n                same_duration = (notes_new.slice(i)[0].model.note.beats_duration === notes_old.slice(i)[0].model.note.beats_duration);\n                if (!(same_start && same_duration)) {\n                    index_end_diff = i;\n                    break;\n                }\n            }\n\n            // NB: add one in order to use with array slice, unless of course the index is -1, then you'll access the front of the array\n            return index_end_diff;\n        }\n\n        // TODO: complete return method signature\n        get_diff_index_notes(notes_parent: TreeModel.Node<n.Note>[], notes_child: TreeModel.Node<n.Note>[]): number[] {\n            return [\n                this.get_diff_index_start(notes_child, notes_parent),\n                this.get_diff_index_end(notes_child, notes_parent)\n            ];\n        };\n\n        render_tree(): void {\n            var messages = this.get_messages_render_tree();\n            for (var i=0; i < messages.length; i++) {\n                this.messenger.message(\n                    messages[i]\n                )\n            }\n        };\n\n        // TODO: how do we render when there is no singular root (i.e. parsing, not sampling, sentence)?\n        get_messages_render_tree() {\n            let color: number[], messages: any[] = [], message: any[];\n\n            this.root_parse_tree.walk((node)=>{\n                if (node.hasChildren()) {\n                    for (let child of node.children) {\n\n                        message = [\n                            \"linesegment\",\n                            this.get_centroid(child)[0],\n                            this.get_centroid(child)[1],\n                            this.get_centroid(node)[0],\n                            this.get_centroid(node)[1]\n                        ];\n\n                        color = red;\n\n                        messages.push(message.concat(color));\n\n                    }\n                }\n\n                return true;\n            });\n\n            return messages;\n        };\n\n        private add_first_layer(notes: TreeModel.Node<n.Note>[], index_new_layer: number): void {\n            // var note_parent_best, b_successful;\n\n            for (let node of notes) {\n                node.model.id = index_new_layer;\n                this.root_parse_tree.addChild(node);\n            }\n        }\n\n        // NB: only works top down currently\n        // private add_layer(notes_parent: TreeModel.Node<n.Note>[], notes_child: TreeModel.Node<n.Note>[]): TreeModel.Node<n.Note>[] {\n        private add_layer(notes_parent: TreeModel.Node<n.Note>[], notes_child: TreeModel.Node<n.Note>[], index_new_layer: number): void {\n\n            var note_parent_best, b_successful;\n\n            for (let node of notes_child) {\n                note_parent_best = node.model.note.get_best_candidate(notes_parent);\n                b_successful = node.model.note.choose();\n                if (b_successful) {\n                    node.model.id = index_new_layer;\n                    note_parent_best.addChild(node);\n                }\n            }\n        };\n\n        private update_leaves(leaves: TreeModel.Node<n.Note>[]) {\n            // find leaves in parse/derive beat interval\n\n            // splice them with their children\n            let leaves_spliced = this.leaves;\n            let children_to_insert, i_leaf_to_splice;\n            for (let leaf of leaves) {\n                // find index of leaf to \"splice\"\n                // always splice only one leaf\n                // find corresponding leaf in leaves_spliced\n                children_to_insert = [];\n                if (leaf.hasChildren()) {\n                    i_leaf_to_splice = _.findIndex(leaves_spliced, (leaf_to_splice)=>{\n                        // assuming monophony, i.e., no overlap\n                        return leaf_to_splice.model.note.beat_start === leaf.model.note.beat_start\n                    });\n\n                    let beat_end_children_greatest = -Infinity, beat_start_children_least = Infinity;\n\n                    for (let child of leaf.children) {\n                        if (child.model.note.get_beat_end() > beat_end_children_greatest) {\n                            beat_end_children_greatest = child.model.note.get_beat_end();\n                        }\n                        if (child.model.note.beat_start < beat_start_children_least) {\n                            beat_start_children_least = child.model.note.beat_start;\n                        }\n                        children_to_insert.push(child);\n                    }\n\n                    if (false) {\n                    // if (leaf.model.note.get_beat_end() > beat_end_children_greatest || leaf.model.note.beat_start < beat_start_children_least) {\n                        leaves_spliced.splice(\n                            i_leaf_to_splice,\n                            0,\n                            ...children_to_insert\n                        )\n                    } else {\n                        leaves_spliced.splice(\n                            i_leaf_to_splice,\n                            1,\n                            ...children_to_insert\n                        )\n                    }\n                    // leaves_spliced.splice(\n                    //     i_leaf_to_splice,\n                    //     1,\n                    //     ...children_to_insert\n                    // )\n                }\n            }\n\n            this.leaves = leaves_spliced;\n        }\n\n        render_clips(): void {\n            var messages = this.get_messages_render_clips();\n            for (var i=0; i < messages.length; i++) {\n                this.messenger.message(\n                    messages[i]\n                )\n            }\n        };\n\n        // TODO: return signature\n        get_messages_render_clips()  {\n            var messages = [];\n            for (let index_clip in this.clips) {\n                messages = messages.concat(this.get_messages_render_notes(Number(index_clip)))\n            }\n            return messages;\n        };\n\n        get_messages_render_notes(index_clip: number) {\n            var clip = this.clips[index_clip];\n            let quadruplets = [];\n            for (let node of clip.get_notes_within_markers()) {\n                quadruplets.push(this.get_position_quadruplet(node, index_clip));\n            }\n            return quadruplets.map(function (tuplet) {\n                let message = <any>[\"paintrect\"].concat(tuplet);\n                message = message.concat(black);\n                return message;\n            })\n        };\n\n        get_position_quadruplet(node: TreeModel.Node<n.Note>, index_clip: number) {\n            var dist_from_left_beat_start, dist_from_top_note_top, dist_from_left_beat_end, dist_from_top_note_bottom;\n\n            dist_from_left_beat_start = this.get_dist_from_left(node.model.note.beat_start);\n            dist_from_left_beat_end = this.get_dist_from_left(node.model.note.beat_start + node.model.note.beats_duration);\n            dist_from_top_note_top = this.get_dist_from_top(node.model.note.pitch, index_clip);\n            dist_from_top_note_bottom = this.get_dist_from_top(node.model.note.pitch - 1, index_clip);\n\n            return [dist_from_left_beat_start, dist_from_top_note_top, dist_from_left_beat_end, dist_from_top_note_bottom]\n        };\n\n        get_dist_from_top(pitch: number, index_clip: number): number {\n            var clip = this.clips[index_clip];\n            let offset = index_clip;\n            // TODO: make this configurable\n            if (false) {\n                offset = this.clips.length - 1 - index_clip;\n            }\n            var dist = (clip.get_pitch_max() - pitch) * this.get_height_note(index_clip);\n            return dist + (this.get_height_clip() * offset);\n\n        };\n\n        beat_to_pixel = function (beat: number): number {\n            var num_pixels_in_clip = this.width;\n            var num_beats_in_clip = this.get_num_measures_clip() * this.beats_per_measure;\n            return beat * (num_pixels_in_clip / num_beats_in_clip);\n        };\n\n        get_dist_from_left(beat: number): number {\n            return this.beat_to_pixel(beat);\n        };\n\n        get_height_clip(): number {\n            return this.height / this.clips.length;\n        };\n\n        get_height_note(index_clip: number): number {\n            var ambitus = this.get_ambitus(index_clip);\n            var dist_pitch = ambitus[1] - ambitus[0] + 1;\n            return this.get_height_clip() / dist_pitch;\n        };\n\n        get_ambitus(index_clip: number): number[] {\n            return this.clips[index_clip].get_ambitus();\n        };\n    }\n}"]}