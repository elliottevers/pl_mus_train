{"version":3,"file":"window.js","sourceRoot":"","sources":["window.ts"],"names":[],"mappings":"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","sourcesContent":["import TreeModel = require(\"tree-model\");\nimport {message as m} from \"../message/messenger\"\nimport {clip as c} from \"../clip/clip\";\nimport {note as n} from \"../note/note\";\nimport {live} from \"../live/live\";\nimport * as _ from \"lodash\";\n\n\nexport namespace window {\n\n    import LiveClipVirtual = live.LiveClipVirtual;\n\n    export class Pwindow {\n        height: number;\n        width: number;\n        messenger: m.Messenger;\n        clips: c.Clip[];\n        beats_per_measure: number;\n        root_parse_tree: TreeModel.Node<n.Note>;\n        // list_leaves_current: TreeModel.Node<n.Note>[];\n        leaves: TreeModel.Node<n.Note>[];\n\n        constructor(height: number, width: number, messenger: m.Messenger) {\n            this.height = height;\n            this.width = width;\n            this.messenger = messenger;\n            this.clips = [];\n            // this.grans_per_measure = 24; // sixteenth and sixteenth triplets quantization\n            this.beats_per_measure = 4;\n            // this.root_parse_tree = null;\n            // this.list_leaves_current = null;\n            // need to count number of measures in clip\n            // then multiply that by 24 = granule/measure\n            // this is the min size of window in pixels\n            // make the width be an integer multiple of this, for convenience\n        }\n\n        // TODO: this assumes it only gets called once\n        set_clip(clip: c.Clip) {\n            this.clips.push(clip);\n            this.root_parse_tree = clip.get_notes()[0];\n            this.leaves = [clip.get_notes()[0]];\n        }\n\n        elaborate(elaboration: TreeModel.Node<n.Note>[], beat_start: number, beat_end: number): void {\n            // splice clip into clip\n            // TODO: pick up here on adding the fourth and last clip\n            let notes_new = this.splice_notes(elaboration, this.clips[this.clips.length - 1], [beat_start, beat_end]);\n            // add clip to this.clips\n            let clip_dao_new = new LiveClipVirtual(notes_new);\n            let clip_new = new c.Clip(clip_dao_new);\n            this.clips.push(clip_new);\n            // splice clip into leaves?  How to splice?  Same logic as above, though instead of replacing, we set children\n            // TODO: why are the clips in this.clips not full length?\n            // create_layer_from_notes(notes_splice: TreeModel.Node<n.Note>[]): TreeModel.Node<n.Note>[] {\n            //     let interval_splice: number[] = [\n            //         notes_splice[0].model.note.beat_start,\n            //         notes_splice[notes_splice.length - 1].model.note.get_beat_end()\n            //     ];\n            //\n            //     this.get_leaves_within_interval(interval_splice[0], interval_splice[1]);\n            //\n            //     return\n            // }\n\n            // TODO: maintain a list of current leaves\n            let leaves_within_interval = this.get_leaves_within_interval(beat_start, beat_end);\n            this.add_layer(leaves_within_interval, elaboration);\n            // TODO: note working for the fourth and last clip\n            this.update_leaves(leaves_within_interval);\n            // set list of current leaves\n        }\n\n        // deep_copy(obj) {\n        //     return JSON.parse(JSON.stringify(obj));\n        // }\n\n        // TODO: why are we updated notes in this.clips here?\n        // TODO: doesn't work with last clip\n        splice_notes(notes_subset: TreeModel.Node<n.Note>[], clip: c.Clip, interval_beats: number[]): TreeModel.Node<n.Note>[] {\n            // NB: beginning of interval must equal beat_start of some note in clip, and the end of the interval must equal beat_end of some note in clip\n            // let interval_beats = get_interval_beats(notes);\n            let notes_clip = _.cloneDeep(clip.get_notes());\n            let num_notes_to_replace = this.get_order_of_note_at_beat_end(notes_clip, interval_beats[1]) - this.get_order_of_note_at_beat_start(notes_clip, interval_beats[0]) + 1;\n            // this should be 2?\n            // TODO: this method only works if the two sets of notes are the same length\n            // TODO: should we replace *all* of the notes?\n            // let index_start = this.get_diff_index_start(\n            //     notes,\n            //     notes_clip\n            // );\n            // this should be 2\n            let index_start = this.get_note_index_at_beat(interval_beats[0], notes_clip);\n            // NB: stateful\n            notes_clip.splice(index_start, num_notes_to_replace, ...notes_subset);\n            return notes_clip\n        }\n\n        get_note_index_at_beat(beat: number, notes: TreeModel.Node<n.Note>[]): number {\n            let val =  notes.findIndex((node)=>{\n                // checking number against string\n                return node.model.note.beat_start === beat\n            });\n            return val;\n        }\n\n        get_leaves_within_interval(beat_start: number, beat_end: number): TreeModel.Node<n.Note>[] {\n            let val =  this.leaves.filter((node) =>{\n                return node.model.note.beat_start >= beat_start && node.model.note.get_beat_end() <= beat_end\n            });\n            return val;\n        }\n\n        // NB: this makes the assumption that the end marker is at the end of the clip\n        get_num_measures_clip(): number {\n            return this.clips[0].get_num_measures();\n        }\n\n        // TODO: make node have indices to both clip and note\n        get_centroid(node: TreeModel.Node<n.Note>): number[] {\n\n            var dist_from_left_beat_start, dist_from_left_beat_end, dist_from_top_note_top, dist_from_top_note_bottom;\n\n            // var index_clip = node.get_index_clip();\n            // var index_note = node.get_index_note();\n            // var clip = this.clips[index_clip];\n            // clip.load_notes();\n            // var note = clip.get_notes()[index_note];\n\n            // var index_clip = node.depth;\n            var index_clip = node.getPath().length - 1;\n\n            // TODO: determine how to get the index of the clip from just depth of the node\n\n            dist_from_left_beat_start = this.get_dist_from_left(node.model.note.beat_start);\n            dist_from_left_beat_end = this.get_dist_from_left(node.model.note.beat_start + node.model.note.beats_duration);\n            dist_from_top_note_top = this.get_dist_from_top(node.model.note.pitch, index_clip);\n            dist_from_top_note_bottom = this.get_dist_from_top(node.model.note.pitch - 1, index_clip);\n\n            return [\n                dist_from_left_beat_end - ((dist_from_left_beat_end - dist_from_left_beat_start) / 2),\n                dist_from_top_note_bottom - ((dist_from_top_note_bottom - dist_from_top_note_top) / 2)\n            ]\n        };\n\n        // TODO: elaboration won't always\n        get_order_of_note_at_beat_start(notes: TreeModel.Node<n.Note>[], beat_start: number): number {\n            return notes.findIndex((node) => {\n                return node.model.note.beat_start === beat_start\n            });\n        }\n\n        get_order_of_note_at_beat_end(notes: TreeModel.Node<n.Note>[], beat_end: number): number {\n            return notes.findIndex((node) => {\n                return node.model.note.get_beat_end() === beat_end\n            });\n        }\n\n        // num_notes_in_interval(notes: TreeModel.Node<n.Note>[], beat_start: number, beat_end: number): number {\n        //     return notes.filter((node) =>{\n        //         return node.model.note.beat_start > beat_start && (node.model.note.get_beat_end()) < beat_end\n        //     }).length;\n        // }\n\n        get_interval_beats(notes: TreeModel.Node<n.Note>[]): number[] {\n            return [\n                notes[0].model.note.beat_start,\n                notes[notes.length - 1].model.note.get_beat_end()\n            ];\n        }\n\n\n        // create_layer_from_notes(notes_splice: TreeModel.Node<n.Note>[]): TreeModel.Node<n.Note>[] {\n        //     let interval_splice: number[] = [\n        //         notes_splice[0].model.note.beat_start,\n        //         notes_splice[notes_splice.length - 1].model.note.get_beat_end()\n        //     ];\n        //\n        //     this.get_leaves_within_interval(interval_splice[0], interval_splice[1]);\n        //\n        //     return\n        // }\n\n        // TODO: add capability to automatically determine parent/children relationships between adjacent tracks\n        add_clip(clip: c.Clip): void {\n            this.clips.push(clip);\n            // if (this.clips.length === 1) {\n            //     // TODO: fix this, we're assuming the first clip has only the root note for now\n            //     // let tree: TreeModel = new TreeModel();\n            //     // this.root_parse_tree = tree.parse(\n            //     //     {\n            //     //         id: -1, // TODO: hashing scheme for clip id and beat start\n            //     //         note: clip.get_notes()[0],\n            //     //         children: []\n            //     //     }\n            //     // );\n            //     this.root_parse_tree = clip.get_notes()[0];\n            //     // this.list_leaves_current = [\n            //     //     this.root_parse_tree\n            //     // ];\n            //     return\n            // }\n            // // var notes_parent: TreeModel.Node<n.Note>[] = this.list_leaves_current; // TODO: don't make parental candidates leaves\n            // // TODO: make method that takes to clip indices and finds the diff\n            // // TODO: we don't need to support adding entire clip, if we know what the diff will be beforehand\n            // var notes_parent: TreeModel.Node<n.Note>[] = this.clips[this.clips.length - 2].get_notes();\n            // var notes_child: TreeModel.Node<n.Note>[] = clip.get_notes();\n            // var notes_diff = this.get_diff_notes(notes_parent, notes_child);\n            // var notes_parent_diff = notes_diff['parent'];\n            // var notes_child_diff = notes_diff['child'];\n            // // this.add_layer(notes_parent_diff, notes_child_diff);\n            // this.add_layer(this.get_leaves_within_interval())\n        };\n\n        get_diff_index_start(notes_new: TreeModel.Node<n.Note>[], notes_old: TreeModel.Node<n.Note>[]): number {\n            let same_start, same_duration, index_start_diff;\n            for (let i=0; i < notes_old.length; i++) {\n                same_start = (notes_old[i].model.note.beat_start === notes_new[i].model.note.beat_start);\n                same_duration = (notes_old[i].model.note.beats_duration === notes_new[i].model.note.beats_duration);\n                if (!(same_start && same_duration)) {\n                    index_start_diff = i;\n                    break;\n                }\n            }\n\n            return index_start_diff;\n        }\n\n        get_diff_index_end(notes_new: TreeModel.Node<n.Note>[], notes_old: TreeModel.Node<n.Note>[]): number {\n            let same_start, same_duration, index_end_diff;\n            for (let i=-1; i > -1 * (notes_new.length + 1); i--) {\n                same_start = (notes_new.slice(i)[0].model.note.beat_start === notes_old.slice(i)[0].model.note.beat_start);\n                same_duration = (notes_new.slice(i)[0].model.note.beats_duration === notes_old.slice(i)[0].model.note.beats_duration);\n                if (!(same_start && same_duration)) {\n                    index_end_diff = i;\n                    break;\n                }\n            }\n\n            // NB: add one in order to use with array slice, unless of course the index is -1, then you'll access the front of the array\n            return index_end_diff;\n        }\n\n        // TODO: complete return signature\n        get_diff_index_notes(notes_parent: TreeModel.Node<n.Note>[], notes_child: TreeModel.Node<n.Note>[]): number[] {\n            // let same_start, same_duration, notes_parent_diff, notes_child_diff, index_start_diff, index_end_diff;\n            //\n            // for (let i=0; i < notes_child.length; i++) {\n            //     same_start = (notes_child[i].model.note.beat_start === notes_parent[i].model.note.beat_start);\n            //     same_duration = (notes_child[i].model.note.beats_duration === notes_parent[i].model.note.beats_duration);\n            //     if (!(same_start && same_duration)) {\n            //         index_start_diff = i;\n            //         break;\n            //     }\n            // }\n            //\n            // for (let i=-1; i > -1 * (notes_child.length + 1); i--) {\n            //     same_start = (notes_child.slice(i)[0].model.note.beat_start === notes_parent.slice(i)[0].model.note.beat_start);\n            //     same_duration = (notes_child.slice(i)[0].model.note.beats_duration === notes_parent.slice(i)[0].model.note.beats_duration);\n            //     if (!(same_start && same_duration)) {\n            //         index_end_diff = i;\n            //         break;\n            //     }\n            // }\n\n\n            return [\n                this.get_diff_index_start(notes_child, notes_parent),\n                this.get_diff_index_end(notes_child, notes_parent)\n            ];\n        };\n\n        // TODO: finish if necessary\n        // get_diff_notes(index_start_diff: number, index_end_diff: number) {\n        //     // notes_parent_diff = notes_parent.slice(index_start_diff, notes_parent.length + 1 - index_end_diff);\n        //     // notes_child_diff = notes_child.slice(index_start_diff, notes_child.length + 1 - index_end_diff);\n        //\n        //     if (index_end_diff === -1) {\n        //         // peculiarity of slice API\n        //         notes_parent_diff = notes_parent.slice(index_start_diff, index_end_diff);\n        //         notes_child_diff = notes_child.slice(index_start_diff, index_end_diff);\n        //         notes_parent_diff.push(notes_parent[notes_parent.length - 1]);\n        //         notes_child_diff.push(notes_child[notes_child.length - 1]);\n        //     } else {\n        //         notes_parent_diff = notes_parent.slice(index_start_diff, index_end_diff + 1);\n        //         notes_child_diff = notes_child.slice(index_start_diff, index_end_diff + 1);\n        //     }\n        //\n        //\n        //     // TODO: write signature\n        //     return {\n        //         'parent': notes_parent_diff,\n        //         'child': notes_child_diff\n        //     }\n        // }\n\n\n        render_tree(): void {\n            var messages = this.get_messages_render_tree();\n            for (var i=0; i < messages.length; i++) {\n                this.messenger.message(\n                    messages[i]\n                )\n            }\n        };\n\n        // TODO: how do we render when there is no singular root (i.e. parsing, not sampling, sentence)?\n        get_messages_render_tree() {\n            var messages = [];\n\n            this.root_parse_tree.walk((node)=>{\n                if (node.hasChildren()) {\n                    for (let child of node.children) {\n                        messages.push([\n                            \"linesegment\",\n                            this.get_centroid(child)[0],\n                            this.get_centroid(child)[1],\n                            this.get_centroid(node)[0],\n                            this.get_centroid(node)[1]\n                        ])\n                    }\n                }\n\n                return true;\n            });\n\n            // isRoot(): boolean;\n            // hasChildren(): boolean;\n            // addChild(child: Node<T>): Node<T>;\n            // addChildAtIndex(child: Node<T>, index: number): Node<T>;\n            // setIndex(index: number): Node<T>;\n            // getPath(): Array<Node<T>>;\n            // getIndex(): number;\n            //\n            // walk(options: Options, fn: NodeVisitorFunction<T>, ctx?: object): void;\n            // walk(fn: NodeVisitorFunction<T>, ctx?: object): void;\n            //\n            // all(options: Options, fn: NodeVisitorFunction<T>, ctx?: object): Array<Node<T>>;\n            // all(fn: NodeVisitorFunction<T>, ctx?: object): Array<Node<T>>;\n            //\n            // first(options: Options, fn: NodeVisitorFunction<T>, ctx?: object): Node<T> | undefined;\n            // first(fn: NodeVisitorFunction<T>, ctx?: object): Node<T> | undefined;\n            //\n            // drop(): Node<T>;\n\n            // this.parse_tree.traverseDown(iterator.bind(this));\n\n            return messages;\n        };\n\n        // NB: only works top down currently\n        // private add_layer(notes_parent: TreeModel.Node<n.Note>[], notes_child: TreeModel.Node<n.Note>[]): TreeModel.Node<n.Note>[] {\n        private add_layer(notes_parent: TreeModel.Node<n.Note>[], notes_child: TreeModel.Node<n.Note>[]): void {\n\n            // // TODO: fix this, we're assuming the first clip has only the root note for now\n            // if (notes_parents === null) {\n            //     this.parse_tree = new tr.Tree(null, notes_parents[0]);\n            //     return notes_parents;\n            // }\n\n            var note_parent_best, b_successful;\n\n            // var num_successes = 0;\n\n            for (let node of notes_child) {\n                note_parent_best = node.model.note.get_best_candidate(notes_parent);\n                b_successful = node.model.note.choose();\n                if (b_successful) {\n                    note_parent_best.addChild(node);\n                    // num_successes += 1;\n                }\n            }\n\n            // TODO: set list of current leaves by splicing\n\n            // var b_layer_successful = (num_successes === notes_child.length);\n\n            // // TODO: don't set leaves as the diff\n            // if (b_layer_successful) {\n            //     return notes_child // new leaves\n            // } else {\n            //     throw 'adding layer unsuccessful'\n            // }\n        };\n\n        private update_leaves(leaves: TreeModel.Node<n.Note>[]) {\n            // find leaves in elaboration beat interval\n\n            // splice them with their children\n            let leaves_spliced = this.leaves;\n            let children_to_insert, i_leaf_to_splice;\n            for (let leaf of leaves) {\n                // find index of leaf to \"splice\"\n                // always splice only one leaf\n                // find corresponding leaf in leaves_spliced\n                children_to_insert = [];\n                if (leaf.hasChildren()) {\n                    i_leaf_to_splice = leaves_spliced.findIndex((leaf_to_splice)=>{\n                        // assuming monophony, i.e., no overlap\n                        return leaf_to_splice.model.note.beat_start === leaf.model.note.beat_start\n                    });\n                    for (let child of leaf.children) {\n                        children_to_insert.push(child);\n                    }\n                    leaves_spliced.splice(\n                        i_leaf_to_splice,\n                        1,\n                        ...children_to_insert\n                    )\n                }\n            }\n\n            this.leaves = leaves_spliced;\n        }\n\n        render_clips(): void {\n            var messages = this.get_messages_render_clips();\n            for (var i=0; i < messages.length; i++) {\n                this.messenger.message(\n                    messages[i]\n                )\n            }\n        };\n\n        // TODO: return signature\n        get_messages_render_clips()  {\n            var messages = [];\n            for (let index_clip in this.clips) {\n                messages = messages.concat(this.get_messages_render_notes(Number(index_clip)))\n            }\n            return messages;\n        };\n\n        get_messages_render_notes(index_clip: number) {\n            var clip = this.clips[index_clip];\n            let quadruplets = [];\n            for (let node of clip.get_notes()) {\n                quadruplets.push(this.get_position_quadruplet(node, index_clip));\n            }\n            return quadruplets.map(function (tuplet) {\n                return [\"paintrect\"].concat(tuplet)\n            })\n        };\n\n        get_position_quadruplet(node: TreeModel.Node<n.Note>, index_clip: number) {\n            var dist_from_left_beat_start, dist_from_top_note_top, dist_from_left_beat_end, dist_from_top_note_bottom;\n\n            dist_from_left_beat_start = this.get_dist_from_left(node.model.note.beat_start);\n            dist_from_left_beat_end = this.get_dist_from_left(node.model.note.beat_start + node.model.note.beats_duration);\n            dist_from_top_note_top = this.get_dist_from_top(node.model.note.pitch, index_clip);\n            dist_from_top_note_bottom = this.get_dist_from_top(node.model.note.pitch - 1, index_clip);\n\n            return [dist_from_left_beat_start, dist_from_top_note_top, dist_from_left_beat_end, dist_from_top_note_bottom]\n        };\n\n        get_dist_from_top(pitch: number, index_clip: number): number {\n            var clip = this.clips[index_clip];\n            let offset = index_clip;\n            // TODO: make this configurable\n            if (false) {\n                offset = this.clips.length - 1 - index_clip;\n            }\n            var dist = (clip.get_pitch_max() - pitch) * this.get_height_note(index_clip);\n            return dist + (this.get_height_clip() * offset);\n\n        };\n\n        beat_to_pixel = function (beat: number): number {\n            var num_pixels_in_clip = this.width;\n            var num_beats_in_clip = this.get_num_measures_clip() * this.beats_per_measure;\n            return beat * (num_pixels_in_clip / num_beats_in_clip);\n        };\n\n        get_dist_from_left(beat: number): number {\n            return this.beat_to_pixel(beat);\n        };\n\n        get_height_clip(): number {\n            return this.height / this.clips.length;\n        };\n\n        get_height_note(index_clip: number): number {\n            var ambitus = this.get_ambitus(index_clip);\n            var dist_pitch = ambitus[1] - ambitus[0] + 1;\n            return this.get_height_clip() / dist_pitch;\n        };\n\n        get_ambitus(index_clip: number): number[] {\n            return this.clips[index_clip].get_ambitus();\n        };\n    }\n}"]}