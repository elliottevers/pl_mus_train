{"version":3,"file":"window.js","sourceRoot":"","sources":["window.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAQA,0CAAuC;AAEvC,IAAI,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAE5C,IAAiB,MAAM,CA8FtB;AA9FD,WAAiB,MAAM;IASnB,IAAM,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACxB,IAAM,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAExB,yBAAyB;IACzB,2CAA2C;IAC3C,IAAI;IAEJ;QAaI;QACA,CAAC;QAGM,sBAAK,GAAZ,UAAa,SAAS;YAClB,IAAI,SAAS,GAAG,CAAC,OAAO,CAAC,CAAC;YAC1B,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC5B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACtC,CAAC;QAEM,oBAAG,GAAV,UAAW,KAA+B;QAE1C,CAAC;QAWL,aAAC;IAAD,CAAC,AApCD,IAoCC;IAMD;QAAgC,8BAAM;QAClC;YAAA,YACI,iBAAO,SAEV;YADG,KAAI,CAAC,MAAM,GAAG,IAAI,eAAM,CAAC,UAAU,EAAE,CAAC;;QAC1C,CAAC;QAEM,mCAAc,GAArB,UAAsB,YAAyB;QAE/C,CAAC;QAEM,iCAAY,GAAnB,UAAoB,YAAyB;QAE7C,CAAC;QAEL,iBAAC;IAAD,CAAC,AAdD,CAAgC,MAAM,GAcrC;IAdY,iBAAU,aActB,CAAA;IAED;QAAgC,8BAAM;QAClC;YAAA,YACI,iBAAO,SAEV;YADG,KAAI,CAAC,MAAM,GAAG,IAAI,eAAM,CAAC,UAAU,EAAE,CAAC;;QAC1C,CAAC;QAEM,mCAAc,GAArB,UAAsB,cAA6B;QAEnD,CAAC;QAEM,iCAAY,GAAnB,UAAoB,cAA6B;QAEjD,CAAC;QAEM,iCAAY,GAAnB,UAAoB,gBAA6B;QAEjD,CAAC;QAGL,iBAAC;IAAD,CAAC,AAnBD,CAAgC,MAAM,GAmBrC;IAnBY,iBAAU,aAmBtB,CAAA;AACL,CAAC,EA9FgB,MAAM,GAAN,cAAM,KAAN,cAAM,QA8FtB","sourcesContent":["import TreeModel = require(\"tree-model\");\nimport {message as m} from \"../message/messenger\"\nimport {clip as c} from \"../clip/clip\";\nimport {note as n} from \"../note/note\";\nimport {live} from \"../live/live\";\nimport * as _ from \"lodash\";\nimport {log} from \"../log/logger\";\nimport {history} from \"../history/history\";\nimport {struct} from \"../train/struct\";\nimport {parse} from \"../parse/parse\";\nlet CircularJSON = require('circular-json');\n\nexport namespace window {\n\n    import LiveClipVirtual = live.LiveClipVirtual;\n    import Logger = log.Logger;\n    import HistoryUserInput = history.HisstoryUserInput;\n    import HistoryList = history.HistoryList;\n    import HistoryMatrix = history.HistoryMatrix;\n    import ParseTree = parse.ParseTree;\n\n    const red = [255, 0, 0];\n    const black = [0, 0, 0];\n\n    // interface Renderable {\n    //     add(notes: TreeModel.Node<n.Note>[])\n    // }\n\n    abstract class Window {\n        // height: number;\n        // width: number;\n        // messenger: m.Messenger;\n        // clips: c.Clip[];\n        // beats_per_measure: number;\n        // root_parse_tree: TreeModel.Node<n.Note>;\n        // leaves: TreeModel.Node<n.Note>[];\n        // logger: Logger;\n        // history_user_input: HistoryUserInput;\n\n        struct;\n\n        protected constructor() {\n        }\n\n\n        public clear(messenger) {\n            let msg_clear = [\"clear\"];\n            msg_clear.unshift('render');\n            this.messenger.message(msg_clear);\n        }\n\n        public add(notes: TreeModel.Node<n.Note>[]) {\n\n        }\n\n        // public insert(notes: TreeModel.Node<n.Note>[]) {\n        //     this.history_user_input.add(notes)\n        //\n        // }\n\n        // public render() {\n        //\n        // }\n\n    }\n\n    interface Renderable {\n\n    }\n\n    export class ListWindow extends Window {\n        constructor() {\n            super();\n            this.struct = new struct.StructList();\n        }\n\n        public render_regions(history_list: HistoryList) {\n\n        }\n\n        public render_notes(history_list: HistoryList) {\n\n        }\n\n    }\n\n    export class TreeWindow extends Window {\n        constructor() {\n            super();\n            this.struct = new struct.StructList();\n        }\n\n        public render_regions(history_matrix: HistoryMatrix) {\n\n        }\n\n        public render_notes(history_matrix: HistoryMatrix) {\n\n        }\n\n        public render_trees(list_parse_trees: ParseTree[]) {\n\n        }\n\n\n    }\n}"]}