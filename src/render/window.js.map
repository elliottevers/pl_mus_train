{"version":3,"file":"window.js","sourceRoot":"","sources":["window.ts"],"names":[],"mappings":"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","sourcesContent":["import TreeModel = require(\"tree-model\");\nimport {message as m} from \"../message/messenger\"\nimport {clip as c} from \"../clip/clip\";\nimport {note as n} from \"../note/note\";\n\nexport namespace window {\n    export class Pwindow {\n        height: number;\n        width: number;\n        messenger: m.Messenger;\n        clips: c.Clip[];\n        beats_per_measure: number;\n        parse_tree: TreeModel;\n        list_leaves_current: TreeModel.Node<Node>[];\n\n        constructor(height: number, width: number, messenger: m.Messenger) {\n            this.height = height;\n            this.width = width;\n            this.messenger = messenger;\n            this.clips = [];\n            // this.grans_per_measure = 24; // sixteenth and sixteenth triplets quantization\n            this.beats_per_measure = 4;\n            this.parse_tree = null;\n            this.list_leaves_current = null;\n            // need to count number of measures in clip\n            // then multiply that by 24 = granule/measure\n            // this is the min size of window in pixels\n            // make the width be an integer multiple of this, for convenience\n        }\n\n        // NB: this makes the assumption that the end marker is at the end of the clip\n        get_num_measures_clip(): number {\n            return this.clips[0].get_num_measures();\n        }\n\n        // TODO: make node have indices to both clip and note\n        get_centroid(node: TreeModel.Node<n.Note>): number[] {\n\n            var dist_from_left_beat_start, dist_from_left_beat_end, dist_from_top_note_top, dist_from_top_note_bottom;\n\n            // var index_clip = node.get_index_clip();\n            // var index_note = node.get_index_note();\n            // var clip = this.clips[index_clip];\n            // clip.load_notes();\n            // var note = clip.get_notes()[index_note];\n\n            var index_clip = node.depth;\n\n            // TODO: determine how to get the index of the clip from just depth of the node\n\n            dist_from_left_beat_start = this.get_dist_from_left(node.data.beat_start);\n            dist_from_left_beat_end = this.get_dist_from_left(node.data.beat_start + node.data.beats_duration);\n            dist_from_top_note_top = this.get_dist_from_top(node.data.pitch, index_clip);\n            dist_from_top_note_bottom = this.get_dist_from_top(node.data.pitch - 1, index_clip);\n\n            return [\n                dist_from_left_beat_end - ((dist_from_left_beat_end - dist_from_left_beat_start) / 2),\n                dist_from_top_note_bottom - ((dist_from_top_note_bottom - dist_from_top_note_top) / 2)\n            ]\n        };\n\n        // TODO: add capability to automatically determine parent/children relationships between adjacent tracks\n        add_clip(clip: c.Clip): void {\n            this.clips.push(clip);\n            if (this.clips.length === 1) {\n                // TODO: fix this, we're assuming the first clip has only the root note for now\n                // if (notes_parents === null) {\n                //     this.parse_tree = new tr.Tree(null, notes_parents[0]);\n                //     return notes_parents;\n                // }\n                // this.parse_tree = new tr.Tree(null, clip.get_notes()[0]);\n                this.parse_tree = clip.get_notes()[0];\n                this.list_leaves_current = [this.parse_tree];\n                return\n            }\n            var notes_parent = this.list_leaves_current;\n            var notes_child = clip.get_notes();\n            // l.log(notes_child);\n            var notes_diff = this.get_diff_notes(notes_parent, notes_child);\n            var notes_parent_diff = notes_diff['parent'];\n            var notes_child_diff = notes_diff['child'];\n            this.list_leaves_current = this._add_layer(notes_parent_diff, notes_child_diff);\n        };\n\n        // TODO: complete return signature\n        get_diff_notes(notes_parent: TreeModel.Node<n.Note>[], notes_child: TreeModel.Node<n.Note>[]) {\n            let same_start, same_duration, notes_parent_diff, notes_child_diff, index_start_diff, index_end_diff;\n\n            for (var i=0; i < notes_child.length; i++) {\n                same_start = (notes_child[i].data.beat_start === notes_parent[i].data.beat_start);\n                same_duration = (notes_child[i].data.beats_duration === notes_parent[i].data.beats_duration);\n                if (!(same_start && same_duration)) {\n                    index_start_diff = i;\n                    break;\n                }\n            }\n\n            for (i=-1; i > -1 * (notes_child.length + 1); i--) {\n                same_start = (notes_child.slice(i)[0].data.beat_start === notes_parent.slice(i)[0].data.beat_start);\n                same_duration = (notes_child.slice(i)[0].data.beats_duration === notes_parent.slice(i)[0].data.beats_duration);\n                if (!(same_start && same_duration)) {\n                    index_end_diff = i;\n                    break;\n                }\n            }\n\n            notes_parent_diff = notes_parent.slice(index_start_diff, notes_parent.length + 1 - index_end_diff);\n            notes_child_diff = notes_child.slice(index_start_diff, notes_child.length + 1 - index_end_diff);\n\n            return {\n                'parent': notes_parent_diff,\n                'child': notes_child_diff\n            }\n        };\n\n\n        render_tree(): void {\n            var messages = this.get_messages_render_tree();\n            for (var i=0; i < messages.length; i++) {\n                this.messenger.message(\n                    messages[i]\n                )\n            }\n        };\n\n        // TODO: how do we render when there is no singular root (i.e. parsing, not sampling, sentence)?\n        get_messages_render_tree() {\n            // iterator = ....  callback that sends messages to draw line segments using node.data.start_beat and node.depth\n            // this.tree.traverseDown(iterator)\n\n            var messages = [];\n\n            function iterator (node) {\n                var pixel_coord_centroid_child, pixel_coord_centroid_parent;\n                if (node.parent !== null) {\n                    pixel_coord_centroid_parent = this.get_centroid(node.parent);\n                    pixel_coord_centroid_child = this.get_centroid(node);\n\n                    messages.push([\n                        \"linesegment\",\n                        pixel_coord_centroid_child[0],\n                        pixel_coord_centroid_child[1],\n                        pixel_coord_centroid_parent[0],\n                        pixel_coord_centroid_parent[1]\n                    ])\n                }\n\n            }\n\n            // this.parse_tree.traverseDown(iterator.bind(this));\n\n            return messages;\n        };\n\n        // NB: only works top down currently\n        private add_layer(notes_parent: TreeModel.Node<n.Note>[], notes_child: TreeModel.Node<n.Note>[]): TreeModel.Node<n.Note>[] {\n\n            // // TODO: fix this, we're assuming the first clip has only the root note for now\n            // if (notes_parents === null) {\n            //     this.parse_tree = new tr.Tree(null, notes_parents[0]);\n            //     return notes_parents;\n            // }\n\n            var note_parent_best, b_successful, note_child;\n\n            var num_successes = 0;\n\n            for (var i = 0; i < notes_child.length; i++) {\n                note_child = notes_child[i];\n                note_parent_best = note_child.data.get_best_candidate(notes_parent);\n                b_successful = note_child.data.choose();\n                if (b_successful) {\n                    note_parent_best.appendChild(note_child);\n                    num_successes += 1;\n                }\n            }\n\n            var b_layer_successful = (num_successes === notes_child.length);\n\n            if (b_layer_successful) {\n                return notes_child // new leaves\n            } else {\n                throw 'adding layer unsuccessful'\n            }\n        };\n\n        render_clips(): void {\n            var messages = this.get_messages_render_clips();\n            for (var i=0; i < messages.length; i++) {\n                this.messenger.message(\n                    messages[i]\n                )\n            }\n        };\n\n        // TODO: return signature\n        get_messages_render_clips()  {\n            var messages = [];\n            for (var j = 0; j < this.clips.length; j++) {\n                messages = messages.concat(this.get_messages_render_notes(j))\n            }\n            return messages;\n        };\n\n        get_messages_render_notes(index_clip: number) {\n            var clip = this.clips[index_clip];\n            var i, notes, quadruplets;\n            quadruplets = [];\n            notes = clip.get_notes();\n            for (i = 0; i < notes.length; i++) {\n                quadruplets.push(this.get_position_quadruplet(notes[i], index_clip));\n            }\n            return quadruplets.map(function (tuplet) {\n                return [\"paintrect\"].concat(tuplet)\n            })\n        };\n\n        get_position_quadruplet(note: n.Note, index_clip: number) {\n            var dist_from_left_beat_start, dist_from_top_note_top, dist_from_left_beat_end, dist_from_top_note_bottom;\n\n            dist_from_left_beat_start = this.get_dist_from_left(note.data.beat_start);\n            dist_from_left_beat_end = this.get_dist_from_left(note.data.beat_start + note.data.beats_duration);\n            dist_from_top_note_top = this.get_dist_from_top(note.data.pitch, index_clip);\n            dist_from_top_note_bottom = this.get_dist_from_top(note.data.pitch - 1, index_clip);\n\n            return [dist_from_left_beat_start, dist_from_top_note_top, dist_from_left_beat_end, dist_from_top_note_bottom]\n        };\n\n        get_dist_from_top(pitch: number, index_clip: number): number {\n            var clip = this.clips[index_clip];\n            var dist = (clip.get_pitch_max() - pitch) * this.get_height_note(index_clip);\n            return dist + (this.get_height_clip() * index_clip);\n\n        };\n\n        beat_to_pixel = function (beat: number): number {\n            var num_pixels_in_clip = this.width;\n            var num_beats_in_clip = this.get_num_measures_clip() * this.beats_per_measure;\n            return beat * (num_pixels_in_clip / num_beats_in_clip);\n        };\n\n        get_dist_from_left(beat: number): number {\n            return this.beat_to_pixel(beat);\n        };\n\n        get_height_clip(): number {\n            return this.height / this.clips.length;\n        };\n\n        get_height_note(index_clip: number): number {\n            var ambitus = this.get_ambitus(index_clip);\n            var dist_pitch = ambitus[1] - ambitus[0] + 1;\n            return this.get_height_clip() / dist_pitch;\n        };\n\n        get_ambitus(index_clip: number): number[] {\n            return this.clips[index_clip].get_ambitus();\n        };\n    }\n}\n\nfunction test() {\n\n    function assert(statement) {\n        if (!eval(statement)) {\n            throw statement\n        }\n    }\n\n    // NB: assume latter is desired value\n    function assert_equals(outcome, expectation) {\n        var statement = 'JSON.stringify(' + outcome + ') === JSON.stringify(' + expectation + ')';\n        if (!eval(statement)) {\n            // throw statement\n            l.log('FAILED: ' + outcome + ' === ' + expectation);\n            l.log('expected ' + expectation + ' got ' + eval(outcome));\n        } else {\n            l.log('PASSED: '  + outcome + ' === ' + expectation)\n        }\n    }\n\n    // TODO: stub the quarter note ascending major scale line\n    // TODO: figure out how to run entire test suite automatically\n\n    var index_track_test = 12;\n    var index_clip_slot_test = 0;\n    var deferlow = false;\n\n    var clip = new c.Clip(index_track_test, index_clip_slot_test, 0, deferlow);\n\n    clip.load_notes();\n\n    var test = 16 * 6 * 4;\n    var pwindow = new Pwindow(test, test);\n\n    pwindow.add_clip(clip);\n\n    pwindow.render_clips();\n\n    var notes = clip.get_notes();\n\n    assert_equals(\n        'pwindow.get_height_note(0)',\n        '64'\n    );\n\n    assert_equals(\n        'pwindow.get_position_quadruplet(notes[0], 0)', '[0, 320, 96, 384]'\n    );\n\n    assert_equals(\n        'pwindow.get_position_quadruplet(notes[1], 0)', '[96, 192, 192, 256]'\n    );\n\n    assert_equals(\n        'pwindow.get_position_quadruplet(notes[2], 0)', '[192, 64, 288, 128]'\n    );\n\n    assert_equals(\n        'pwindow.get_position_quadruplet(notes[3], 0)', '[288, 0, 384, 64]'\n    );\n}\n\nvar index_track_1 = 12; // bottom\nvar index_track_2 = 13;\nvar index_track_3 = 14;\nvar index_track_4 = 15; // top\n\nvar index_clip_slot_universal = 0;\n\nfunction test_2() {\n\n    function assert(statement) {\n        if (!eval(statement)) {\n            throw statement\n        }\n    }\n\n    // NB: assume latter is desired value\n    function assert_equals(outcome, expectation) {\n        var statement = 'JSON.stringify(' + outcome + ') === JSON.stringify(' + expectation + ')';\n        if (!eval(statement)) {\n            // throw statement\n            l.log('FAILED: ' + outcome + ' === ' + expectation);\n            l.log('expected ' + expectation + ' got ' + eval(outcome));\n        } else {\n            l.log('PASSED: '  + outcome + ' === ' + expectation)\n        }\n    }\n\n    // var path_clip_1 = \"live_set tracks \" + index_track_1 + \" clip_slots 0 clip\";\n    // var path_clip_2 = \"live_set tracks \" + index_track_2 + \" clip_slots 0 clip\";\n    // var path_clip_3 = \"live_set tracks \" + index_track_3 + \" clip_slots 0 clip\";\n    // var path_clip_4 = \"live_set tracks \" + index_track_4 + \" clip_slots 0 clip\";\n\n    var deferlow = false;\n\n    var int_outlet = 0;\n\n    var messenger = m.Messenger('max', int_outlet);\n\n    var clip_1 = new c.Clip(cd.ClipDao(index_track_1, index_clip_slot_universal, messenger, deferlow));\n    var clip_2 = new c.Clip(cd.ClipDao(index_track_2, index_clip_slot_universal, messenger, deferlow));\n    var clip_3 = new c.Clip(cd.ClipDao(index_track_3, index_clip_slot_universal, messenger, deferlow));\n    var clip_4 = new c.Clip(cd.ClipDao(index_track_4, index_clip_slot_universal, messenger, deferlow));\n\n    clip_1.load_notes();\n    clip_2.load_notes();\n    clip_3.load_notes();\n    clip_4.load_notes();\n\n    // 16 beats\n    // 24 grans\n    // 6 grans per beat\n    var test = 16 * 6 * 4;\n    var pwindow = new Pwindow(test, test);\n\n    pwindow.add_clip(clip_1);\n    pwindow.add_clip(clip_2);\n    pwindow.add_clip(clip_3);\n    pwindow.add_clip(clip_4);\n\n    pwindow.render_clips();\n    pwindow.render_tree();\n}"]}