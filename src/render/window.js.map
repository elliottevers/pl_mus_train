{"version":3,"file":"window.js","sourceRoot":"","sources":["window.ts"],"names":[],"mappings":"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","sourcesContent":["import TreeModel = require(\"tree-model\");\nimport {message, message as m} from \"../message/messenger\"\nimport {clip, clip as c} from \"../clip/clip\";\nimport {note as n} from \"../note/note\";\nimport {live} from \"../live/live\";\nimport * as _ from \"lodash\";\nimport {log} from \"../log/logger\";\nimport {history} from \"../history/history\";\n// import {struct} from \"../train/struct\";\n// import {parse} from \"../parse/parse\";\nimport {trainer} from \"../train/trainer\";\nimport {parse} from \"../parse/parse\";\nimport {segment} from \"../segment/segment\";\n\nexport namespace window {\n\n    import LiveClipVirtual = live.LiveClipVirtual;\n    import Logger = log.Logger;\n    import HistoryUserInput = history.HistoryUserInput;\n    // import ParseTree = parse.ParseTree;\n    import Messenger = message.Messenger;\n    import TargetHistory = history.TargetHistory;\n    import MatrixIterator = trainer.MatrixIterator;\n    import ParseTree = parse.ParseTree;\n    import Segment = segment.Segment;\n    import Clip = clip.Clip;\n\n    const red = [255, 0, 0];\n    const black = [0, 0, 0];\n    const region_yellow = [254, 254, 10];\n    const region_green = [33, 354, 6];\n    const region_red = [251, 1, 6];\n\n    interface Temporal {\n        get_message_render_region_past(interval_current);\n        get_message_render_region_present(interval_current);\n        get_message_render_region_future(interval_current);\n    }\n\n    export abstract class Window {\n        // height: number;\n        // width: number;\n        // messenger: m.Messenger;\n        // clips: c.Clip[];\n        // beats_per_measure: number;\n        // root_parse_tree: TreeModel.Node<n.Note>;\n        // leaves: TreeModel.Node<n.Note>[];\n        // logger: Logger;\n        // history_user_input: HistoryUserInput;\n\n        matrix_clips: Clip[][];\n        height: number;\n        width: number;\n        messenger: Messenger;\n        length_beats: number;\n\n        protected constructor(height, width, messenger) {\n            this.height = height;\n            this.width = width;\n            this.messenger = messenger;\n        }\n\n        public clear() {\n            let msg_clear = [\"clear\"];\n            // msg_clear.unshift('render');\n            this.messenger.message(msg_clear);\n        }\n\n        public set_matrix(matrix) {\n            this.matrix_clips = matrix;\n        }\n\n        public set_length_beats(beats) {\n            this.length_beats = beats;\n        }\n\n        public add(notes: TreeModel.Node<n.Note>[], coord_matrix_clip: number[], segment: Segment) {\n            let clip_dao_virtual = new LiveClipVirtual(notes);\n\n            clip_dao_virtual.beat_start = segment.beat_start;\n\n            clip_dao_virtual.beat_end = segment.beat_end;\n\n            let clip_virtual = new c.Clip(clip_dao_virtual);\n\n            this.matrix_clips[coord_matrix_clip[0]][coord_matrix_clip[1]] = clip_virtual;\n        }\n\n        get_messages_render_clip(coord_clip: number[]) {\n            let clip_virtual = this.matrix_clips[coord_clip[0]][coord_clip[1]];\n            let quadruplets = [];\n            for (let node of clip_virtual.get_notes_within_loop_brackets()) {\n                quadruplets.push(this.get_position_quadruplet(node, coord_clip));\n            }\n            return quadruplets.map(function (tuplet) {\n                let message = <any>[\"paintrect\"].concat(tuplet);\n                message = message.concat(black);\n                return message;\n            })\n        };\n\n        get_position_quadruplet(node: TreeModel.Node<n.Note>, coord_clip: number[]) {\n            var dist_from_left_beat_start, dist_from_top_note_top, dist_from_left_beat_end, dist_from_top_note_bottom;\n\n            dist_from_left_beat_start = this.get_dist_from_left(node.model.note.beat_start);\n            dist_from_left_beat_end = this.get_dist_from_left(node.model.note.beat_start + node.model.note.beats_duration);\n            dist_from_top_note_top = this.get_dist_from_top(node.model.note.pitch, coord_clip);\n            dist_from_top_note_bottom = this.get_dist_from_top(node.model.note.pitch - 1, coord_clip);\n\n            return [dist_from_left_beat_start, dist_from_top_note_top, dist_from_left_beat_end, dist_from_top_note_bottom]\n        };\n\n        get_dist_from_top(pitch: number, coord_clip: number[]): number {\n            // var clip = this.clips[index_clip];\n            var clip = this.matrix_clips[coord_clip[0]][coord_clip[1]];\n            // let offset = index_clip;\n            let offset = coord_clip[0];\n            // TODO: make this configurable\n            if (false) {\n                // offset = this.clips.length - 1 - index_clip;\n                // offset = this.matrix_clips.get_num_rows() - 1 - coord_clip[0];\n                offset = this.matrix_clips.length - 1 - coord_clip[0];\n\n            }\n            var dist = (clip.get_pitch_max() - pitch) * this.get_height_note(coord_clip);\n            return dist + (this.get_height_clip() * offset);\n        };\n\n        beat_to_pixel = function (beat: number): number {\n            let num_pixels_width = this.width;\n            // var num_beats_in_clip = this.get_num_measures_clip() * this.beats_per_measure;\n            // let num_beats_window = this.num_measures * this.beats_per_measure;\n            return beat * (num_pixels_width / this.length_beats);\n        };\n\n        get_dist_from_left(beat: number): number {\n            return this.beat_to_pixel(beat);\n        };\n\n        get_offset_pixel_leftmost(): number {\n            return 0;\n        }\n\n        get_offset_pixel_topmost(): number {\n            return 0;\n        }\n\n        get_offset_pixel_rightmost(): number {\n            return this.width;\n        }\n\n        get_offset_pixel_bottommost(): number {\n            return this.height;\n        }\n\n        get_height_clip(): number {\n            return this.height / this.matrix_clips.length;\n        };\n\n        get_height_note(coord_clip: number[]): number {\n            var ambitus = this.get_ambitus(coord_clip);\n            var dist_pitch = ambitus[1] - ambitus[0] + 1;\n            return this.get_height_clip() / dist_pitch;\n        };\n\n        get_ambitus(coord_clips: number[]): number[] {\n            return this.matrix_clips[coord_clips[0]][coord_clips[1]].get_ambitus();\n        };\n    }\n\n    export interface Renderable {\n        render_regions(\n            iterator_matrix_train,\n            matrix_target_iterator\n        )\n\n        render_notes(\n            history_user_input\n        )\n    }\n\n    export interface TreeRenderable extends Renderable {\n\n        render_regions(iterator_matrix_train)\n\n        render_trees(list_parse_tree: ParseTree[])\n    }\n\n    export class ListWindow extends Window implements Temporal {\n        constructor(height, width, messenger) {\n            super(height, width, messenger);\n        }\n\n        public render(iterator_matrix_train, matrix_target_iterator, history_user_input, algorithm) {\n            this.clear();\n            this.render_regions(iterator_matrix_train, matrix_target_iterator, algorithm);\n            this.render_clips(iterator_matrix_train, matrix_target_iterator);\n            return\n        }\n\n        public render_clips(iterator_matrix_train, matrix_target_iterator) {\n            let messages_render_clips = this.get_messages_render_clips(iterator_matrix_train, matrix_target_iterator)\n            for (let messages_notes of messages_render_clips) {\n                for (let message_note of messages_notes) {\n                    this.messenger.message(message_note);\n                }\n            }\n        }\n\n        public get_messages_render_clips(iterator_matrix_train, matrix_target_iterator): any[][] {\n            let messages = [];\n\n            for (let i of _.range(0, iterator_matrix_train.get_state_current())) {\n\n                let coord_clip: number[] = MatrixIterator.get_coord(i, this.matrix_clips[this.matrix_clips.length - 1].length);\n\n                messages.push(\n                    this.get_messages_render_clip(coord_clip)\n                )\n            }\n\n            // messages_clips = this.get_messages_render_clip()\n            return messages\n        }\n\n        // render_clips(): void {\n        //     var messages = this.get_messages_render_clips();\n        //     for (var i=0; i < messages.length; i++) {\n        //         this.messenger.message(\n        //             messages[i]\n        //         )\n        //     }\n        // };\n\n        // TODO: return signature\n        // get_messages_render_clips(history_user_input: HistoryUserInput)  {\n        //     var messages = [];\n        //     // for (let index_clip in this.clips) {\n        //     //     messages = messages.concat(this.get_messages_render_notes(Number(index_clip)))\n        //     // }\n        //     for (let index_clip in this.clips) {\n        //         messages = messages.concat(this.get_messages_render_notes(Number(index_clip)))\n        //     }\n        //     return messages;\n        // };\n\n        // get_messages_render_notes(clip: Clip) {\n        //     let quadruplets = [];\n        //     for (let node of clip.get_notes_within_loop_brackets()) {\n        //         quadruplets.push(this.get_position_quadruplet(node, index_clip));\n        //     }\n        //     return quadruplets.map(function (tuplet) {\n        //         let message = <any>[\"paintrect\"].concat(tuplet);\n        //         message = message.concat(black);\n        //         return message;\n        //     })\n        // };\n\n        public get_message_render_region_past(interval_current) {\n            let offset_left_start, offset_top_start, offset_left_end, offset_top_end;\n\n            offset_left_start = this.get_dist_from_left(this.get_offset_pixel_leftmost());\n            offset_left_end = this.get_dist_from_left(interval_current[0]);\n            offset_top_start = this.get_offset_pixel_topmost();\n            offset_top_end = this.get_offset_pixel_bottommost();\n\n            return [offset_left_start, offset_top_start, offset_left_end, offset_top_end]\n        }\n\n        public get_message_render_region_present(interval_current) {\n            let offset_left_start, offset_top_start, offset_left_end, offset_top_end;\n\n            offset_left_start = this.get_dist_from_left(interval_current[0]);\n            offset_left_end = this.get_dist_from_left(interval_current[1]);\n            offset_top_start = this.get_offset_pixel_topmost();\n            offset_top_end = this.get_offset_pixel_bottommost();\n\n            return [offset_left_start, offset_top_start, offset_left_end, offset_top_end]\n        }\n\n        public get_message_render_region_future(interval_current) {\n            let offset_left_start, offset_top_start, offset_left_end, offset_top_end;\n\n            offset_left_start = this.get_dist_from_left(interval_current[1]);\n            offset_left_end = this.get_dist_from_left(this.get_offset_pixel_rightmost());\n            offset_top_start = this.get_offset_pixel_topmost();\n            offset_top_end = this.get_offset_pixel_bottommost();\n\n            return [offset_left_start, offset_top_start, offset_left_end, offset_top_end]\n        }\n\n        public render_regions(iterator_matrix_train, matrix_target_iterator, algorithm) {\n            let coord = iterator_matrix_train.get_coord_current();\n            let target_iterator = matrix_target_iterator[coord[0]][coord[1]];\n            let subtargets = target_iterator.current().iterator_subtarget.subtargets.map((subtarget) => {\n                return subtarget.note\n            });\n            let interval_current = algorithm.determine_region_present(\n                subtargets\n            );\n\n            let quadruplet_region_past = this.get_message_render_region_past(interval_current);\n            let quadruplet_region_present = this.get_message_render_region_present(interval_current);\n            let quadruplet_region_future = this.get_message_render_region_future(interval_current);\n\n            quadruplet_region_past.unshift('paintrect');\n            quadruplet_region_past = quadruplet_region_past.concat(region_green);\n\n            quadruplet_region_present.unshift('paintrect');\n            quadruplet_region_present = quadruplet_region_present.concat(region_red);\n\n            quadruplet_region_future.unshift('paintrect');\n            quadruplet_region_future = quadruplet_region_future.concat(region_yellow);\n\n            for (let quadruplet of [quadruplet_region_past, quadruplet_region_present, quadruplet_region_future]) {\n                this.messenger.message(quadruplet);\n            }\n        }\n\n        // public get_messages_render_notes(iterator_matrix_train: MatrixIterator, matrix_target_iterator) {\n        //     let coord_clip = iterator_matrix_train.get_coord_current();\n        //     let clip_virtual = this.matrix_clips[coord_clip[0]][coord_clip[1]];\n        //     let quadruplets = [];\n        //     for (let node of clip_virtual.get_notes_within_loop_brackets()) {\n        //         quadruplets.push(this.get_position_quadruplet(node, coord_clip));\n        //     }\n        //     return quadruplets.map(function (tuplet) {\n        //         let message = <any>[\"paintrect\"].concat(tuplet);\n        //         message = message.concat(black);\n        //         return message;\n        //     })\n        // }\n    }\n\n    // class MatrixClip {\n    //     data: LiveClipVirtual[][];\n    //\n    //\n    // }\n\n    export class TreeWindow extends Window {\n\n        // matrix_clips: LiveClipVirtual[][];\n\n        constructor(height, width, messenger) {\n            super(height, width, messenger);\n            // this.struct = new struct.StructList();\n        }\n\n        public static set_parent_child_relationships() {\n\n        }\n\n        // public render(list_parse_tree, matrix_history) {\n        //     this.clear()\n        //\n        // }\n\n        render(list_parse_tree, matrix_history) {\n\n            this.clear();\n\n            let messages_regions = this.render_regions(\n                matrix_history\n            );\n\n            let messages_notes = this.render_notes(\n                matrix_history\n            );\n\n            let messages_tree = this.render_tree(\n\n            );\n\n            // let msg_clear = [\"clear\"];\n            // msg_clear.unshift('render');\n            // this.messenger.message(msg_clear);\n\n            // for (let message of messages_regions) {\n            //     message.unshift('render');\n            //     this.messenger.message(message);\n            // }\n            //\n            // for (let message of messages_notes) {\n            //     message.unshift('render');\n            //     this.messenger.message(message);\n            // }\n            //\n            // for (let message of messages_tree) {\n            //     message.unshift('render');\n            //     this.messenger.message(message);\n            // }\n        }\n\n        public render_regions(iterator_matrix_train: MatrixIterator) {\n            // determine the coordinates of the last null region (assuming we're working forward)\n        }\n\n        public render_notes(history_user_input: HistoryUserInput) {\n            // for all non null clips, render\n        }\n\n        public render_trees(list_parse_trees: ParseTree[]) {\n\n            let color: number[];\n            let messages: any[] = [];\n            let message: any[];\n\n            for (let parse_tree of list_parse_trees) {\n\n                let root = parse_tree.get_root();\n\n                root.walk((node)=>{\n\n                    if (node.hasChildren()) {\n\n                        let coords: number[] = node.model.note.get_coordinates_matrix();\n\n                        for (let child of node.children) {\n\n                            message = [\n                                \"linesegment\",\n                                this.get_centroid(child)[0],\n                                this.get_centroid(child)[1],\n                                this.get_centroid(node)[0],\n                                this.get_centroid(node)[1]\n                            ];\n\n                            color = red;\n\n                            messages.push(message.concat(color));\n\n                        }\n                    }\n\n                    return true;\n                });\n            }\n\n            return messages;\n        }\n\n        // TODO: implement\n        private render_note(note: TreeModel.Node<n.Note>, coord: number[]) {\n\n        }\n\n        // TODO: make node have indices to both clip and note\n        get_centroid(node: TreeModel.Node<n.NoteRenderable>): number[] {\n\n            let dist_from_left_beat_start, dist_from_left_beat_end, dist_from_top_note_top, dist_from_top_note_bottom;\n\n            // let index_clip = node.model.id;\n            let coord_clip = node.model.note.get_coordinates_matrix();\n\n            // TODO: determine how to get the index of the clip from just depth of the node\n\n            dist_from_left_beat_start = this.get_dist_from_left(node.model.note.beat_start);\n            dist_from_left_beat_end = this.get_dist_from_left(node.model.note.beat_start + node.model.note.beats_duration);\n            dist_from_top_note_top = this.get_dist_from_top(node.model.note.pitch, coord_clip);\n            dist_from_top_note_bottom = this.get_dist_from_top(node.model.note.pitch - 1, coord_clip);\n\n            return [\n                dist_from_left_beat_end - ((dist_from_left_beat_end - dist_from_left_beat_start) / 2),\n                dist_from_top_note_bottom - ((dist_from_top_note_bottom - dist_from_top_note_top) / 2)\n            ]\n        };\n\n        // TODO: elaboration won't always\n        get_order_of_note_at_beat_start(notes: TreeModel.Node<n.Note>[], beat_start: number): number {\n            return _.findIndex(notes, (node) => {\n                return node.model.note.beat_start === beat_start\n            });\n        }\n\n        get_order_of_note_at_beat_end(notes: TreeModel.Node<n.Note>[], beat_end: number): number {\n            return _.findIndex(notes, (node) => {\n                return node.model.note.get_beat_end() === beat_end\n            });\n        }\n\n        get_interval_beats(notes: TreeModel.Node<n.Note>[]): number[] {\n            return [\n                notes[0].model.note.beat_start,\n                notes[notes.length - 1].model.note.get_beat_end()\n            ];\n        }\n\n        render_tree(): void {\n            var messages = this.get_messages_render_tree();\n            for (var i=0; i < messages.length; i++) {\n                this.messenger.message(\n                    messages[i]\n                )\n            }\n        };\n\n        get_messages_render_tree() {\n            return []\n        }\n\n        // render_clips(): void {\n        //     var messages = this.get_messages_render_clips();\n        //     for (var i=0; i < messages.length; i++) {\n        //         this.messenger.message(\n        //             messages[i]\n        //         )\n        //     }\n        // };\n\n        // TODO: return signature\n        // get_messages_render_clips(history_user_input: HistoryUserInput)  {\n        //     var messages = [];\n        //     // for (let index_clip in this.clips) {\n        //     //     messages = messages.concat(this.get_messages_render_notes(Number(index_clip)))\n        //     // }\n        //     for (let index_clip in this.clips) {\n        //         messages = messages.concat(this.get_messages_render_notes(Number(index_clip)))\n        //     }\n        //     return messages;\n        // };\n\n        // get_messages_render_notes(index_clip: number) {\n        //     var clip = this.clips[index_clip];\n        //     let quadruplets = [];\n        //     for (let node of clip.get_notes_within_loop_brackets()) {\n        //         quadruplets.push(this.get_position_quadruplet(node, index_clip));\n        //     }\n        //     return quadruplets.map(function (tuplet) {\n        //         let message = <any>[\"paintrect\"].concat(tuplet);\n        //         message = message.concat(black);\n        //         return message;\n        //     })\n        // };\n\n    }\n}"]}