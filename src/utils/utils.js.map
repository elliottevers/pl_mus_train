{"version":3,"file":"utils.js","sourceRoot":"","sources":["utils.ts"],"names":[],"mappings":"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","sourcesContent":["import {live} from \"../live/live\";\nimport {clip} from \"../clip/clip\";\nimport {track} from \"../track/track\";\n\nexport namespace utils {\n\n    import Clip = clip.Clip;\n    import Track = track.Track;\n\n    export let cleanse_path = (path) => {\n        return path.replace('/\"', '')\n    };\n\n    export let get_clip_on_this_device_at_index = (index: number): Clip => {\n        // TODO: implement\n        return\n    };\n\n    export let get_path_this_track = () => {\n        // @ts-ignore\n        import LiveApiJs = live.LiveApiJs;\n\n        let this_device = new LiveApiJs('this_device');\n\n        let path_this_device = this_device.get_path();\n\n        return path_this_device.split(' ').slice(0, 3).join(' ');\n    };\n\n    export let get_this_track = (): Track => {\n        // TODO: use the method above\n        return\n    };\n\n    export class PathLive  {\n\n        // pre-sending message\n        public static to_vector(path_live: string) {\n            let message = [];\n\n            for (let word of path_live.split(' ')) {\n                let cleansed = word.replace(/\"/g, \"\");\n\n                if (isNaN(Number(cleansed))) {\n                    message.push(cleansed)\n                } else {\n                    message.push(Number(cleansed))\n                }\n            }\n\n            return message\n        }\n\n        public static to_message(path_live: string) {\n            return PathLive.to_vector(path_live)\n        }\n\n        // parsing sent message\n        public static to_string(vector_path_live: string[]) {\n            return PathLive.to_message(vector_path_live.join(' ')).join(' ');\n        }\n    }\n\n    export let remainder = (top, bottom) => {\n        return ((top % bottom) + bottom) % bottom\n    };\n\n    export let division_int = (top, bottom) => {\n        return Math.floor(top/bottom)\n    };\n\n    export let path_clip_from_list_path_device = (list_path_device) => {\n        // list_path_device.shift();\n\n        list_path_device[list_path_device.length - 2] = 'clip_slots';\n\n        list_path_device.push('clip');\n\n        let path_clip = list_path_device.join(' ');\n\n        return path_clip;\n    };\n\n    export class Set {\n        _data;\n\n        constructor(items) {\n            this._data = {};\n            this.addItems(items);\n        }\n\n        addItem = function(value) {\n            this._data[value] = true;\n            return this;\n        };\n\n        removeItem = function(value) {\n            delete this._data[value];\n            return this;\n        };\n\n        addItems = function(values) {\n            for (var i = 0; i < values.length; i++) {\n                this.addItem(values[i]);\n            }\n            return this;\n        };\n\n        removeItems = function(values) {\n            for (var i = 0; i < values.length; i++) {\n                this.removeItem(values[i]);\n            }\n            return this;\n        };\n\n        contains = function(value) {\n            return !!this._data[value];\n        };\n\n        reset = function() {\n            this._data = {};\n            return this;\n        };\n\n        data = function() {\n            return Object.keys(this._data);\n        };\n\n        each = function(callback) {\n            var data = this.data();\n            for (var i = 0; i < data.length; i++) {\n                callback(data[i]);\n            }\n        }\n    }\n}\n"]}