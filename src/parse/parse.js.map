{"version":3,"file":"parse.js","sourceRoot":"","sources":["parse.ts"],"names":[],"mappings":"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","sourcesContent":["import {segment} from \"../segment/segment\";\nimport {note} from \"../note/note\";\nimport TreeModel = require(\"tree-model\");\n\nconst _ = require(\"underscore\");\n\n\nexport namespace parse {\n    import SegmentIterator = segment.SegmentIterator;\n\n    export interface Parsable {\n        choose(): boolean;\n\n        // TODO: annotation\n        get_best_candidate(list_candidate_note);\n    }\n\n    export class ParseMatrix {\n\n        data: TreeModel.Node<note.Note>[][][];\n\n        constructor(height: number, width: number) {\n            this.data = [];\n            for(let i=0; i<height; i++) {\n                this.data[i] = new Array(width);\n            }\n        }\n\n        set_notes(i_height, i_width, notes): void {\n            this.data[i_height][i_width] = notes\n        }\n\n        get_notes(i_height, i_width): TreeModel.Node<note.Note>[] {\n            return this.data[i_height][i_width]\n        }\n    }\n\n    export class TreeDepthIterator {\n        public direction_forward: boolean;\n        private i: number;\n        private layers: number[];\n\n        constructor(depth: number, direction_forward: boolean) {\n            this.layers = _.range(depth);\n            this.direction_forward = direction_forward;\n            this.i = -1;\n        }\n\n        // TODO: type declarations\n        public next() {\n            let value_increment = (this.direction_forward) ? 1 : -1;\n\n            this.i += value_increment;\n\n            if (this.i < 0) {\n                throw 'segment iterator < 0'\n            }\n\n            if (this.i < this.layers.length) {\n                return {\n                    value: this.layers[this.i],\n                    done: false\n                }\n            } else {\n                return {\n                    value: null,\n                    done: true\n                }\n            }\n        }\n\n        public current() {\n            if (this.i > -1) {\n                return this.layers[this.i];\n            } else {\n                return null;\n            }\n        }\n\n        public get_index_current() {\n            return this.i\n        }\n    }\n\n    export class ParseTreeIterator {\n        private iterator_segment;\n        private iterator_tree;\n        public segment_current;\n        public layer_current;\n\n        constructor(iterator_segment: SegmentIterator, iterator_tree: TreeDepthIterator) {\n            this.iterator_segment = iterator_segment;\n            this.iterator_tree = iterator_tree\n        }\n\n        // TODO: type declarations\n        public next() {\n\n            // initialize\n            if (this.iterator_tree.get_index_current() == -1) {\n                this.iterator_tree.next()\n            }\n\n            // let layer_current = this.iterator_tree.current();\n\n            let segment_result_next = this.iterator_segment.next();\n\n            let segment_next = segment_result_next.value;\n\n            if (!segment_result_next.done) {\n                this.segment_current = segment_next;\n                return {\n                    value: this.segment_current,\n                    done: false\n                }\n            }\n\n            //\n            // this.iterator_segment.reset();\n\n            let layer_result_next = this.iterator_tree.next();\n\n            // segment_next.done is true by now\n            if (!layer_result_next.done) {\n\n                this.iterator_segment.reset();\n\n                this.layer_current = this.iterator_tree.current();\n\n                segment_result_next = this.iterator_segment.next();\n\n                segment_next = segment_result_next.value;\n\n                this.segment_current = segment_next;\n\n                return {\n                    value: this.segment_current,\n                    done: false\n                }\n            }\n\n            return {\n                value: null,\n                done: true\n            }\n        }\n    }\n}"]}