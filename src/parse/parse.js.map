{"version":3,"file":"parse.js","sourceRoot":"","sources":["parse.ts"],"names":[],"mappings":"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","sourcesContent":["import {segment} from \"../segment/segment\";\nimport {note} from \"../note/note\";\nimport TreeModel = require(\"tree-model\");\nimport {log} from \"../log/logger\";\nimport {utils} from \"../utils/utils\";\n\nconst _ = require(\"underscore\");\n\n\nexport namespace parse {\n    import SegmentIterator = segment.SegmentIterator;\n    import Logger = log.Logger;\n    import remainder = utils.remainder;\n    import division_int = utils.division_int;\n\n    export interface Parsable {\n        choose(): boolean;\n\n        // TODO: annotation\n        get_best_candidate(list_candidate_note);\n    }\n\n    export class ParseTree implements Parsable {\n\n    }\n\n    // export class ParseMatrix {\n    //\n    //     data: TreeModel.Node<note.Note>[][][];\n    //     logger: Logger;\n    //\n    //     constructor(height: number, width: number) {\n    //         this.data = [];\n    //         for(let i=0; i<height; i++) {\n    //             this.data[i] = new Array(width);\n    //         }\n    //         this.logger = new Logger('max')\n    //     }\n    //\n    //     set_notes(i_height, i_width, notes): void {\n    //         this.data[i_height][i_width] = notes\n    //     }\n    //\n    //     get_notes(i_height, i_width): TreeModel.Node<note.Note>[] {\n    //         return this.data[i_height][i_width]\n    //     }\n    //\n    //     private static serialize(notes: TreeModel.Node<note.Note>[]) {\n    //         return notes.map((note) => {\n    //             return JSON.stringify(note.model);\n    //         })\n    //     }\n    //\n    //     private static deserialize(notes_serialized) {\n    //         if (notes_serialized === null) {\n    //             return null\n    //         }\n    //         let tree = new TreeModel();\n    //         return notes_serialized.map((note) => {\n    //             return tree.parse(JSON.parse(note));\n    //         })\n    //     }\n    //\n    //     save(filename) {\n    //         let data_serializable = this.data as any;\n    //         for (let i_row in this.data) {\n    //             for (let i_col in this.data[Number(i_row)]) {\n    //                 data_serializable[Number(i_row)][Number(i_col)] = ParseMatrix.serialize(this.data[Number(i_row)][Number(i_col)])\n    //             }\n    //         }\n    //\n    //         let f = new File(filename,\"write\",\"JSON\");\n    //\n    //         if (f.isopen) {\n    //             post(\"saving session\");\n    //             f.writestring(JSON.stringify(data_serializable)); //writes a string\n    //             f.close();\n    //         } else {\n    //             post(\"could not save session\");\n    //         }\n    //     }\n    //\n    //     public static load(filename) {\n    //         let f = new File(filename, \"read\",\"JSON\");\n    //         let a, data_serialized;\n    //\n    //         if (f.isopen) {\n    //             post(\"reading file\");\n    //             // @ts-ignore\n    //             while ((a = f.readline()) != null) {\n    //                 data_serialized = JSON.parse(a)\n    //             }\n    //             f.close();\n    //         } else {\n    //             post(\"could not open file\");\n    //         }\n    //\n    //         let data_deserialized = data_serialized as any;\n    //\n    //         for (let i_row in data_serialized) {\n    //             for (let i_col in data_serialized[Number(i_row)]) {\n    //                 // post(i_row);\n    //                 // post(i_col);\n    //                 data_deserialized[Number(i_row)][Number(i_col)] = ParseMatrix.deserialize(data_serialized[Number(i_row)][Number(i_col)])\n    //             }\n    //         }\n    //\n    //         return data_deserialized\n    //     }\n    // }\n\n    export class TreeDepthIterator {\n        public direction_forward: boolean;\n        private i: number;\n        private layers: number[];\n\n        constructor(depth: number, direction_forward: boolean) {\n            this.layers = _.range(depth);\n            this.direction_forward = direction_forward;\n            this.i = 0;\n        }\n\n        // TODO: type declarations\n        public next() {\n            let value_increment = (this.direction_forward) ? 1 : -1;\n\n            this.i += value_increment;\n\n            if (this.i < 0) {\n                throw 'segment iterator < 0'\n            }\n\n            if (this.i < this.layers.length) {\n                return {\n                    value: this.layers[this.i],\n                    done: false\n                }\n            } else {\n                return {\n                    value: null,\n                    done: true\n                }\n            }\n        }\n\n        public current() {\n            if (this.i > -1) {\n                return this.layers[this.i];\n            } else {\n                return null;\n            }\n        }\n\n        public get_index_current() {\n            return this.i // TODO: the root is the first index\n        }\n    }\n\n    // export class MatrixIterator {\n    //     private num_rows: number;\n    //     private num_columns: number;\n    //\n    //     private row_current: number;\n    //     private column_current: number;\n    //\n    //     private i;\n    //\n    //     constructor(num_rows: number, num_columns: number) {\n    //         this.num_rows = num_rows;\n    //         this.num_columns = num_columns;\n    //\n    //         this.i = -1;\n    //     }\n    //\n    //     private next_row() {\n    //         this.i = this.i + this.num_columns;\n    //     }\n    //\n    //     private next_column() {\n    //         this.i = this.i + 1;\n    //     }\n    //\n    //     public next() {\n    //\n    //         let value: number[] = null;\n    //\n    //         this.next_column();\n    //\n    //         if (this.i === this.num_columns * this.num_rows + 1) {\n    //             return {\n    //                 value: value,\n    //                 done: true\n    //             }\n    //         }\n    //\n    //         let pos_row = division_int(this.i + 1, this.num_columns);\n    //         let pos_column = remainder(this.i + 1, this.num_columns);\n    //\n    //         value = [pos_row, pos_column];\n    //\n    //         return {\n    //             value: value,\n    //             done: false\n    //         };\n    //     }\n    // }\n\n    export class ParseTreeIterator {\n        private iterator_segment;\n        private iterator_tree;\n        public segment_current;\n        public layer_current;\n\n        constructor(iterator_segment: SegmentIterator, iterator_tree: TreeDepthIterator) {\n            this.iterator_segment = iterator_segment;\n            this.iterator_tree = iterator_tree\n        }\n\n        // TODO: type declarations\n        public next(type_node?:string) {\n\n            if (type_node === 'root') {\n                // initialize\n                this.iterator_tree.next();\n                return\n            }\n\n            // initialize\n            if (this.iterator_tree.get_index_current() == -1) {\n                this.iterator_tree.next()\n            }\n\n            // let layer_current = this.iterator_tree.current();\n\n            let segment_result_next = this.iterator_segment.next();\n\n            let segment_next = segment_result_next.value;\n\n            if (!segment_result_next.done) {\n                this.segment_current = segment_next;\n                return {\n                    value: this.segment_current,\n                    done: false\n                }\n            }\n\n            //\n            // this.iterator_segment.reset();\n\n            let layer_result_next = this.iterator_tree.next();\n\n            // segment_next.done is true by now\n            if (!layer_result_next.done) {\n\n                this.iterator_segment.reset();\n\n                this.layer_current = this.iterator_tree.current();\n\n                segment_result_next = this.iterator_segment.next();\n\n                segment_next = segment_result_next.value;\n\n                this.segment_current = segment_next;\n\n                return {\n                    value: this.segment_current,\n                    done: false\n                }\n            }\n\n            return {\n                value: null,\n                done: true\n            }\n        }\n    }\n}"]}