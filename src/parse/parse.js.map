{"version":3,"file":"parse.js","sourceRoot":"","sources":["parse.ts"],"names":[],"mappings":"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","sourcesContent":["import {segment} from \"../segment/segment\";\nimport {note as n, note} from \"../note/note\";\nimport TreeModel = require(\"tree-model\");\nimport {log} from \"../log/logger\";\nimport {utils} from \"../utils/utils\";\nimport {live} from \"../live/live\";\nimport {clip as c} from \"../clip/clip\";\n\nconst _ = require(\"underscore\");\n\n\nexport namespace parse {\n    import SegmentIterator = segment.SegmentIterator;\n    import Logger = log.Logger;\n    import remainder = utils.remainder;\n    import division_int = utils.division_int;\n    import LiveClipVirtual = live.LiveClipVirtual;\n\n    export interface Parsable {\n        choose(): boolean;\n\n        // TODO: annotation\n        get_best_candidate(list_candidate_note);\n    }\n\n    export class ParseTree implements Parsable {\n        // matrix_clip: LiveClipVirtual[][];\n        //\n        // constructor() {\n        //     this.matrix_clip\n        // }\n\n        root: TreeModel.Node<n.NoteRenderable>;\n\n        constructor(note: TreeModel.Node<n.Note>, coordinates_matrix) {\n            let tree: TreeModel = new TreeModel();\n\n            let splitted = messages[i_mess].split(' ');\n\n            this.root = tree.parse(\n                {\n                    id: -1, // TODO: hashing scheme for clip id and beat start\n                    note: new n.NoteRenderable(\n                        Number(splitted[0]),\n                        Number(splitted[1]),\n                        Number(splitted[2]),\n                        Number(splitted[3]),\n                        Number(splitted[4]),\n                        coordinates_matrix\n                    ),\n                    children: [\n\n                    ]\n                }\n            )\n        }\n\n        // TODO: we actually have to implement\n        public static add(input_user, list_parse_tree, iterator_matrix_train): ParseTree[] {\n            let coord = iterator_matrix_train.get_coord_current()\n            return\n        }\n\n        private static get_diff_index_start(notes_new: TreeModel.Node<n.Note>[], notes_old: TreeModel.Node<n.Note>[]): number {\n            let same_start, same_duration, index_start_diff;\n            for (let i=0; i < notes_old.length; i++) {\n                same_start = (notes_old[i].model.note.beat_start === notes_new[i].model.note.beat_start);\n                same_duration = (notes_old[i].model.note.beats_duration === notes_new[i].model.note.beats_duration);\n                if (!(same_start && same_duration)) {\n                    index_start_diff = i;\n                    break;\n                }\n            }\n\n            return index_start_diff;\n        }\n\n        private static get_diff_index_end(notes_new: TreeModel.Node<n.Note>[], notes_old: TreeModel.Node<n.Note>[]): number {\n            let same_start, same_duration, index_end_diff;\n            for (let i=-1; i > -1 * (notes_new.length + 1); i--) {\n                same_start = (notes_new.slice(i)[0].model.note.beat_start === notes_old.slice(i)[0].model.note.beat_start);\n                same_duration = (notes_new.slice(i)[0].model.note.beats_duration === notes_old.slice(i)[0].model.note.beats_duration);\n                if (!(same_start && same_duration)) {\n                    index_end_diff = i;\n                    break;\n                }\n            }\n\n            // NB: add one in order to use with array slice, unless of course the index is -1, then you'll access the front of the array\n            return index_end_diff;\n        }\n\n        // TODO: complete return method signature\n        get_diff_index_notes(notes_parent: TreeModel.Node<n.Note>[], notes_child: TreeModel.Node<n.Note>[]): number[] {\n            return [\n                ParseTree.get_diff_index_start(notes_child, notes_parent),\n                ParseTree.get_diff_index_end(notes_child, notes_parent)\n            ];\n        };\n\n        public get_root(): TreeModel.Node<n.NoteRenderable> {\n            return\n        }\n\n        private add_first_layer(notes: TreeModel.Node<n.Note>[], index_new_layer: number): void {\n            // var note_parent_best, b_successful;\n\n            for (let node of notes) {\n                node.model.id = index_new_layer;\n                this.root_parse_tree.addChild(node);\n            }\n        }\n\n        // NB: only works top down currently\n        // private add_layer(notes_parent: TreeModel.Node<n.Note>[], notes_child: TreeModel.Node<n.Note>[]): TreeModel.Node<n.Note>[] {\n        private add_layer(notes_parent: TreeModel.Node<n.Note>[], notes_child: TreeModel.Node<n.Note>[], index_new_layer: number): void {\n\n            var note_parent_best, b_successful;\n\n            for (let node of notes_child) {\n                note_parent_best = node.model.note.get_best_candidate(notes_parent);\n                b_successful = node.model.note.choose();\n                if (b_successful) {\n                    node.model.id = index_new_layer;\n                    note_parent_best.addChild(node);\n                }\n            }\n        };\n\n        private update_leaves(leaves: TreeModel.Node<n.Note>[]) {\n            // find leaves in parse/derive beat interval\n\n            // splice them with their children\n            let leaves_spliced = this.leaves;\n            let children_to_insert, i_leaf_to_splice;\n            for (let leaf of leaves) {\n                // find index of leaf to \"splice\"\n                // always splice only one leaf\n                // find corresponding leaf in leaves_spliced\n                children_to_insert = [];\n                if (leaf.hasChildren()) {\n                    i_leaf_to_splice = _.findIndex(leaves_spliced, (leaf_to_splice)=>{\n                        // assuming monophony, i.e., no overlap\n                        return leaf_to_splice.model.note.beat_start === leaf.model.note.beat_start\n                    });\n\n                    let beat_end_children_greatest = -Infinity, beat_start_children_least = Infinity;\n\n                    for (let child of leaf.children) {\n                        if (child.model.note.get_beat_end() > beat_end_children_greatest) {\n                            beat_end_children_greatest = child.model.note.get_beat_end();\n                        }\n                        if (child.model.note.beat_start < beat_start_children_least) {\n                            beat_start_children_least = child.model.note.beat_start;\n                        }\n                        children_to_insert.push(child);\n                    }\n\n                    if (false) {\n                        // if (leaf.model.note.get_beat_end() > beat_end_children_greatest || leaf.model.note.beat_start < beat_start_children_least) {\n                        leaves_spliced.splice(\n                            i_leaf_to_splice,\n                            0,\n                            ...children_to_insert\n                        )\n                    } else {\n                        leaves_spliced.splice(\n                            i_leaf_to_splice,\n                            1,\n                            ...children_to_insert\n                        )\n                    }\n                    // leaves_spliced.splice(\n                    //     i_leaf_to_splice,\n                    //     1,\n                    //     ...children_to_insert\n                    // )\n                }\n            }\n\n            this.leaves = leaves_spliced;\n        }\n\n        public insert(notes: TreeModel.Node<n.Note>[]) {\n            if (this.iterator_tree.get_index_current() == 1) {\n                this.set_root(notes[0])\n            } else {\n                this.grow(\n                    notes,\n                    this.iterator_tree.get_breadth_current();\n                this.iterator_tree.get_depth_current();\n            )\n            }\n        }\n\n        get_notes_leaves(): TreeModel.Node<n.Note>[] {\n            return this.leaves;\n        }\n\n        set_root(note_root: TreeModel.Node<n.Note>) {\n            let clip_dao_virtual = new LiveClipVirtual([note_root]);\n\n            let clip_virtual = new c.Clip(clip_dao_virtual);\n\n            clip_virtual.clip_dao.beat_start = note_root.model.note.beat_start;\n\n            clip_virtual.clip_dao.beat_end = note_root.model.note.get_beat_end();\n\n            this.add_clip(clip_virtual);\n\n            note_root.model.id = 0;  // index of first clip\n\n            this.root_parse_tree = note_root;\n\n            this.leaves = [note_root];\n        }\n\n        // struct\n        elaborate(elaboration: TreeModel.Node<n.Note>[], beat_start: number, beat_end: number, index_layer: number): void {\n\n            if (index_layer + 1 > this.clips.length) {\n                let clip_dao_virtual = new LiveClipVirtual(elaboration);\n\n                clip_dao_virtual.beat_start = elaboration[0].model.note.beat_start;\n                clip_dao_virtual.beat_end = elaboration[elaboration.length - 1].model.note.get_beat_end();\n\n                let clip_virtual = new c.Clip(clip_dao_virtual);\n                this.add_clip(clip_virtual);\n            } else {\n                let clip_last = this.clips[this.clips.length - 1];\n                clip_last.clip_dao.beat_end = elaboration[elaboration.length - 1].model.note.get_beat_end();\n                clip_last.set_notes(elaboration);\n            }\n\n            let leaves_within_interval = this.get_leaves_within_interval(beat_start, beat_end);\n\n            if (index_layer == 1) {\n                this.add_first_layer(elaboration, this.clips.length - 1)\n            } else {\n                this.add_layer(leaves_within_interval, elaboration, this.clips.length - 1);\n            }\n\n            this.update_leaves(leaves_within_interval);\n        }\n\n        // struct\n        splice_notes(notes_subset: TreeModel.Node<n.Note>[], clip: c.Clip, interval_beats: number[]): TreeModel.Node<n.Note>[] {\n            let notes_clip = _.cloneDeep(clip.get_notes_within_loop_brackets());\n            let num_notes_to_replace = this.get_order_of_note_at_beat_end(notes_clip, interval_beats[1]) - this.get_order_of_note_at_beat_start(notes_clip, interval_beats[0]) + 1;\n            let index_start = this.get_note_index_at_beat(interval_beats[0], notes_clip);\n            notes_clip.splice(index_start, num_notes_to_replace, ...notes_subset);\n            return notes_clip\n        }\n\n        // struct\n        get_note_index_at_beat(beat: number, notes: TreeModel.Node<n.Note>[]): number {\n            let val =  _.findIndex(notes, (node)=>{\n                return node.model.note.beat_start === beat\n            });\n            return val;\n        }\n\n        // struct\n        get_leaves_within_interval(beat_start: number, beat_end: number): TreeModel.Node<n.Note>[] {\n            let val =  this.leaves.filter((node) =>{\n                // return node.model.note.beat_start >= beat_start && node.model.note.get_beat_end() <= beat_end\n                return (node.model.note.beat_start >= beat_start && node.model.note.beat_start <= beat_end) ||\n                    (node.model.note.get_beat_end() <= beat_end && node.model.note.get_beat_end() >= beat_start) ||\n                    (node.model.note.get_beat_end() >= beat_end && node.model.note.beat_start <= beat_start)\n\n            });\n            // this.logger.log(CircularJSON.stringify(this.leaves));\n            return val;\n        }\n\n    }\n\n    // export class ParseTreeIterator {\n    //     private iterator_segment;\n    //     private iterator_tree;\n    //     public segment_current;\n    //     public layer_current;\n    //\n    //     constructor(iterator_segment: SegmentIterator, iterator_tree: TreeDepthIterator) {\n    //         this.iterator_segment = iterator_segment;\n    //         this.iterator_tree = iterator_tree\n    //     }\n    //\n    //     // TODO: type declarations\n    //     public next(type_node?:string) {\n    //\n    //         if (type_node === 'root') {\n    //             // initialize\n    //             this.iterator_tree.next();\n    //             return\n    //         }\n    //\n    //         // initialize\n    //         if (this.iterator_tree.get_index_current() == -1) {\n    //             this.iterator_tree.next()\n    //         }\n    //\n    //         // let layer_current = this.iterator_tree.current();\n    //\n    //         let segment_result_next = this.iterator_segment.next();\n    //\n    //         let segment_next = segment_result_next.value;\n    //\n    //         if (!segment_result_next.done) {\n    //             this.segment_current = segment_next;\n    //             return {\n    //                 value: this.segment_current,\n    //                 done: false\n    //             }\n    //         }\n    //\n    //         //\n    //         // this.iterator_segment.reset();\n    //\n    //         let layer_result_next = this.iterator_tree.next();\n    //\n    //         // segment_next.done is true by now\n    //         if (!layer_result_next.done) {\n    //\n    //             this.iterator_segment.reset();\n    //\n    //             this.layer_current = this.iterator_tree.current();\n    //\n    //             segment_result_next = this.iterator_segment.next();\n    //\n    //             segment_next = segment_result_next.value;\n    //\n    //             this.segment_current = segment_next;\n    //\n    //             return {\n    //                 value: this.segment_current,\n    //                 done: false\n    //             }\n    //         }\n    //\n    //         return {\n    //             value: null,\n    //             done: true\n    //         }\n    //     }\n    // }\n}"]}