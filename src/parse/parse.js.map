{"version":3,"file":"parse.js","sourceRoot":"","sources":["parse.ts"],"names":[],"mappings":"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","sourcesContent":["import {segment} from \"../segment/segment\";\nimport {note} from \"../note/note\";\nimport TreeModel = require(\"tree-model\");\nimport {log} from \"../log/logger\";\n\nconst _ = require(\"underscore\");\n\n\nexport namespace parse {\n    import SegmentIterator = segment.SegmentIterator;\n    import Logger = log.Logger;\n\n    export interface Parsable {\n        choose(): boolean;\n\n        // TODO: annotation\n        get_best_candidate(list_candidate_note);\n    }\n\n    export class ParseMatrix {\n\n        data: TreeModel.Node<note.Note>[][][];\n        logger: Logger;\n\n        constructor(height: number, width: number) {\n            this.data = [];\n            for(let i=0; i<height; i++) {\n                this.data[i] = new Array(width);\n            }\n            this.logger = new Logger('max')\n        }\n\n        set_notes(i_height, i_width, notes): void {\n            this.data[i_height][i_width] = notes\n        }\n\n        get_notes(i_height, i_width): TreeModel.Node<note.Note>[] {\n            return this.data[i_height][i_width]\n        }\n\n        private static serialize(notes: TreeModel.Node<note.Note>[]) {\n            return notes.map((note) => {\n                return JSON.stringify(note.model);\n            })\n        }\n\n        private static deserialize(notes_serialized) {\n            if (notes_serialized === null) {\n                return null\n            }\n            let tree = new TreeModel();\n            return notes_serialized.map((note) => {\n                return tree.parse(JSON.parse(note));\n            })\n        }\n\n        save(filename) {\n            let data_serializable = this.data as any;\n            for (let i_row in this.data) {\n                for (let i_col in this.data[Number(i_row)]) {\n                    data_serializable[Number(i_row)][Number(i_col)] = ParseMatrix.serialize(this.data[Number(i_row)][Number(i_col)])\n                }\n            }\n\n            let f = new File(filename,\"write\",\"JSON\");\n\n            if (f.isopen) {\n                post(\"saving session\");\n                f.writestring(JSON.stringify(data_serializable)); //writes a string\n                f.close();\n            } else {\n                post(\"could not save session\");\n            }\n        }\n\n        public static load(filename) {\n            let f = new File(filename, \"read\",\"JSON\");\n            let a, data_serialized;\n\n            if (f.isopen) {\n                post(\"reading file\");\n                // @ts-ignore\n                while ((a = f.readline()) != null) {\n                    data_serialized = JSON.parse(a)\n                }\n                f.close();\n            } else {\n                post(\"could not open file\");\n            }\n\n            let data_deserialized = data_serialized as any;\n\n            for (let i_row in data_serialized) {\n                for (let i_col in data_serialized[Number(i_row)]) {\n                    // post(i_row);\n                    // post(i_col);\n                    data_deserialized[Number(i_row)][Number(i_col)] = ParseMatrix.deserialize(data_serialized[Number(i_row)][Number(i_col)])\n                }\n            }\n\n            return data_deserialized\n        }\n    }\n\n    export class TreeDepthIterator {\n        public direction_forward: boolean;\n        private i: number;\n        private layers: number[];\n\n        constructor(depth: number, direction_forward: boolean) {\n            this.layers = _.range(depth);\n            this.direction_forward = direction_forward;\n            this.i = 0;\n        }\n\n        // TODO: type declarations\n        public next() {\n            let value_increment = (this.direction_forward) ? 1 : -1;\n\n            this.i += value_increment;\n\n            if (this.i < 0) {\n                throw 'segment iterator < 0'\n            }\n\n            if (this.i < this.layers.length) {\n                return {\n                    value: this.layers[this.i],\n                    done: false\n                }\n            } else {\n                return {\n                    value: null,\n                    done: true\n                }\n            }\n        }\n\n        public current() {\n            if (this.i > -1) {\n                return this.layers[this.i];\n            } else {\n                return null;\n            }\n        }\n\n        public get_index_current() {\n            return this.i // TODO: the root is the first index\n        }\n    }\n\n    export class ParseTreeIterator {\n        private iterator_segment;\n        private iterator_tree;\n        public segment_current;\n        public layer_current;\n\n        constructor(iterator_segment: SegmentIterator, iterator_tree: TreeDepthIterator) {\n            this.iterator_segment = iterator_segment;\n            this.iterator_tree = iterator_tree\n        }\n\n        // TODO: type declarations\n        public next(type_node?:string) {\n\n            if (type_node === 'root') {\n                // initialize\n                this.iterator_tree.next();\n                return\n            }\n\n            // initialize\n            if (this.iterator_tree.get_index_current() == -1) {\n                this.iterator_tree.next()\n            }\n\n            // let layer_current = this.iterator_tree.current();\n\n            let segment_result_next = this.iterator_segment.next();\n\n            let segment_next = segment_result_next.value;\n\n            if (!segment_result_next.done) {\n                this.segment_current = segment_next;\n                return {\n                    value: this.segment_current,\n                    done: false\n                }\n            }\n\n            //\n            // this.iterator_segment.reset();\n\n            let layer_result_next = this.iterator_tree.next();\n\n            // segment_next.done is true by now\n            if (!layer_result_next.done) {\n\n                this.iterator_segment.reset();\n\n                this.layer_current = this.iterator_tree.current();\n\n                segment_result_next = this.iterator_segment.next();\n\n                segment_next = segment_result_next.value;\n\n                this.segment_current = segment_next;\n\n                return {\n                    value: this.segment_current,\n                    done: false\n                }\n            }\n\n            return {\n                value: null,\n                done: true\n            }\n        }\n    }\n}"]}