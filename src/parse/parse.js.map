{"version":3,"file":"parse.js","sourceRoot":"","sources":["parse.ts"],"names":[],"mappings":"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","sourcesContent":["import {segment} from \"../segment/segment\";\nimport {note as n, note} from \"../note/note\";\nimport TreeModel = require(\"tree-model\");\nimport {log} from \"../log/logger\";\nimport {utils} from \"../utils/utils\";\nimport {live} from \"../live/live\";\nimport {clip as c} from \"../clip/clip\";\n\nconst _ = require(\"underscore\");\n\n\nexport namespace parse {\n    import SegmentIterator = segment.SegmentIterator;\n    import Logger = log.Logger;\n    import remainder = utils.remainder;\n    import division_int = utils.division_int;\n    import LiveClipVirtual = live.LiveClipVirtual;\n\n    export interface Parsable {\n        choose(): boolean;\n\n        // TODO: annotation\n        get_best_candidate(list_candidate_note);\n    }\n\n    export class ParseTree implements Parsable {\n        // matrix_clip: LiveClipVirtual[][];\n        //\n        // constructor() {\n        //     this.matrix_clip\n        // }\n\n        root: TreeModel.Node<n.NoteRenderable>;\n\n        constructor(note: TreeModel.Node<n.Note>, coordinates_matrix) {\n            let tree: TreeModel = new TreeModel();\n\n            let splitted = messages[i_mess].split(' ');\n\n            this.root = tree.parse(\n                {\n                    id: -1, // TODO: hashing scheme for clip id and beat start\n                    note: new n.NoteRenderable(\n                        Number(splitted[0]),\n                        Number(splitted[1]),\n                        Number(splitted[2]),\n                        Number(splitted[3]),\n                        Number(splitted[4]),\n                        coordinates_matrix\n                    ),\n                    children: [\n\n                    ]\n                }\n            )\n        }\n\n        public get_root():  {\n            return this.root;\n        }\n\n        private static get_diff_index_start(notes_new: TreeModel.Node<n.Note>[], notes_old: TreeModel.Node<n.Note>[]): number {\n            let same_start, same_duration, index_start_diff;\n            for (let i=0; i < notes_old.length; i++) {\n                same_start = (notes_old[i].model.note.beat_start === notes_new[i].model.note.beat_start);\n                same_duration = (notes_old[i].model.note.beats_duration === notes_new[i].model.note.beats_duration);\n                if (!(same_start && same_duration)) {\n                    index_start_diff = i;\n                    break;\n                }\n            }\n\n            return index_start_diff;\n        }\n\n        private static get_diff_index_end(notes_new: TreeModel.Node<n.Note>[], notes_old: TreeModel.Node<n.Note>[]): number {\n            let same_start, same_duration, index_end_diff;\n            for (let i=-1; i > -1 * (notes_new.length + 1); i--) {\n                same_start = (notes_new.slice(i)[0].model.note.beat_start === notes_old.slice(i)[0].model.note.beat_start);\n                same_duration = (notes_new.slice(i)[0].model.note.beats_duration === notes_old.slice(i)[0].model.note.beats_duration);\n                if (!(same_start && same_duration)) {\n                    index_end_diff = i;\n                    break;\n                }\n            }\n\n            // NB: add one in order to use with array slice, unless of course the index is -1, then you'll access the front of the array\n            return index_end_diff;\n        }\n\n        // TODO: complete return method signature\n        get_diff_index_notes(notes_parent: TreeModel.Node<n.Note>[], notes_child: TreeModel.Node<n.Note>[]): number[] {\n            return [\n                ParseTree.get_diff_index_start(notes_child, notes_parent),\n                ParseTree.get_diff_index_end(notes_child, notes_parent)\n            ];\n        };\n\n        public get_root(): TreeModel.Node<n.NoteRenderable> {\n            return\n        }\n\n        private add_first_layer(notes: TreeModel.Node<n.Note>[], index_new_layer: number): void {\n            // var note_parent_best, b_successful;\n\n            for (let node of notes) {\n                node.model.id = index_new_layer;\n                this.root_parse_tree.addChild(node);\n            }\n        }\n\n        // NB: only works top down currently\n        // private add_layer(notes_parent: TreeModel.Node<n.Note>[], notes_child: TreeModel.Node<n.Note>[]): TreeModel.Node<n.Note>[] {\n        private add_layer(notes_parent: TreeModel.Node<n.Note>[], notes_child: TreeModel.Node<n.Note>[], index_new_layer: number): void {\n\n            var note_parent_best, b_successful;\n\n            for (let node of notes_child) {\n                note_parent_best = node.model.note.get_best_candidate(notes_parent);\n                b_successful = node.model.note.choose();\n                if (b_successful) {\n                    node.model.id = index_new_layer;\n                    note_parent_best.addChild(node);\n                }\n            }\n        };\n\n        private update_leaves(leaves: TreeModel.Node<n.Note>[]) {\n            // find leaves in parse/derive beat interval\n\n            // splice them with their children\n            let leaves_spliced = this.leaves;\n            let children_to_insert, i_leaf_to_splice;\n            for (let leaf of leaves) {\n                // find index of leaf to \"splice\"\n                // always splice only one leaf\n                // find corresponding leaf in leaves_spliced\n                children_to_insert = [];\n                if (leaf.hasChildren()) {\n                    i_leaf_to_splice = _.findIndex(leaves_spliced, (leaf_to_splice)=>{\n                        // assuming monophony, i.e., no overlap\n                        return leaf_to_splice.model.note.beat_start === leaf.model.note.beat_start\n                    });\n\n                    let beat_end_children_greatest = -Infinity, beat_start_children_least = Infinity;\n\n                    for (let child of leaf.children) {\n                        if (child.model.note.get_beat_end() > beat_end_children_greatest) {\n                            beat_end_children_greatest = child.model.note.get_beat_end();\n                        }\n                        if (child.model.note.beat_start < beat_start_children_least) {\n                            beat_start_children_least = child.model.note.beat_start;\n                        }\n                        children_to_insert.push(child);\n                    }\n\n                    if (false) {\n                        // if (leaf.model.note.get_beat_end() > beat_end_children_greatest || leaf.model.note.beat_start < beat_start_children_least) {\n                        leaves_spliced.splice(\n                            i_leaf_to_splice,\n                            0,\n                            ...children_to_insert\n                        )\n                    } else {\n                        leaves_spliced.splice(\n                            i_leaf_to_splice,\n                            1,\n                            ...children_to_insert\n                        )\n                    }\n                    // leaves_spliced.splice(\n                    //     i_leaf_to_splice,\n                    //     1,\n                    //     ...children_to_insert\n                    // )\n                }\n            }\n\n            this.leaves = leaves_spliced;\n        }\n\n        public insert(notes: TreeModel.Node<n.Note>[]) {\n            if (this.iterator_tree.get_index_current() == 1) {\n                this.set_root(notes[0])\n            } else {\n                this.grow(\n                    notes,\n                    this.iterator_tree.get_breadth_current();\n                this.iterator_tree.get_depth_current();\n            )\n            }\n        }\n\n        get_notes_leaves(): TreeModel.Node<n.Note>[] {\n            return this.leaves;\n        }\n\n        set_root(note_root: TreeModel.Node<n.Note>) {\n            let clip_dao_virtual = new LiveClipVirtual([note_root]);\n\n            let clip_virtual = new c.Clip(clip_dao_virtual);\n\n            clip_virtual.clip_dao.beat_start = note_root.model.note.beat_start;\n\n            clip_virtual.clip_dao.beat_end = note_root.model.note.get_beat_end();\n\n            this.add_clip(clip_virtual);\n\n            note_root.model.id = 0;  // index of first clip\n\n            this.root_parse_tree = note_root;\n\n            this.leaves = [note_root];\n        }\n\n        // struct\n        elaborate(elaboration: TreeModel.Node<n.Note>[], beat_start: number, beat_end: number, index_layer: number): void {\n\n            if (index_layer + 1 > this.clips.length) {\n                let clip_dao_virtual = new LiveClipVirtual(elaboration);\n\n                clip_dao_virtual.beat_start = elaboration[0].model.note.beat_start;\n                clip_dao_virtual.beat_end = elaboration[elaboration.length - 1].model.note.get_beat_end();\n\n                let clip_virtual = new c.Clip(clip_dao_virtual);\n                this.add_clip(clip_virtual);\n            } else {\n                let clip_last = this.clips[this.clips.length - 1];\n                clip_last.clip_dao.beat_end = elaboration[elaboration.length - 1].model.note.get_beat_end();\n                clip_last.set_notes(elaboration);\n            }\n\n            let leaves_within_interval = this.get_leaves_within_interval(beat_start, beat_end);\n\n            if (index_layer == 1) {\n                this.add_first_layer(elaboration, this.clips.length - 1)\n            } else {\n                this.add_layer(leaves_within_interval, elaboration, this.clips.length - 1);\n            }\n\n            this.update_leaves(leaves_within_interval);\n        }\n\n        // struct\n        splice_notes(notes_subset: TreeModel.Node<n.Note>[], clip: c.Clip, interval_beats: number[]): TreeModel.Node<n.Note>[] {\n            let notes_clip = _.cloneDeep(clip.get_notes_within_loop_brackets());\n            let num_notes_to_replace = this.get_order_of_note_at_beat_end(notes_clip, interval_beats[1]) - this.get_order_of_note_at_beat_start(notes_clip, interval_beats[0]) + 1;\n            let index_start = this.get_note_index_at_beat(interval_beats[0], notes_clip);\n            notes_clip.splice(index_start, num_notes_to_replace, ...notes_subset);\n            return notes_clip\n        }\n\n        // struct\n        get_note_index_at_beat(beat: number, notes: TreeModel.Node<n.Note>[]): number {\n            let val =  _.findIndex(notes, (node)=>{\n                return node.model.note.beat_start === beat\n            });\n            return val;\n        }\n\n        // struct\n        get_leaves_within_interval(beat_start: number, beat_end: number): TreeModel.Node<n.Note>[] {\n            let val =  this.leaves.filter((node) =>{\n                // return node.model.note.beat_start >= beat_start && node.model.note.get_beat_end() <= beat_end\n                return (node.model.note.beat_start >= beat_start && node.model.note.beat_start <= beat_end) ||\n                    (node.model.note.get_beat_end() <= beat_end && node.model.note.get_beat_end() >= beat_start) ||\n                    (node.model.note.get_beat_end() >= beat_end && node.model.note.beat_start <= beat_start)\n\n            });\n            // this.logger.log(CircularJSON.stringify(this.leaves));\n            return val;\n        }\n\n    }\n\n    // export class ParseMatrix {\n    //\n    //     data: TreeModel.Node<note.Note>[][][];\n    //     logger: Logger;\n    //\n    //     constructor(height: number, width: number) {\n    //         this.data = [];\n    //         for(let i=0; i<height; i++) {\n    //             this.data[i] = new Array(width);\n    //         }\n    //         this.logger = new Logger('max')\n    //     }\n    //\n    //     set_notes(i_height, i_width, notes): void {\n    //         this.data[i_height][i_width] = notes\n    //     }\n    //\n    //     get_notes(i_height, i_width): TreeModel.Node<note.Note>[] {\n    //         return this.data[i_height][i_width]\n    //     }\n    //\n    //     private static serialize(notes: TreeModel.Node<note.Note>[]) {\n    //         return notes.map((note) => {\n    //             return JSON.stringify(note.model);\n    //         })\n    //     }\n    //\n    //     private static deserialize(notes_serialized) {\n    //         if (notes_serialized === null) {\n    //             return null\n    //         }\n    //         let tree = new TreeModel();\n    //         return notes_serialized.map((note) => {\n    //             return tree.parse(JSON.parse(note));\n    //         })\n    //     }\n    //\n    //     save(filename) {\n    //         let data_serializable = this.data as any;\n    //         for (let i_row in this.data) {\n    //             for (let i_col in this.data[Number(i_row)]) {\n    //                 data_serializable[Number(i_row)][Number(i_col)] = ParseMatrix.serialize(this.data[Number(i_row)][Number(i_col)])\n    //             }\n    //         }\n    //\n    //         let f = new File(filename,\"write\",\"JSON\");\n    //\n    //         if (f.isopen) {\n    //             post(\"saving session\");\n    //             f.writestring(JSON.stringify(data_serializable)); //writes a string\n    //             f.close();\n    //         } else {\n    //             post(\"could not save session\");\n    //         }\n    //     }\n    //\n    //     public static load(filename) {\n    //         let f = new File(filename, \"read\",\"JSON\");\n    //         let a, data_serialized;\n    //\n    //         if (f.isopen) {\n    //             post(\"reading file\");\n    //             // @ts-ignore\n    //             while ((a = f.readline()) != null) {\n    //                 data_serialized = JSON.parse(a)\n    //             }\n    //             f.close();\n    //         } else {\n    //             post(\"could not open file\");\n    //         }\n    //\n    //         let data_deserialized = data_serialized as any;\n    //\n    //         for (let i_row in data_serialized) {\n    //             for (let i_col in data_serialized[Number(i_row)]) {\n    //                 // post(i_row);\n    //                 // post(i_col);\n    //                 data_deserialized[Number(i_row)][Number(i_col)] = ParseMatrix.deserialize(data_serialized[Number(i_row)][Number(i_col)])\n    //             }\n    //         }\n    //\n    //         return data_deserialized\n    //     }\n    // }\n\n    export class TreeDepthIterator {\n        public direction_forward: boolean;\n        private i: number;\n        private layers: number[];\n\n        constructor(depth: number, direction_forward: boolean) {\n            this.layers = _.range(depth);\n            this.direction_forward = direction_forward;\n            this.i = 0;\n        }\n\n        // TODO: type declarations\n        public next() {\n            let value_increment = (this.direction_forward) ? 1 : -1;\n\n            this.i += value_increment;\n\n            if (this.i < 0) {\n                throw 'segment iterator < 0'\n            }\n\n            if (this.i < this.layers.length) {\n                return {\n                    value: this.layers[this.i],\n                    done: false\n                }\n            } else {\n                return {\n                    value: null,\n                    done: true\n                }\n            }\n        }\n\n        public current() {\n            if (this.i > -1) {\n                return this.layers[this.i];\n            } else {\n                return null;\n            }\n        }\n\n        public get_index_current() {\n            return this.i // TODO: the root is the first index\n        }\n    }\n\n    // export class MatrixIterator {\n    //     private num_rows: number;\n    //     private num_columns: number;\n    //\n    //     private row_current: number;\n    //     private column_current: number;\n    //\n    //     private i;\n    //\n    //     constructor(num_rows: number, num_columns: number) {\n    //         this.num_rows = num_rows;\n    //         this.num_columns = num_columns;\n    //\n    //         this.i = -1;\n    //     }\n    //\n    //     private next_row() {\n    //         this.i = this.i + this.num_columns;\n    //     }\n    //\n    //     private next_column() {\n    //         this.i = this.i + 1;\n    //     }\n    //\n    //     public next() {\n    //\n    //         let value: number[] = null;\n    //\n    //         this.next_column();\n    //\n    //         if (this.i === this.num_columns * this.num_rows + 1) {\n    //             return {\n    //                 value: value,\n    //                 done: true\n    //             }\n    //         }\n    //\n    //         let pos_row = division_int(this.i + 1, this.num_columns);\n    //         let pos_column = remainder(this.i + 1, this.num_columns);\n    //\n    //         value = [pos_row, pos_column];\n    //\n    //         return {\n    //             value: value,\n    //             done: false\n    //         };\n    //     }\n    // }\n\n    export class ParseTreeIterator {\n        private iterator_segment;\n        private iterator_tree;\n        public segment_current;\n        public layer_current;\n\n        constructor(iterator_segment: SegmentIterator, iterator_tree: TreeDepthIterator) {\n            this.iterator_segment = iterator_segment;\n            this.iterator_tree = iterator_tree\n        }\n\n        // TODO: type declarations\n        public next(type_node?:string) {\n\n            if (type_node === 'root') {\n                // initialize\n                this.iterator_tree.next();\n                return\n            }\n\n            // initialize\n            if (this.iterator_tree.get_index_current() == -1) {\n                this.iterator_tree.next()\n            }\n\n            // let layer_current = this.iterator_tree.current();\n\n            let segment_result_next = this.iterator_segment.next();\n\n            let segment_next = segment_result_next.value;\n\n            if (!segment_result_next.done) {\n                this.segment_current = segment_next;\n                return {\n                    value: this.segment_current,\n                    done: false\n                }\n            }\n\n            //\n            // this.iterator_segment.reset();\n\n            let layer_result_next = this.iterator_tree.next();\n\n            // segment_next.done is true by now\n            if (!layer_result_next.done) {\n\n                this.iterator_segment.reset();\n\n                this.layer_current = this.iterator_tree.current();\n\n                segment_result_next = this.iterator_segment.next();\n\n                segment_next = segment_result_next.value;\n\n                this.segment_current = segment_next;\n\n                return {\n                    value: this.segment_current,\n                    done: false\n                }\n            }\n\n            return {\n                value: null,\n                done: true\n            }\n        }\n    }\n}"]}