{"version":3,"file":"parse_tree.js","sourceRoot":"","sources":["parse_tree.ts"],"names":[],"mappings":"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","sourcesContent":["import {message as m, message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {live as li} from \"../live/live\";\nimport {clip as c} from \"../clip/clip\";\nimport {window as w} from \"../render/window\";\nimport {note as n} from \"../note/note\";\nimport TreeModel = require(\"tree-model\");\nimport {log} from \"../log/logger\";\nimport {song as s} from \"../song/song\";\nimport {phrase} from \"../phrase/phrase\";\n// import Phrase = phrase.Phrase;\n// import Note = note.Note;\nimport {segment} from \"../segment/segment\";\nimport Segment = segment.Segment;\nimport SegmentIterator = segment.SegmentIterator;\nimport {utils} from \"../utils/utils\";\nimport Logger = log.Logger;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet messenger: Messenger = new Messenger(env, 0);\n\n// let song_dao = new s.SongDao(\n//     new li.LiveApiJs(\"live_set\"),\n//     new m.Messenger(env, 0, \"song\"),\n//     true\n// );\n//\n// let song: s.Song = new s.Song(song_dao);\n//\n// let boundary_change_record_interval = (int) => {\n//     song.set_session_record(int);\n// };\n\nlet pwindow: w.Pwindow;\n\nlet elaboration: TreeModel.Node<n.Note>[];\n\nlet clip_user_input: c.Clip;\n\nlet clip_segment: c.Clip;\n\n// let logger = new log.Logger(env);\n\nlet segment_current: Segment;\n\nlet segment_iterator: SegmentIterator;\n\nlet confirm = () => {\n\n    let bound_lower = segment_current.get_beat_lower();\n\n    let bound_upper = segment_current.get_beat_upper();\n\n    elaboration = clip_user_input.get_notes(bound_lower, 0, bound_upper, 128);\n\n    pwindow.elaborate(\n        elaboration,\n        bound_lower,\n        bound_upper\n    );\n\n    let messages_notes = pwindow.get_messages_render_clips();\n\n    let messages_tree = pwindow.get_messages_render_tree();\n\n    // most recent summarization\n    let notes_leaves = pwindow.get_notes_leaves();\n\n    // send rendering messages\n    messenger.message([\"clear\"]);\n\n    for (let message of messages_notes) {\n        message.unshift('render');\n        messenger.message(message);\n        // logger.log(message);\n    }\n\n    for (let message of messages_tree) {\n        message.unshift('render');\n        messenger.message(message);\n        // logger.log(message);\n    }\n\n    let segment_next = segment_iterator.next();\n\n    let val_segment_next = segment_next.value;\n\n    if (segment_next.done) {\n        clip_user_input.stop();\n        return\n    }\n\n    segment_current = val_segment_next;\n\n    // TODO: send messages to deferlow object\n    segment_current.set_endpoints_loop();\n};\n\nlet reset = () => {\n    clip_user_input.remove_notes(\n        segment_current.beat_start,\n        0,\n        segment_current.beat_end,\n        128\n    );\n};\n\nfunction set_clip_segment() {\n\n    let vector_path_live = Array.prototype.slice.call(arguments);\n\n    let logger = new Logger(env);\n\n    logger.log('ran');\n\n    // logger.log(vector_path_live);\n\n    let live_api_clip_segment = new li.LiveApiJs(\n        utils.PathLive.to_string(vector_path_live)\n    );\n\n    // logger.log(utils.PathLive.to_string(vector_path_live));\n\n    clip_segment = new c.Clip(\n        new c.ClipDao(\n            live_api_clip_segment,\n            new m.Messenger(env, 0),\n            false\n        )\n    );\n\n    logger.log(\n        clip_segment.clip_dao.get_path()\n    )\n\n    // clip_segment.set_clip_endpoint_lower(\n    //     1\n    // );\n    //\n    // clip_segment.set_clip_endpoint_upper(\n    //     17\n    // )\n}\n\nlet begin_train = () => {\n    let val_segment_next = segment_iterator.next();\n\n    segment_current = val_segment_next.value;\n\n    clip_user_input.fire();\n};\n\nlet pause_train = () => {\n    clip_user_input.stop();\n};\n\nlet set_clip_user_input = () => {\n    let live_api_user_input = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot clip'\n    );\n\n    // TODO: get notes from segment clip\n\n    let notes_segments: TreeModel.Node<n.Note>[] = clip_segment.get_notes_within_markers();\n\n    let key_route = 'clip_user_input';\n\n    clip_user_input = new c.Clip(\n        new c.ClipDao(\n            live_api_user_input,\n            new m.Messenger(env, 0),\n            true,\n            key_route\n        )\n    );\n\n    let tree: TreeModel = new TreeModel();\n\n    let note_root = tree.parse(\n        {\n            id: -1, // TODO: hashing scheme for clip id and beat start\n            note: new n.Note(\n                notes_segments[0].model.note.pitch,\n                notes_segments[0].model.note.beat_start,\n                notes_segments[-1].model.note.beat_end - notes_segments[0].model.note.beat_start,\n                90,\n                0\n            ),\n            children: [\n\n            ]\n        }\n    );\n\n    clip_user_input.set_notes(\n        [note_root]\n    );\n\n    let dim = 16 * 6 * 4;\n\n    pwindow = new w.Pwindow(\n        dim,\n        dim,\n        new m.Messenger(env, 0)\n    );\n\n    pwindow.set_root(\n        clip_user_input\n    );\n\n    clip_user_input.set_path_deferlow(\n        'set_path_clip_user_input'\n    );\n\n    let segments: Segment[] = [];\n\n    for (let note of notes_segments) {\n        segments.push(\n            new Segment(\n                note.model.note.beat_start,\n                note.model.note.beat_end,\n                clip_user_input\n            )\n        )\n    }\n\n    segment_iterator = new SegmentIterator(\n        segments,\n        true\n    )\n};\n\nif (typeof Global !== \"undefined\") {\n    Global.parse_tree = {};\n    Global.parse_tree.confirm = confirm;\n    Global.parse_tree.reset = reset;\n    Global.parse_tree.set_clip_user_input = set_clip_user_input;\n    Global.parse_tree.set_clip_segment = set_clip_segment;\n    Global.parse_tree.begin_train = begin_train;\n    Global.parse_tree.pause_train = pause_train;\n}\n"]}