{"version":3,"file":"parse_tree.js","sourceRoot":"","sources":["parse_tree.ts"],"names":[],"mappings":";;AAAA,kDAA2D;AAC3D,IAAO,SAAS,GAAG,mBAAO,CAAC,SAAS,CAAC;AACrC,qCAAwC;AACxC,qCAAuC;AAYvC,IAAI,GAAG,GAAW,KAAK,CAAC;AAExB,IAAI,GAAG,KAAK,KAAK,EAAE;IACf,IAAI,CAAC,sBAAsB,CAAC,CAAC;IAC7B,SAAS,GAAG,CAAC,CAAC;CACjB;AAED,IAAI,SAAS,GAAc,IAAI,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AAGjD,IAAI,IAAI,GAAG;IACP,IAAI,gBAAgB,GAAG,IAAI,WAAE,CAAC,SAAS,CACnC,8BAA8B,CAAA,6CAA6C;KAC9E,CAAC;IAEF,gBAAgB,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAChC,qCAAqC;AACzC,CAAC,CAAC;AAEF,IAAI,MAAM,GAAG;IACT,IAAI,gBAAgB,GAAG,IAAI,WAAE,CAAC,SAAS,CACnC,0CAA0C,CAC7C,CAAC;IAEF,gBAAgB,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAA;AACpC,CAAC,CAAC;AAEF,IAAI,OAAO,GAAG,CAAC,CAAC;AAEhB,IAAI,iBAAiB,CAAC;AAEtB,IAAI,kBAAkB,CAAC;AAEvB,IAAI,IAAI,GAAG;IACP,IAAI,GAAG,GAAG,IAAI,WAAE,CAAC,SAAS,CACtB,0CAA0C,CAC7C,CAAC;IACF,EAAE;IACF,sCAAsC;IAEtC,IAAI,gBAAgB,GAAG,IAAI,WAAC,CAAC,IAAI,CAC7B,IAAI,WAAC,CAAC,OAAO,CACT,GAAG,EACH,IAAI,mBAAC,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE,aAAa,CAAC,EACtC,IAAI,CACP,CACJ,CAAC;IACF,IAAI,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE;QAClB,gBAAgB,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;QAC3C,gBAAgB,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;KAC9C;SAAM;QACH,gBAAgB,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;QAC3C,gBAAgB,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;KAC9C;IAED,OAAO,GAAG,OAAO,GAAG,CAAC,CAAC;IACtB,IAAI,CAAC,OAAO,CAAC,CAAA;AACjB,CAAC,CAAC;AAEF,IAAI,KAAK,GAAG;IACR,iBAAiB,GAAG,IAAI,WAAE,CAAC,SAAS,CAChC,0CAA0C,CAC7C,CAAC;IACF,mCAAmC;AACvC,CAAC,CAAC;AAEF,IAAI,MAAM,GAAG;IACT,kBAAkB,GAAG,IAAI,WAAE,CAAC,SAAS,CACjC,0CAA0C,CAC7C,CAAC;IACF,mCAAmC;AACvC,CAAC,CAAC;AAEF,IAAI,sBAAsB,GAAG;IACzB,iBAAiB,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;AACtC,CAAC,CAAC;AAEF,UAAU;AAEV,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IAC/B,MAAM,CAAC,UAAU,GAAG,EAAE,CAAC;IACvB,MAAM,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;IAC9B,MAAM,CAAC,UAAU,CAAC,MAAM,GAAG,MAAM,CAAC;IAClC,MAAM,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;IAC9B,MAAM,CAAC,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC;IAChC,MAAM,CAAC,UAAU,CAAC,MAAM,GAAG,MAAM,CAAC;IAClC,MAAM,CAAC,UAAU,CAAC,sBAAsB,GAAG,sBAAsB,CAAC;CACrE","sourcesContent":["import {message as m, message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {live as li} from \"../live/live\";\nimport {clip as c} from \"../clip/clip\";\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet messenger: Messenger = new Messenger(env, 0);\n\n\nlet mute = () => {\n    let clip_highlighted = new li.LiveApiJs(\n        'live_set view selected_track'// 'live_set view highlighted_clip_slot clip'\n    );\n\n    clip_highlighted.set(\"mute\", 1);\n    // post(clip_highlighted.get(\"name\"))\n};\n\nlet unmute = () => {\n    let clip_highlighted = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot clip'\n    );\n\n    clip_highlighted.set(\"muted\", 0)\n};\n\nlet counter = 0;\n\nlet highlighted_first;\n\nlet highlighted_second;\n\nlet test = () => {\n    let api = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot clip'\n    );\n    //\n    // messenger.message([api.get_path()])\n\n    let clip_highlighted = new c.Clip(\n        new c.ClipDao(\n            api,\n            new m.Messenger(env, 0, \"highlighted\"),\n            true\n        )\n    );\n    if (counter % 2 == 0) {\n        clip_highlighted.set_loop_bracket_lower(0);\n        clip_highlighted.set_loop_bracket_upper(2);\n    } else {\n        clip_highlighted.set_loop_bracket_upper(4);\n        clip_highlighted.set_loop_bracket_lower(2);\n    }\n\n    counter = counter + 1;\n    post(counter)\n};\n\nlet first = () => {\n    highlighted_first = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot clip'\n    );\n    // clip_highlighted.set(\"mute\", 1);\n};\n\nlet second = () => {\n    highlighted_second = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot clip'\n    );\n    // clip_highlighted.set(\"mute\", 1);\n};\n\nlet mute_first_highlighted = () => {\n    highlighted_first.set('muted', 1);\n};\n\n// test();\n\nif (typeof Global !== \"undefined\") {\n    Global.parse_tree = {};\n    Global.parse_tree.mute = mute;\n    Global.parse_tree.unmute = unmute;\n    Global.parse_tree.test = test;\n    Global.parse_tree.first = first;\n    Global.parse_tree.second = second;\n    Global.parse_tree.mute_first_highlighted = mute_first_highlighted;\n}\n"]}