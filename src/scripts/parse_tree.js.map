{"version":3,"file":"parse_tree.js","sourceRoot":"","sources":["parse_tree.ts"],"names":[],"mappings":"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","sourcesContent":["import {message as m, message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {live as li} from \"../live/live\";\nimport {clip as c} from \"../clip/clip\";\nimport {window as w} from \"../render/window\";\nimport {note as n} from \"../note/note\";\nimport TreeModel = require(\"tree-model\");\nimport {log} from \"../log/logger\";\nimport {song as s} from \"../song/song\";\nimport {phrase} from \"../phrase/phrase\";\nimport Phrase = phrase.Phrase;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet messenger: Messenger = new Messenger(env, 0);\n\n// let song_dao = new s.SongDao(\n//     new li.LiveApiJs(\"live_set\"),\n//     new m.Messenger(env, 0, \"song\"),\n//     true\n// );\n//\n// let song: s.Song = new s.Song(song_dao);\n//\n// let boundary_change_record_interval = (int) => {\n//     song.set_session_record(int);\n// };\n\nlet pwindow: w.Pwindow;\n\nlet elaboration: TreeModel.Node<n.Note>[];\n\nlet clip_user_input: c.Clip;\n\nlet clip_target: c.Clip;\n\nlet bound_lower, bound_upper;\n\nlet logger = new log.Logger(env);\n\nlet confirm = () => {\n\n    elaboration = clip_user_input.get_notes(bound_lower, 0, bound_upper, 128);\n\n    pwindow.elaborate(\n        elaboration,\n        bound_lower,\n        bound_upper\n    );\n\n    let messages_notes = pwindow.get_messages_render_clips();\n\n    let messages_tree = pwindow.get_messages_render_tree();\n\n    // most recent summarization\n    let notes_leaves = pwindow.get_notes_leaves();\n\n    // send rendering messages\n    messenger.message([\"clear\"]);\n\n    for (let message of messages_notes) {\n        message.unshift('render');\n        messenger.message(message);\n        // logger.log(message);\n    }\n\n    for (let message of messages_tree) {\n        message.unshift('render');\n        messenger.message(message);\n        // logger.log(message);\n    }\n\n    phrase_current = phrase_iterator.next()\n\n    // clip_target.remove_notes(\n    //     phrase_current.beat_start,\n    //     0,\n    //     phrase_current.beat_end,\n    //     128\n    // );\n\n    // clip_target.set_notes(\n    //     notes_leaves\n    // );\n};\n\nlet reset = () => {\n    clip_user_input.remove_notes(\n        phrase_current.beat_start,\n        0,\n        phrase_current.beat_end,\n        128\n    );\n};\n\nlet init_train = () => {\n    // var data_phrases = [\n    //     [0, 8], [8, 20]\n    // ];\n    //\n    // var phrases = [];\n    //\n    // // var forward_notes = true;\n    //\n    // for (var i = 0; i < data_phrases.length; i++) {\n    //     var beat_start = data_phrases[i][0];\n    //     var beat_end = data_phrases[i][1];\n    //\n    //     var phrase = new Phrase(beat_start, beat_end, clip_target);\n    //\n    //     phrase.load_notes();\n    //\n    //     phrases.push(\n    //         phrase\n    //     )\n    // }\n\n\n\n    // need segment iterator\n\n    // get length of song\n\n    // get fixed key center estimate (should be the notes of the segment track\n\n    //\n};\n\nlet init_render = () => {\n    // TODO: make configurable\n    let dim = 16 * 6 * 4;\n\n    pwindow = new w.Pwindow(\n        dim,\n        dim,\n        new m.Messenger(env, 0)\n    );\n\n    pwindow.set_clip(clip_target);\n};\n\n// let set_clip_target = () => {\n//     let live_api_to_target = new li.LiveApiJs(\n//         'live_set view highlighted_clip_slot clip'\n//     );\n//\n//     let key_route = 'clip_target';\n//\n//     clip_target = new c.Clip(\n//         new c.ClipDao(\n//             live_api_to_target,\n//             new m.Messenger(env, 0),\n//             true,\n//             key_route\n//         )\n//     );\n//     clip_target.set_path_deferlow(\n//         'set_path_clip_target'\n//     )\n// };\n\nlet set_clip_user_input = () => {\n    let live_api_user_input = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot clip'\n    );\n\n    let key_route = 'clip_user_input';\n\n    clip_user_input = new c.Clip(\n        new c.ClipDao(\n            live_api_user_input,\n            new m.Messenger(env, 0),\n            true,\n            key_route\n        )\n    );\n\n    clip_user_input.set_path_deferlow(\n        'set_path_clip_user_input'\n    )\n};\n\nlet set_bound_upper = (beat) => {\n    bound_upper = Number(beat);\n};\n\nlet set_bound_lower = (beat) => {\n    bound_lower = Number(beat);\n};\n\nif (typeof Global !== \"undefined\") {\n    Global.parse_tree = {};\n    Global.parse_tree.confirm = confirm;\n    Global.parse_tree.reset = reset;\n    Global.parse_tree.init_render = init_render;\n    // Global.parse_tree.set_clip_target = set_clip_target;\n    Global.parse_tree.set_clip_user_input = set_clip_user_input;\n    Global.parse_tree.set_bound_upper = set_bound_upper;\n    Global.parse_tree.set_bound_lower = set_bound_lower;\n}\n"]}