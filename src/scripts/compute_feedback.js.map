{"version":3,"file":"compute_feedback.js","sourceRoot":"","sources":["compute_feedback.ts"],"names":[],"mappings":";;AAAA,kDAA6C;AAC7C,IAAO,SAAS,GAAG,mBAAO,CAAC,SAAS,CAAC;AACrC,sCAAmC;AACnC,IAAO,UAAU,GAAG,SAAG,CAAC,UAAU,CAAC;AAYnC,IAAI,GAAG,GAAW,KAAK,CAAC;AAExB,IAAI,GAAG,KAAK,KAAK,EAAE;IACf,IAAI,CAAC,sBAAsB,CAAC,CAAC;IAC7B,SAAS,GAAG,CAAC,CAAC;CACjB;AAED,IAAI,SAAS,GAAc,IAAI,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AAEjD,IAAI,IAAI,GAAG;AAEX,CAAC,CAAC;AAEF,IAAI,MAAM,GAAG,UAAC,UAAU,EAAE,YAAY;IAClC,SAAS,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC,CAAC,CAAA;AAC1E,CAAC,CAAC;AAEF,UAAU;AAEV,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IAC/B,MAAM,CAAC,gBAAgB,GAAG,EAAE,CAAC;IAC7B,MAAM,CAAC,gBAAgB,CAAC,MAAM,GAAG,MAAM,CAAC;CAC3C","sourcesContent":["import {message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {map} from \"../control/map\";\nimport FretMapper = map.FretMapper;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet messenger: Messenger = new Messenger(env, 0);\n\nlet test = () => {\n\n};\n\nlet accept = (user_input, ground_truth) => {\n    messenger.message([FretMapper.get_interval(user_input ,ground_truth)])\n};\n\n// test();\n\nif (typeof Global !== \"undefined\") {\n    Global.compute_feedback = {};\n    Global.compute_feedback.accept = accept;\n}\n"]}