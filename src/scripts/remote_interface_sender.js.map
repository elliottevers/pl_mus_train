{"version":3,"file":"remote_interface_sender.js","sourceRoot":"","sources":["remote_interface_sender.ts"],"names":[],"mappings":";;AAAA,kDAA6C;AAC7C,IAAO,SAAS,GAAG,mBAAO,CAAC,SAAS,CAAC;AACrC,IAAM,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAYhC,IAAI,GAAG,GAAW,KAAK,CAAC;AAExB,IAAI,GAAG,KAAK,KAAK,EAAE;IACf,IAAI,CAAC,sBAAsB,CAAC,CAAC;IAC7B,SAAS,GAAG,CAAC,CAAC;CACjB;AAED,IAAI,SAAS,GAAG,IAAI,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;AAEtC,IAAI,SAAS,GAAG,EAAE,CAAC;AAEnB,IAAI,WAAW,GAAG,CAAC,CAAC;AAEpB,IAAI,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,SAAS,GAAG,WAAW,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AAE5D,IAAI,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AAE/C,IAAI,MAAM,GAAG,UAAC,eAAe,EAAE,aAAa,EAAE,KAAK;IAC/C,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IACxD,IAAI,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;QAC7B,IAAI,UAAU,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC/B,UAAU,CAAC,eAAe,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;QACxC,SAAS,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAA;KAClE;SAAM;QACH,IAAI,WAAW,GAAG,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACjC,WAAW,CAAC,CAAC,CAAC,eAAe,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC,GAAG,aAAa,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;QAC7E,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;KACrE;AACL,CAAC,CAAC;AAEF,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IAC/B,MAAM,CAAC,uBAAuB,GAAG,EAAE,CAAC;IACpC,MAAM,CAAC,uBAAuB,CAAC,MAAM,GAAG,MAAM,CAAC;CAClD","sourcesContent":["import {message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nconst _ = require(\"underscore\");\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet messenger = new Messenger(env, 0);\n\nlet num_frets = 12;\n\nlet num_strings = 6;\n\nlet frets = _.times(num_frets * num_strings, _.constant(0));\n\nlet nuts = _.times(num_strings, _.constant(0));\n\nlet render = (position_string, position_fret, state) => {\n    let feedback = Math.round(Math.random() * 6).toString();\n    if (Number(position_fret) === 0) {\n        let nuts_clone = _.clone(nuts);\n        nuts_clone[position_string - 1] = state;\n        messenger.message(['nuts', state, feedback].concat(nuts_clone))\n    } else {\n        let frets_clone = _.clone(frets);\n        frets_clone[((position_string - 1) * num_frets) + position_fret - 1] = state;\n        messenger.message(['frets', state, feedback].concat(frets_clone));\n    }\n};\n\nif (typeof Global !== \"undefined\") {\n    Global.remote_interface_sender = {};\n    Global.remote_interface_sender.render = render;\n}\n"]}