{"version":3,"file":"segmenter.js","sourceRoot":"","sources":["segmenter.ts"],"names":[],"mappings":";;AAEA,qCAAwC;AACxC,wCAAkC;AAClC,IAAO,MAAM,GAAG,YAAG,CAAC,MAAM,CAAC;AAE3B,IAAM,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAahC,IAAI,GAAG,GAAW,KAAK,CAAC;AAExB,IAAI,GAAG,KAAK,KAAK,EAAE;IACf,IAAI,CAAC,sBAAsB,CAAC,CAAC;IAC7B,SAAS,GAAG,CAAC,CAAC;CACjB;AAED,IAAI,IAAI,GAAG;IAEP,kCAAkC;IAElC,cAAc;IAEd,wDAAwD;IAExD,oEAAoE;IAEpE,sCAAsC;IAEtC,IAAI,oBAAoB,GAAG,IAAI,WAAE,CAAC,SAAS,CACvC,qCAAqC,CACxC,CAAC;IAEF,IAAI,UAAU,GAAG,oBAAoB,CAAC,QAAQ,EAAE,CAAC;IAEjD,IAAI,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAE3C,IAAI,MAAM,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC;IAE7B,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAExB,mCAAmC;IAEnC,IAAI,iBAAiB,GAAG,CAAC,CAAC;IAE1B,KAAc,UAAa,EAAb,KAAA,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAb,cAAa,EAAb,IAAa,EAAE;QAAxB,IAAI,CAAC,SAAA;QACN,IAAI,iBAAiB,GAAG,CAAC,UAAU,EAAE,QAAQ,EAAE,MAAM,CAAC,WAAW,CAAC,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7F,IAAI,SAAS,GAAG,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC5C,IAAI,QAAQ,GAAG,IAAI,WAAE,CAAC,SAAS,CAC3B,SAAS,CACZ,CAAC;QACF,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC;QACxD,gBAAgB;KACnB;IAED,6CAA6C;IAC7C,EAAE;IACF,+CAA+C;AAEnD,CAAC,CAAC;AAEF,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IAC/B,MAAM,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,MAAM,CAAC,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC;CAChC","sourcesContent":["import {message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {live as li} from \"../live/live\";\nimport {log} from \"../log/logger\";\nimport Logger = log.Logger;\nimport {utils} from \"../utils/utils\";\nconst _ = require('underscore');\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\ndeclare let Dict: any;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet test = () => {\n\n    // extract segments from sole clip\n\n    // delete clip\n\n    // for each list of notes, create a clip, then set notes\n\n    // 1) create a bunch of empty clips below the currently selected one\n\n    // get track index of highlighted clip\n\n    let clipslot_highlighted = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot'\n    );\n\n    let path_track = clipslot_highlighted.get_path();\n\n    let index_track = path_track.split(' ')[2];\n\n    let logger = new Logger(env);\n\n    logger.log(index_track);\n\n    // \"live_set tracks 3 clip_slots 0\"\n\n    let beats_length_clip = 8;\n\n    for (let i of _.range(1, 5)) {\n        let constituents_path = ['live_set', 'tracks', String(index_track), 'clip_slots', String(i)];\n        let path_live = constituents_path.join(' ');\n        let clipslot = new li.LiveApiJs(\n            path_live\n        );\n        clipslot.call('create_clip', String(beats_length_clip));\n        // logger.log(i)\n    }\n\n    // logger.log(clipslot_highlighted.get_id());\n    //\n    // logger.log(clipslot_highlighted.get_path());\n\n};\n\nif (typeof Global !== \"undefined\") {\n    Global.segmenter = {};\n    Global.segmenter.test = test;\n}\n"]}