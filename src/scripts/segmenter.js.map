{"version":3,"file":"segmenter.js","sourceRoot":"","sources":["segmenter.ts"],"names":[],"mappings":"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","sourcesContent":["import {message as m, message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {live as li} from \"../live/live\";\nimport {log} from \"../log/logger\";\nimport Logger = log.Logger;\nimport {utils} from \"../utils/utils\";\nimport {clip as c, clip} from \"../clip/clip\";\nimport Clip = clip.Clip;\nimport ClipDao = clip.ClipDao;\nimport {io} from \"../io/io\";\nimport {segment} from \"../segment/segment\";\nimport Segment = segment.Segment;\nimport {song} from \"../song/song\";\nimport SongDao = song.SongDao;\nimport Song = song.Song;\nconst _ = require('underscore');\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\ndeclare let Dict: any;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet length_beats: number;\n\nlet set_length_beats = (beats) => {\n    length_beats = beats\n};\n\n// NB: works without highlighting any tracks\nlet contract_clip = (path_clip_slot) => {\n\n    let device = new li.LiveApiJs(path_clip_slot);\n\n    let path_this_device = device.get_path();\n\n    let list_this_device = path_this_device.split(' ');\n\n    let index_this_track = Number(list_this_device[2]);\n\n    let this_track = new li.LiveApiJs(list_this_device.slice(0, 3).join(' '));\n\n    let num_clipslots = this_track.get(\"clip_slots\").length/2;\n\n    let notes_amassed = [];\n\n    // first, amass all notes of clips and delete all clips\n\n    for (let i_clipslot of _.range(0, num_clipslots)) {\n        let path_clipslot = ['live_set', 'tracks', index_this_track, 'clip_slots', Number(i_clipslot)].join(' ');\n\n        let api_clipslot_segment = new li.LiveApiJs(path_clipslot);\n\n        let clip_segment = new Clip(\n            new ClipDao(\n                new li.LiveApiJs(\n                    path_clipslot.split(' ').concat(['clip']).join(' ')\n                ),\n                new Messenger(env, 0)\n            )\n        );\n        notes_amassed = notes_amassed.concat(\n            clip_segment.get_notes(\n                clip_segment.get_loop_bracket_lower(),\n                0,\n                clip_segment.get_loop_bracket_upper(),\n                128\n            )\n        );\n\n        api_clipslot_segment.call('delete_clip')\n    }\n\n    // create one clip of length \"length_beats\"\n\n    let path_clipslot_contracted = ['live_set', 'tracks', String(index_this_track), 'clip_slots', String(0)];\n\n    let api_clipslot_contracted = new li.LiveApiJs(\n        path_clipslot_contracted.join(' ')\n    );\n\n    api_clipslot_contracted.call('create_clip', String(length_beats));\n\n    let clip_contracted = new Clip(\n        new ClipDao(\n            new li.LiveApiJs(\n                path_clipslot_contracted.concat(['clip']).join(' ')\n            ),\n            new Messenger(env, 0)\n        )\n    );\n\n    // add the amassed notes to it\n\n    clip_contracted.set_notes(\n        notes_amassed\n    )\n};\n\nlet expand_segments = () => {\n    let this_device = new li.LiveApiJs('this_device');\n\n    let path_this_device = this_device.get_path();\n\n    let list_this_device = path_this_device.split(' ');\n\n    let index_this_track = Number(list_this_device[2]);\n\n    expand_clip(['live_set', 'tracks', index_this_track, 'clip_slots', 0].join(' '))\n};\n\nlet contract_segments = () => {\n    let this_device = new li.LiveApiJs('this_device');\n\n    let path_this_device = this_device.get_path();\n\n    let list_this_device = path_this_device.split(' ');\n\n    let index_this_track = Number(list_this_device[2]);\n\n    contract_clip(['live_set', 'tracks', index_this_track, 'clip_slots', 0].join(' '))\n};\n\nlet expand_highlighted_clip = () => {\n    expand_clip('live_set view highlighted_clip_slot')\n};\n\nlet contract_highlighted_clip = () => {\n    contract_clip('live_set view highlighted_clip_slot')\n};\n\nexport let get_notes_on_track = (path_track) => {\n    let index_track = Number(path_track.split(' ')[2]);\n\n    let track = new li.LiveApiJs(path_track);\n\n    let num_clipslots = track.get(\"clip_slots\").length/2;\n\n    let notes_amassed = [];\n\n    for (let i_clipslot of _.range(0, num_clipslots)) {\n        let path_clipslot = ['live_set', 'tracks', index_track, 'clip_slots', Number(i_clipslot)].join(' ');\n\n        let clip = new Clip(\n            new ClipDao(\n                new li.LiveApiJs(\n                    path_clipslot.split(' ').concat(['clip']).join(' ')\n                ),\n                new Messenger(env, 0)\n            )\n        );\n\n        notes_amassed = notes_amassed.concat(\n            clip.get_notes(\n                clip.get_loop_bracket_lower(),\n                0,\n                clip.get_loop_bracket_upper(),\n                128\n            )\n        );\n    }\n\n    return notes_amassed\n};\n\nexport let get_notes_segments = () => {\n    let this_device = new li.LiveApiJs('this_device');\n    let path_this_track = this_device.get_path().split(' ').slice(0, 3).join(' ');\n    // let logger = new Logger('max');\n    // logger.log(path_this_track);\n    return get_notes_on_track(path_this_track)\n};\n\n// 'live_set view highlighted_clip_slot'\n\nlet test = () => {\n    expand_clip_audio('live_set view highlighted_clip_slot')\n};\n\nlet expand_clip_audio = (path_clip_slot) => {\n    let clipslot_audio = new li.LiveApiJs(path_clip_slot);\n\n    let track = new li.LiveApiJs(clipslot_audio.get_path().split(' ').slice(0, 3).join(' '));\n\n    let index_track = clipslot_audio.get_path().split(' ')[2];\n\n    let num_clipslots = track.get(\"clip_slots\").length/2;\n\n    for (let i_clipslot of _.range(1, num_clipslots)) {\n        let path_clipslot = ['live_set', 'tracks', index_track, 'clip_slots', Number(i_clipslot)].join(' ');\n\n        let clipslot = new li.LiveApiJs(path_clipslot);\n\n        let has_clip = clipslot.get(\"has_clip\")[0] === 1;\n\n        if (has_clip) {\n            clipslot.call(\"delete_clip\")\n        }\n\n        clipslot_audio.call(\"duplicate_clip_to\", ['id', clipslot.get_id()].join(' '))\n\n    }\n};\n\n// let notes_segments = io.Importer.import('segment');\n\nlet expand_clip = (path_clip_slot) => {\n\n    let clipslot_highlighted = new li.LiveApiJs(\n        path_clip_slot\n    );\n\n    let path_track = clipslot_highlighted.get_path();\n\n    let index_track = path_track.split(' ')[2];\n\n    let clip_highlighted = new Clip(\n        new ClipDao(\n            new li.LiveApiJs(\n                [path_clip_slot, 'clip'].join(' ')\n            ),\n            new Messenger(env, 0)\n        )\n    );\n\n    let notes_clip = clip_highlighted.get_notes(\n        clip_highlighted.get_loop_bracket_lower(),\n        0,\n        clip_highlighted.get_loop_bracket_upper(),\n        128\n    );\n\n    let notes_segments = get_notes_segments();\n\n    let segments: Segment[] = [];\n\n    for (let note of notes_segments) {\n        segments.push(\n            new Segment(\n                note\n            )\n        )\n    }\n\n    let song = new li.LiveApiJs(\n        'live_set'\n    );\n\n    let logger = new Logger(env);\n\n    for (let i_segment in segments) {\n\n        let segment = segments[Number(i_segment)];\n\n        let path_clipslot = ['live_set', 'tracks', String(index_track), 'clip_slots', String(Number(i_segment))];\n\n        let path_live = path_clipslot.join(' ');\n\n        let scene = new li.LiveApiJs(\n            ['live_set', 'scenes', String(Number(i_segment))].join(' ')\n        );\n\n        let scene_exists = Number(scene.get_id()) !== 0;\n\n        if (!scene_exists) {\n            song.call('create_scene', String(Number(i_segment)))\n        }\n\n        let clipslot = new li.LiveApiJs(\n            path_live\n        );\n\n        if (Number(i_segment) === 0) {\n            clipslot.call('delete_clip');\n        }\n\n        clipslot.call('create_clip', String(segment.get_endpoints_loop()[1] - segment.get_endpoints_loop()[0]));\n\n        let path_clip = path_clipslot.concat('clip').join(' ');\n\n        let clip = new Clip(\n            new ClipDao(\n                new li.LiveApiJs(\n                    path_clip\n                ),\n                new Messenger(env, 0)\n            )\n        );\n\n        clip.set_endpoints_loop(\n            segment.get_endpoints_loop()[0],\n            segment.get_endpoints_loop()[1]\n        );\n\n        clip.set_endpoint_markers(\n            segment.get_endpoints_loop()[0],\n            segment.get_endpoints_loop()[1]\n        );\n\n        let notes_within_segment = notes_clip.filter(\n            node => node.model.note.beat_start >= segment.get_endpoints_loop()[0] && node.model.note.get_beat_end() <= segment.get_endpoints_loop()[1]\n        );\n\n        clip.set_notes(notes_within_segment)\n    }\n\n};\n\nif (typeof Global !== \"undefined\") {\n    Global.segmenter = {};\n    Global.segmenter.expand_highlighted_clip = expand_highlighted_clip;\n    Global.segmenter.contract_highlighted_clip = contract_highlighted_clip;\n    Global.segmenter.contract_segments = contract_segments;\n    Global.segmenter.expand_segments = expand_segments;\n    Global.segmenter.set_length_beats = set_length_beats;\n    Global.segmenter.test = test;\n}\n"]}