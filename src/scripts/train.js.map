{"version":3,"file":"train.js","sourceRoot":"","sources":["train.ts"],"names":[],"mappings":"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","sourcesContent":["import {message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {map} from \"../control/map\";\nimport FretMapper = map.FretMapper;\nimport {trainer} from \"../train/trainer\";\nimport Trainer = trainer.Trainer;\nimport {freeze, thaw} from \"../serialize/serialize\";\nimport TrainThawer = thaw.TrainThawer;\nimport {algorithm} from \"../train/algorithm\";\nimport Detect = algorithm.Detect;\nimport {live} from \"../live/live\";\nimport LiveClipVirtual = live.LiveClipVirtual;\nimport {segment} from \"../segment/segment\";\nimport Segment = segment.Segment;\nimport {modes_control, modes_texture} from \"../constants/constants\";\nimport INSTRUMENTAL = modes_control.INSTRUMENTAL;\nimport {clip} from \"../clip/clip\";\nimport Clip = clip.Clip;\nimport {user_input} from \"../control/user_input\";\nimport UserInputHandler = user_input.UserInputHandler;\nimport POLYPHONY = modes_texture.POLYPHONY;\nimport TrainFreezer = freeze.TrainFreezer;\nimport {window} from \"../render/window\";\nimport MatrixWindow = window.MatrixWindow;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\n\nlet test = () => {\n\n};\n\nlet accept = (user_input, ground_truth) => {\n    messenger.message([FretMapper.get_interval(user_input ,ground_truth)])\n};\n\n// test();\n\nif (typeof Global !== \"undefined\") {\n    Global.compute_feedback = {};\n    Global.compute_feedback.accept = accept;\n}\n\n\n\nlet set_mode_texture = () => {\n    let mode_texture = POLYPHONY;\n};\n\nlet set_mode_control = () => {\n    let mode_control = INSTRUMENTAL;\n};\n\nlet set_algorithm_train = () => {\n    let algorithm_train = new Detect(\n        user_input_handler\n    );\n\n    let window_local = new MatrixWindow(\n        384,\n        384,\n        messenger,\n        algorithm_train\n    );\n};\n\nlet set_song = () => {\n    let song = {\n        set_overdub: (int) => {},\n        set_session_record: (int) => {}\n    };\n}\n\nlet set_clip_user_input = () => {\n    let clip_user_input = {\n        fire: () => {},\n        stop: () => {},\n        set_endpoints_loop: (former, latter) => {}\n    };\n};\n\nlet set_segments = () => {\n    let segments: Segment[] = [];\n\n    for (let note of notes_segments) {\n        segments.push(\n            new Segment(\n                note\n            )\n        )\n    }\n};\n\nlet set_clip_target = () => {\n    let clip_dao_virtual = new LiveClipVirtual(notes_target_clip);\n\n    let clip_target_virtual = new Clip(clip_dao_virtual);\n};\n\nlet begin = () => {\n    trainer = new Trainer(\n        window_local,\n        user_input_handler,\n        algorithm_train,\n        clip_user_input,\n        clip_target_virtual,\n        song,\n        segments,\n        messenger\n    );\n\n    trainer.init()\n};\n\nlet accept_input = () => {\n    trainer_local.accept_input(\n        [note_target_1_subtarget_1]\n    );\n};\n\n// 1 \"task\" used as\n// 1 alg train 2 mode texture 3 mode control 4 clip user input (figure out if we have to highlight and click)  5 clip target (won't need to highlight) 6 segments\n// 1) dependencies 2) ground truth\n\nlet load_session = () => {\n\n    let config = {\n        'window': window,\n        'user_input_handler': user_input_handler,\n        'algorithm': algorithm_train,\n        'clip_user_input': clip_user_input,\n        'clip_target_virtual': clip_target_virtual,\n        'song': song,\n        'segments': segments,\n        'messenger': messenger,\n        'env': env\n    };\n\n    let freezer = new TrainFreezer(\n        env\n    );\n\n    freezer.freeze(\n        trainer_local,\n        '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync/tk_music_ts/cache/train_detect.json'\n    );\n};\n\nlet save_session = () => {\n\n    let config = {\n        'window': window_local,\n        'user_input_handler': user_input_handler,\n        'algorithm': algorithm_train,\n        'clip_user_input': clip_user_input,\n        'clip_target_virtual': clip_target_virtual,\n        'song': song,\n        'segments': segments,\n        'messenger': messenger,\n        'env': env\n    };\n\n    let thawer = new TrainThawer(\n        env\n    );\n\n    let train_thawed = thawer.thaw(\n        '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync/tk_music_ts/cache/train_detect.json',\n        config\n    );\n\n    train_thawed.render_window(\n\n    );\n};\n\n\n\n\n\n\n// let messenger: Messenger = new Messenger(env, 0);\n//\n// let mode_texture = POLYPHONY;\n// let mode_control = INSTRUMENTAL;\n//\n// let user_input_handler = new UserInputHandler(\n//     mode_texture,\n//     mode_control\n// );\n\n// let env: string = 'node_for_max';\n// env = 'node';\n\n\n// let messenger = new Messenger(env, 0, 'render_detect');\n\n// let algorithm_train = new Detect(\n//     user_input_handler\n// );\n\n// let window_local = new MatrixWindow(\n//     384,\n//     384,\n//     messenger,\n//     algorithm_train\n// );\n\n// stubs\n// let song = {\n//     set_overdub: (int) => {},\n//     set_session_record: (int) => {}\n// };\n\n// let clip_user_input = {\n//     fire: () => {},\n//     stop: () => {},\n//     set_endpoints_loop: (former, latter) => {}\n// };\n\n// let notes_segments = [\n//     segment_note_1,\n//     segment_note_2\n// ];\n//\n// let notes_target_clip = [\n//     note_target_1_subtarget_1,\n//     note_target_1_subtarget_2,\n//     note_target_2_subtarget_1,\n//     note_target_2_subtarget_2,\n//     note_target_3_subtarget_1,\n//     note_target_3_subtarget_2,\n//     note_target_4_subtarget_1,\n//     note_target_4_subtarget_2\n// ];\n\n// let segments: Segment[] = [];\n//\n// for (let note of notes_segments) {\n//     segments.push(\n//         new Segment(\n//             note\n//         )\n//     )\n// }\n\n// let clip_dao_virtual = new LiveClipVirtual(notes_target_clip);\n//\n// let clip_target_virtual = new Clip(clip_dao_virtual);\n\n// let trainer_local = new Trainer(\n//     window_local,\n//     user_input_handler,\n//     algorithm_train,\n//     clip_user_input,\n//     clip_target_virtual,\n//     song,\n//     segments,\n//     messenger\n// );\n\n// test case - 2 segments, 2 notes a piece\n\n// trainer_local.init(\n//\n// );\n//\n// trainer_local.accept_input(\n//     [note_target_1_subtarget_1]\n// );\n//\n// trainer_local.accept_input(\n//     [note_target_1_subtarget_2]\n// );\n//\n// trainer_local.accept_input(\n//     [note_target_2_subtarget_1]\n// );\n//\n// trainer_local.accept_input(\n//     [note_target_2_subtarget_2]\n// );\n//\n// trainer_local.accept_input(\n//     [note_target_3_subtarget_1]\n// );\n\n// trainer_local.render_window(\n//\n// );\n\n// trainer_local.clear_window(\n//\n// );\n\n// let freezer = new TrainFreezer(\n//     env\n// );\n//\n// freezer.freeze(\n//     trainer_local,\n//     '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync/tk_music_ts/cache/train_detect.json'\n// );\n//\n// let thawer = new TrainThawer(\n//     env\n// );\n\n// let config = {\n//     'window': window_local,\n//     'user_input_handler': user_input_handler,\n//     'algorithm': algorithm_train,\n//     'clip_user_input': clip_user_input,\n//     'clip_target_virtual': clip_target_virtual,\n//     'song': song,\n//     'segments': segments,\n//     'messenger': messenger,\n//     'env': env\n// };\n\n// let train_thawed = thawer.thaw(\n//     '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync/tk_music_ts/cache/train_detect.json',\n//     config\n// );\n//\n// train_thawed.render_window(\n//\n// );"]}