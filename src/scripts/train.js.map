{"version":3,"file":"train.js","sourceRoot":"","sources":["train.ts"],"names":[],"mappings":"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","sourcesContent":["import {message as m, message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {map} from \"../control/map\";\nimport FretMapper = map.FretMapper;\nimport {trainer as tr} from \"../train/trainer\";\nimport Trainer = tr.Trainer;\nimport {freeze, thaw} from \"../serialize/serialize\";\nimport TrainThawer = thaw.TrainThawer;\nimport {algorithm} from \"../train/algorithm\";\nimport Detect = algorithm.Detect;\nimport {live as li, live} from \"../live/live\";\nimport LiveClipVirtual = live.LiveClipVirtual;\nimport {segment} from \"../segment/segment\";\nimport Segment = segment.Segment;\nimport {modes_control, modes_texture} from \"../constants/constants\";\nimport INSTRUMENTAL = modes_control.INSTRUMENTAL;\nimport {clip as c, clip} from \"../clip/clip\";\nimport Clip = clip.Clip;\nimport {user_input} from \"../control/user_input\";\nimport UserInputHandler = user_input.UserInputHandler;\nimport POLYPHONY = modes_texture.POLYPHONY;\nimport TrainFreezer = freeze.TrainFreezer;\nimport {window as w} from \"../render/window\";\nimport MatrixWindow = w.MatrixWindow;\nimport LiveApiJs = live.LiveApiJs;\nimport {log} from \"../log/logger\";\nimport Logger = log.Logger;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\n\n// let accept = (user_input, ground_truth) => {\n//     messenger.message([FretMapper.get_interval(user_input ,ground_truth)])\n// };\n\nlet mode_texture, mode_control, depth_tree, clip_user_input, song, algorithm_train, user_input_handler, window, messenger, clip_target, segments, trainer;\n\nlet set_mode_texture = (option) => {\n    // let mode_texture = POLYPHONY;\n    mode_texture = option;\n\n};\n\nlet set_mode_control = (option) => {\n    // let mode_control = INSTRUMENTAL;\n    mode_control = option;\n};\n\nlet set_algorithm_train = () => {\n    algorithm_train = new Detect(\n        user_input_handler\n    );\n\n    window = new MatrixWindow(\n        384,\n        384,\n        messenger,\n        algorithm_train\n    );\n};\n\nlet set_depth_tree = (depth) => {\n    depth_tree = depth\n};\n\nlet set_clip_user_input = () => {\n    clip_user_input = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot clip'\n    );\n};\n\nlet set_segments = () => {\n    // @ts-ignore\n    let list_path_device = Array.prototype.slice.call(arguments);\n\n    list_path_device.shift();\n\n    list_path_device[list_path_device.length - 2] = 'clip_slots';\n\n    list_path_device.push('clip');\n\n    let path_clip = list_path_device.join(' ');\n\n    let live_api: LiveApiJs;\n\n    live_api = new li.LiveApiJs(\n        path_clip\n    );\n\n    let clip = new c.Clip(\n        new c.ClipDao(\n            live_api,\n            new m.Messenger(env, 0),\n            false\n        )\n    );\n\n    // TODO: how do we get beat_start, beat_end?\n    let notes_segments = clip.get_notes(0, 0, 17 * 4, 128);\n\n    let segments: Segment[] = [];\n\n    for (let note of notes_segments) {\n        segments.push(\n            new Segment(\n                note\n            )\n        )\n    }\n};\n\n// TODO: send this via bus based on options in radio\nlet set_clip_target = (path) => {\n    // let clip_dao_virtual = new LiveClipVirtual(notes_target_clip);\n    //\n    // let clip_target_virtual = new Clip(clip_dao_virtual);\n    let live_api: LiveApiJs;\n\n    live_api = new li.LiveApiJs(\n        path\n    );\n\n    let clip_target = new c.Clip(\n        new c.ClipDao(\n            live_api,\n            new m.Messenger(env, 0),\n            false\n        )\n    );\n};\n\nlet begin = () => {\n    // let clip_highlighted = new li.LiveApiJs(\n    //     'live_set view highlighted_clip_slot clip'\n    // );\n    //\n    // exporter.set_length(\n    //     clip_highlighted.get(\"length\")\n    // );\n\n    song = new li.LiveApiJs(\n        'live_set'\n    );\n\n    trainer = new Trainer(\n        window,\n        user_input_handler,\n        algorithm_train,\n        clip_user_input,\n        clip_target,\n        song,\n        segments,\n        messenger\n    );\n\n    trainer.init()\n};\n\nlet pause = () => {\n    trainer.pause()\n};\n\nlet resume = () => {\n    trainer.resume()\n};\n\nlet erase = () => {\n\n};\n\nlet reset = () => {\n\n};\n\nlet accept = () => {\n\n};\n\nlet accept_input = () => {\n    let notes;\n    if (true) {\n        // midi values\n    } else {\n        // signal to use user input clip\n    }\n    trainer.accept_input(\n        notes\n    );\n};\n\nlet load = () => {\n\n    // TODO: logic to determine, from project folder, name of file\n\n    let freezer = new TrainFreezer(\n        env\n    );\n\n    freezer.freeze(\n        trainer,\n        '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync/tk_music_ts/cache/train_detect.json'\n    );\n};\n\nlet save = () => {\n\n    // TODO: logic to determine, from project folder, name of file\n\n    let config = {\n        'window': window,\n        'user_input_handler': user_input_handler,\n        'algorithm': algorithm_train,\n        'clip_user_input': clip_user_input,\n        'clip_target_virtual': clip_target,\n        'song': song,\n        'segments': segments,\n        'messenger': messenger,\n        'env': env\n    };\n\n    let thawer = new TrainThawer(\n        env\n    );\n\n    let train_thawed = thawer.thaw(\n        '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync/tk_music_ts/cache/train_detect.json',\n        config\n    );\n\n    train_thawed.render_window(\n\n    );\n};\n\n\n// 1 \"task\" used as\n// 1 alg train 2 mode texture 3 mode control 4 clip user input (figure out if we have to highlight and click)  5 clip target (won't need to highlight) 6 segments\n// 1) dependencies 2) ground truth\n\n\nif (typeof Global !== \"undefined\") {\n    Global.train = {};\n    Global.train.load = load;\n    Global.train.save = save;\n    Global.train.pause = pause;\n    Global.train.resume = resume;\n    Global.train.erase = erase;\n    Global.train.reset = reset;\n    Global.train.accept = accept;\n    Global.train.accept_input = accept_input;\n    Global.train.set_segments = set_segments;\n    Global.train.set_clip_user_input = set_clip_user_input;\n    Global.train.set_clip_target = set_clip_target;\n    Global.train.set_depth_tree = set_depth_tree;\n    Global.train.set_algorithm_train = set_algorithm_train;\n    Global.train.set_mode_control = set_mode_control;\n    Global.train.set_mode_texture = set_mode_texture;\n}\n"]}