{"version":3,"file":"train.js","sourceRoot":"","sources":["train.ts"],"names":[],"mappings":"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","sourcesContent":["// // import {message as m, message} from \"../message/messenger\";\n// // import Messenger = message.Messenger;\n// // import {live, live as li} from \"../live/live\";\n// // import {clip as c} from \"../clip/clip\";\n// // import {window as w} from \"../render/window\";\n// // import {note as n} from \"../note/note\";\n// // import TreeModel = require(\"tree-model\");\n// // import {log} from \"../log/logger\";\n// // import {song as s} from \"../song/song\";\n// // import {segment} from \"../segment/segment\";\n// // import Segment = segment.Segment;\n// // import SegmentIterator = segment.SegmentIterator;\n// // import {utils} from \"../utils/utils\";\n// // import Logger = log.Logger;\n// // import LiveClipVirtual = live.LiveClipVirtual;\n// // import {parse} from \"../parse/parse\";\n// // import TreeDepthIterator = parse.TreeDepthIterator;\n// // import ParseTreeIterator = parse.ParseTreeIterator;\n// // import ParseMatrix = parse.ParseMatrix;\n// //\n// // declare let autowatch: any;\n// // declare let inlets: any;\n// // declare let outlets: any;\n// // declare function outlet(n: number, o: any): void;\n// // declare function post(message?: any): void;\n// //\n// // export {}\n// //\n// // declare let Global: any;\n// //\n// // let env: string = 'max';\n// //\n// // if (env === 'max') {\n// //     post('recompile successful');\n// //     autowatch = 1;\n// // }\n// //\n// // let messenger: Messenger = new Messenger(env, 0);\n// //\n// // let logger = new Logger(env);\n// //\n// // let song_dao = new s.SongDao(\n// //     new li.LiveApiJs(\"live_set\", env),\n// //     new m.Messenger(env, 0, \"song\"),\n// //     true\n// // );\n// //\n// // let song: s.Song = new s.Song(song_dao);\n// //\n// // export let pwindow: w.Pwindow;\n// //\n// // let elaboration: TreeModel.Node<n.Note>[];\n// //\n// // let clip_user_input: c.Clip;\n// //\n// // let clip_segment: c.Clip;\n// //\n// // let segment_current: Segment;\n// //\n// // let segment_iterator: SegmentIterator;\n// //\n// // let tree_depth_iterator: TreeDepthIterator;\n// //\n// // let parse_tree_iterator: ParseTreeIterator;\n// //\n// // let layer_parse_tree_current: number;\n// //\n// // let depth_parse_tree: number;\n// //\n// // export let parse_matrix: ParseMatrix;\n// //\n// // let notes_segments: TreeModel.Node<n.Note>[];\n//\n// // export let wipe_render = (messenger) => {\n// //     let msg_clear = [\"clear\"];\n// //     msg_clear.unshift('render');\n// //     messenger.message(msg_clear);\n// // };\n//\n// // export let render = () => {\n// //     pwindow.render();\n// // };\n//\n// // let start_session_train = (parse_matrix) => {\n// //     logger.log(JSON.stringify(parse_matrix));\n// //     initialize_parse_tree(notes_segments, clip_user_input, song, add_to_tree_export, messenger);\n// //     // grow_from_matrix(parse_matrix);\n// //     fire_session()\n// // };\n//\n// // export let grow_from_matrix = (parse_matrix) => {\n// //     for (let notes of parse_matrix.get_entries()) {\n// //         add_to_tree_export(\n// //             notes,\n// //             parse_matrix.get_note_first_segment().model.note.beat_start,\n// //             parse_matrix.get_note_last_segment().model.note.get_beat_end(),\n// //             clip_user_input,\n// //             song,\n// //             messenger\n// //         );\n// //     }\n// // };\n//\n// // let stop_session = (clip_user_input, song) => {\n// //     song.set_overdub(0);\n// //\n// //     song.set_session_record(0);\n// //\n// //     clip_user_input.stop();\n// // };\n//\n// // let fire_session = () => {\n// //     let interval = segment_current.get_endpoints_loop();\n// //\n// //     clip_user_input.set_endpoints_loop(\n// //         interval[0],\n// //         interval[1]\n// //     );\n// //\n// //     song.set_overdub(1);\n// //\n// //     song.set_session_record(1);\n// //\n// //     clip_user_input.fire();\n// // };\n//\n// // let load = (filename) => {\n// //     start_session_train(\n// //         ParseMatrix.load(\n// //             filename\n// //         )\n// //     )\n// // };\n// //\n// // let save = (filename) => {\n// //     parse_matrix.save(filename);\n// //     stop_session(clip_user_input, song)\n// // };\n//\n//\n// let start = () => {\n//     trainer.init();\n// };\n//\n// let resume = () => {\n//     trainer.resume();\n// };\n//\n// let pause = () => {\n//     trainer.pause();\n// };\n//\n//\n//\n//\n//\n// // let add_to_tree = (notes, beat_start, beat_end) => {\n// //     add_to_tree_export(notes, beat_start, beat_end, clip_user_input, song, messenger)\n// // };\n//\n// export let add_to_tree_export = (notes, beat_start, beat_end, clip_user_input, song, messenger) => {\n//\n//     // pwindow.elaborate(\n//     //     notes,\n//     //     beat_start,\n//     //     beat_end,\n//     //     tree_depth_iterator.get_index_current()\n//     // );\n//     //\n//     // parse_matrix.set_notes(\n//     //     tree_depth_iterator.get_index_current(),\n//     //     segment_iterator.get_index_current(),\n//     //     notes\n//     // );\n//\n//     // pwindow.render();\n//\n//     let segment_next = parse_tree_iterator.next();\n//\n//     let val_segment_next = segment_next.value;\n//\n//     layer_parse_tree_current = tree_depth_iterator.get_index_current();\n//\n//     // if (segment_next.done) {\n//     //\n//     //     stop_session(clip_user_input, song);\n//     //\n//     //     return\n//     // }\n//     //\n//     // segment_current = val_segment_next;\n//     //\n//     // let interval = segment_current.get_endpoints_loop();\n//     //\n//     // clip_user_input.set_endpoints_loop(\n//     //     interval[0],\n//     //     interval[1]\n//     // );\n// };\n//\n// // let confirm = () => {\n// //\n// //     elaboration = clip_user_input.get_notes(\n// //         segment_current.beat_start,\n// //         0,\n// //         segment_current.beat_end - segment_current.beat_start,\n// //         128\n// //     );\n// //\n// //     add_to_tree(\n// //         elaboration,\n// //         segment_current.beat_start,\n// //         segment_current.beat_end\n// //     );\n// // };\n//\n// let reset = () => {\n//     trainer.reset_user_input()\n//     // clip_user_input.set_notes(\n//     //     trainer.get_notes_struct(\n//     //         // TODO: some information\n//     //     )\n//     // );\n// };\n//\n// let erase = () => {\n//     // clip_user_input.remove_notes(\n//     //     segment_current.beat_start,\n//     //     0,\n//     //     segment_current.beat_end - segment_current.beat_start,\n//     //     128\n//     // );\n// };\n//\n// function set_clip_segment() {\n//\n//     let vector_path_live = Array.prototype.slice.call(arguments);\n//\n//     let live_api_clip_segment = new li.LiveApiJs(\n//         utils.PathLive.to_string(vector_path_live)\n//     );\n//\n//     clip_segment = new c.Clip(\n//         new c.ClipDao(\n//             live_api_clip_segment,\n//             new m.Messenger(env, 0),\n//             false\n//         )\n//     );\n//\n//     // TODO: in information retreival phase, save the start and end points of the song and retreive them here\n//     clip_segment.set_clip_endpoint_lower(\n//         1\n//     );\n//\n//     clip_segment.set_clip_endpoint_upper(\n//         16 * 4\n//     );\n//\n//     notes_segments = clip_segment.get_notes_within_markers();\n// }\n//\n// let set_depth_tree = (depth) => {\n//     set_depth_tree_export(depth)\n// };\n//\n// export let set_depth_tree_export = (depth) => {\n//     depth_parse_tree = depth;\n// };\n//\n// let begin_train = () => {\n//     initialize_parse_tree(notes_segments, clip_user_input, song, add_to_tree, messenger);\n//     fire_session()\n// };\n//\n// export let initialize_parse_tree = (notes_segments, clip_user_input, song, add_to_tree_export, messenger) => {\n//     let segments: Segment[] = [];\n//\n//     for (let note of notes_segments) {\n//         let clip_dao_virtual = new LiveClipVirtual([note]);\n//         let clip_segment_virtual = new c.Clip(clip_dao_virtual);\n//         segments.push(\n//             new Segment(\n//                 note.model.note.beat_start,\n//                 note.model.note.get_beat_end(),\n//                 clip_segment_virtual\n//             )\n//         )\n//     }\n//\n//     parse_matrix = new ParseMatrix(\n//         depth_parse_tree,\n//         segments.length\n//     );\n//\n//     segment_iterator = new SegmentIterator(\n//         segments,\n//         true\n//     );\n//\n//     tree_depth_iterator = new TreeDepthIterator(\n//         depth_parse_tree,\n//         true\n//     );\n//\n//     parse_tree_iterator = new ParseTreeIterator(\n//         segment_iterator,\n//         tree_depth_iterator\n//     );\n//\n//     let tree: TreeModel = new TreeModel();\n//\n//     let note_root = tree.parse(\n//         {\n//             id: -1, // TODO: hashing scheme for clip id and beat start\n//             note: new n.Note(\n//                 notes_segments[0].model.note.pitch,\n//                 notes_segments[0].model.note.beat_start,\n//                 notes_segments[notes_segments.length - 1].model.note.get_beat_end() - notes_segments[0].model.note.beat_start,\n//                 90,\n//                 0\n//             ),\n//             children: [\n//\n//             ]\n//         }\n//     );\n//\n//     let dim = 16 * 6 * 4;\n//\n//     pwindow = new w.Pwindow(\n//         dim,\n//         dim,\n//         messenger\n//     );\n//\n//     // initialize\n//     parse_tree_iterator.next();\n//\n//     pwindow.set_root(\n//         note_root\n//     );\n//\n//     parse_tree_iterator.next('root');\n//\n//     pwindow.elaborate(\n//         notes_segments,\n//         notes_segments[0].model.note.beat_start,\n//         notes_segments[notes_segments.length - 1].model.note.get_beat_end(),\n//         1\n//     );\n//\n//     for (let i in notes_segments) {\n//         parse_matrix.set_notes(\n//             tree_depth_iterator.get_index_current(),\n//             segment_iterator.get_index_current(),\n//             [notes_segments[Number(i)]]\n//         );\n//         parse_tree_iterator.next();\n//     }\n//\n//     segment_current = segment_iterator.current();\n// };\n//\n// let pause_train = () => {\n//     clip_user_input.stop();\n// };\n//\n// let resume_train = () => {\n//     clip_user_input.fire();\n// };\n//\n// let set_clip_user_input = () => {\n//     let live_api_user_input = new li.LiveApiJs(\n//         'live_set view highlighted_clip_slot clip'\n//     );\n//\n//     // TODO: get notes from segment clip\n//\n//     let key_route = 'clip_user_input';\n//\n//     clip_user_input = new c.Clip(\n//         new c.ClipDao(\n//             live_api_user_input,\n//             new m.Messenger(env, 0),\n//             true,\n//             key_route\n//         )\n//     );\n//\n//     clip_user_input.set_path_deferlow(\n//         'set_path_clip_user_input'\n//     );\n//\n//     let beats_duration_song = 16 * 4;\n//     // logger.log(JSON.stringify(notes_segments));\n//     clip_user_input.remove_notes(\n//         notes_segments[0].model.note.beat_start,\n//         0,\n//         beats_duration_song,\n//         128\n//     );\n//\n//     clip_user_input.set_notes(\n//         notes_segments\n//     );\n// };\n//\n// if (typeof Global !== \"undefined\") {\n//     Global.parse_tree = {};\n//     Global.parse_tree.confirm = confirm;\n//     Global.parse_tree.reset = reset;\n//     Global.parse_tree.erase = erase;\n//     Global.parse_tree.save = save;\n//     Global.parse_tree.load = load;\n//     Global.parse_tree.set_clip_user_input = set_clip_user_input;\n//     Global.parse_tree.set_clip_segment = set_clip_segment;\n//     Global.parse_tree.begin_train = begin_train;\n//     Global.parse_tree.pause_train = pause_train;\n//     Global.parse_tree.resume_train = resume_train;\n//     Global.parse_tree.set_depth_tree = set_depth_tree;\n// }\n"]}