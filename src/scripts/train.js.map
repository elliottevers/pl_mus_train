{"version":3,"file":"train.js","sourceRoot":"","sources":["train.ts"],"names":[],"mappings":"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","sourcesContent":["// import {message as m, message} from \"../message/messenger\";\n// import Messenger = message.Messenger;\n// import {live, live as li} from \"../live/live\";\n// import {clip as c} from \"../clip/clip\";\n// import {window as w} from \"../render/window\";\n// import {note as n} from \"../note/note\";\n// import TreeModel = require(\"tree-model\");\n// import {log} from \"../log/logger\";\n// import {song as s} from \"../song/song\";\n// import {segment} from \"../segment/segment\";\n// import Segment = segment.Segment;\n// import SegmentIterator = segment.SegmentIterator;\n// import {utils} from \"../utils/utils\";\n// import Logger = log.Logger;\n// import LiveClipVirtual = live.LiveClipVirtual;\n// import {parse} from \"../parse/parse\";\n// import TreeDepthIterator = parse.TreeDepthIterator;\n// import ParseTreeIterator = parse.ParseTreeIterator;\n// import ParseMatrix = parse.ParseMatrix;\n//\n// declare let autowatch: any;\n// declare let inlets: any;\n// declare let outlets: any;\n// declare function outlet(n: number, o: any): void;\n// declare function post(message?: any): void;\n//\n// export {}\n//\n// declare let Global: any;\n//\n// let env: string = 'max';\n//\n// if (env === 'max') {\n//     post('recompile successful');\n//     autowatch = 1;\n// }\n//\n// let messenger: Messenger = new Messenger(env, 0);\n//\n// let logger = new Logger(env);\n//\n// let song_dao = new s.SongDao(\n//     new li.LiveApiJs(\"live_set\", env),\n//     new m.Messenger(env, 0, \"song\"),\n//     true\n// );\n//\n// let song: s.Song = new s.Song(song_dao);\n//\n// export let pwindow: w.Pwindow;\n//\n// let elaboration: TreeModel.Node<n.Note>[];\n//\n// let clip_user_input: c.Clip;\n//\n// let clip_segment: c.Clip;\n//\n// let segment_current: Segment;\n//\n// let segment_iterator: SegmentIterator;\n//\n// let tree_depth_iterator: TreeDepthIterator;\n//\n// let parse_tree_iterator: ParseTreeIterator;\n//\n// let layer_parse_tree_current: number;\n//\n// let depth_parse_tree: number;\n//\n// export let parse_matrix: ParseMatrix;\n//\n// let notes_segments: TreeModel.Node<n.Note>[];\n\n// export let wipe_render = (messenger) => {\n//     let msg_clear = [\"clear\"];\n//     msg_clear.unshift('render');\n//     messenger.message(msg_clear);\n// };\n\n// export let render = () => {\n//     pwindow.render();\n// };\n\n// let start_session_train = (parse_matrix) => {\n//     logger.log(JSON.stringify(parse_matrix));\n//     initialize_parse_tree(notes_segments, clip_user_input, song, add_to_tree_export, messenger);\n//     // grow_from_matrix(parse_matrix);\n//     fire_session()\n// };\n\n// export let grow_from_matrix = (parse_matrix) => {\n//     for (let notes of parse_matrix.get_entries()) {\n//         add_to_tree_export(\n//             notes,\n//             parse_matrix.get_note_first_segment().model.note.beat_start,\n//             parse_matrix.get_note_last_segment().model.note.get_beat_end(),\n//             clip_user_input,\n//             song,\n//             messenger\n//         );\n//     }\n// };\n\n// let stop_session = (clip_user_input, song) => {\n//     song.set_overdub(0);\n//\n//     song.set_session_record(0);\n//\n//     clip_user_input.stop();\n// };\n\n// let fire_session = () => {\n//     let interval = segment_current.get_endpoints_loop();\n//\n//     clip_user_input.set_endpoints_loop(\n//         interval[0],\n//         interval[1]\n//     );\n//\n//     song.set_overdub(1);\n//\n//     song.set_session_record(1);\n//\n//     clip_user_input.fire();\n// };\n\n// let load = (filename) => {\n//     start_session_train(\n//         ParseMatrix.load(\n//             filename\n//         )\n//     )\n// };\n//\n// let save = (filename) => {\n//     parse_matrix.save(filename);\n//     stop_session(clip_user_input, song)\n// };\n\n\nlet start = () => {\n    trainer.init();\n};\n\nlet resume = () => {\n    trainer.resume();\n};\n\nlet pause = () => {\n    trainer.pause();\n};\n\n\n\n\n\n// let add_to_tree = (notes, beat_start, beat_end) => {\n//     add_to_tree_export(notes, beat_start, beat_end, clip_user_input, song, messenger)\n// };\n\nexport let add_to_tree_export = (notes, beat_start, beat_end, clip_user_input, song, messenger) => {\n\n    // pwindow.elaborate(\n    //     notes,\n    //     beat_start,\n    //     beat_end,\n    //     tree_depth_iterator.get_index_current()\n    // );\n    //\n    // parse_matrix.set_notes(\n    //     tree_depth_iterator.get_index_current(),\n    //     segment_iterator.get_index_current(),\n    //     notes\n    // );\n\n    // pwindow.render();\n\n    let segment_next = parse_tree_iterator.next();\n\n    let val_segment_next = segment_next.value;\n\n    layer_parse_tree_current = tree_depth_iterator.get_index_current();\n\n    // if (segment_next.done) {\n    //\n    //     stop_session(clip_user_input, song);\n    //\n    //     return\n    // }\n    //\n    // segment_current = val_segment_next;\n    //\n    // let interval = segment_current.get_endpoints_loop();\n    //\n    // clip_user_input.set_endpoints_loop(\n    //     interval[0],\n    //     interval[1]\n    // );\n};\n\n// let confirm = () => {\n//\n//     elaboration = clip_user_input.get_notes(\n//         segment_current.beat_start,\n//         0,\n//         segment_current.beat_end - segment_current.beat_start,\n//         128\n//     );\n//\n//     add_to_tree(\n//         elaboration,\n//         segment_current.beat_start,\n//         segment_current.beat_end\n//     );\n// };\n\nlet reset = () => {\n    trainer.reset_user_input()\n    // clip_user_input.set_notes(\n    //     trainer.get_notes_struct(\n    //         // TODO: some information\n    //     )\n    // );\n};\n\nlet erase = () => {\n    // clip_user_input.remove_notes(\n    //     segment_current.beat_start,\n    //     0,\n    //     segment_current.beat_end - segment_current.beat_start,\n    //     128\n    // );\n};\n\nfunction set_clip_segment() {\n\n    let vector_path_live = Array.prototype.slice.call(arguments);\n\n    let live_api_clip_segment = new li.LiveApiJs(\n        utils.PathLive.to_string(vector_path_live)\n    );\n\n    clip_segment = new c.Clip(\n        new c.ClipDao(\n            live_api_clip_segment,\n            new m.Messenger(env, 0),\n            false\n        )\n    );\n\n    // TODO: in information retreival phase, save the start and end points of the song and retreive them here\n    clip_segment.set_clip_endpoint_lower(\n        1\n    );\n\n    clip_segment.set_clip_endpoint_upper(\n        16 * 4\n    );\n\n    notes_segments = clip_segment.get_notes_within_markers();\n}\n\nlet set_depth_tree = (depth) => {\n    set_depth_tree_export(depth)\n};\n\nexport let set_depth_tree_export = (depth) => {\n    depth_parse_tree = depth;\n};\n\nlet begin_train = () => {\n    initialize_parse_tree(notes_segments, clip_user_input, song, add_to_tree, messenger);\n    fire_session()\n};\n\nexport let initialize_parse_tree = (notes_segments, clip_user_input, song, add_to_tree_export, messenger) => {\n    let segments: Segment[] = [];\n\n    for (let note of notes_segments) {\n        let clip_dao_virtual = new LiveClipVirtual([note]);\n        let clip_segment_virtual = new c.Clip(clip_dao_virtual);\n        segments.push(\n            new Segment(\n                note.model.note.beat_start,\n                note.model.note.get_beat_end(),\n                clip_segment_virtual\n            )\n        )\n    }\n\n    parse_matrix = new ParseMatrix(\n        depth_parse_tree,\n        segments.length\n    );\n\n    segment_iterator = new SegmentIterator(\n        segments,\n        true\n    );\n\n    tree_depth_iterator = new TreeDepthIterator(\n        depth_parse_tree,\n        true\n    );\n\n    parse_tree_iterator = new ParseTreeIterator(\n        segment_iterator,\n        tree_depth_iterator\n    );\n\n    let tree: TreeModel = new TreeModel();\n\n    let note_root = tree.parse(\n        {\n            id: -1, // TODO: hashing scheme for clip id and beat start\n            note: new n.Note(\n                notes_segments[0].model.note.pitch,\n                notes_segments[0].model.note.beat_start,\n                notes_segments[notes_segments.length - 1].model.note.get_beat_end() - notes_segments[0].model.note.beat_start,\n                90,\n                0\n            ),\n            children: [\n\n            ]\n        }\n    );\n\n    let dim = 16 * 6 * 4;\n\n    pwindow = new w.Pwindow(\n        dim,\n        dim,\n        messenger\n    );\n\n    // initialize\n    parse_tree_iterator.next();\n\n    pwindow.set_root(\n        note_root\n    );\n\n    parse_tree_iterator.next('root');\n\n    pwindow.elaborate(\n        notes_segments,\n        notes_segments[0].model.note.beat_start,\n        notes_segments[notes_segments.length - 1].model.note.get_beat_end(),\n        1\n    );\n\n    for (let i in notes_segments) {\n        parse_matrix.set_notes(\n            tree_depth_iterator.get_index_current(),\n            segment_iterator.get_index_current(),\n            [notes_segments[Number(i)]]\n        );\n        parse_tree_iterator.next();\n    }\n\n    segment_current = segment_iterator.current();\n};\n\nlet pause_train = () => {\n    clip_user_input.stop();\n};\n\nlet resume_train = () => {\n    clip_user_input.fire();\n};\n\nlet set_clip_user_input = () => {\n    let live_api_user_input = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot clip'\n    );\n\n    // TODO: get notes from segment clip\n\n    let key_route = 'clip_user_input';\n\n    clip_user_input = new c.Clip(\n        new c.ClipDao(\n            live_api_user_input,\n            new m.Messenger(env, 0),\n            true,\n            key_route\n        )\n    );\n\n    clip_user_input.set_path_deferlow(\n        'set_path_clip_user_input'\n    );\n\n    let beats_duration_song = 16 * 4;\n    // logger.log(JSON.stringify(notes_segments));\n    clip_user_input.remove_notes(\n        notes_segments[0].model.note.beat_start,\n        0,\n        beats_duration_song,\n        128\n    );\n\n    clip_user_input.set_notes(\n        notes_segments\n    );\n};\n\nif (typeof Global !== \"undefined\") {\n    Global.parse_tree = {};\n    Global.parse_tree.confirm = confirm;\n    Global.parse_tree.reset = reset;\n    Global.parse_tree.erase = erase;\n    Global.parse_tree.save = save;\n    Global.parse_tree.load = load;\n    Global.parse_tree.set_clip_user_input = set_clip_user_input;\n    Global.parse_tree.set_clip_segment = set_clip_segment;\n    Global.parse_tree.begin_train = begin_train;\n    Global.parse_tree.pause_train = pause_train;\n    Global.parse_tree.resume_train = resume_train;\n    Global.parse_tree.set_depth_tree = set_depth_tree;\n}\n"]}