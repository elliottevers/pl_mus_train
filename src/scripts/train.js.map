{"version":3,"file":"train.js","sourceRoot":"","sources":["train.ts"],"names":[],"mappings":"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","sourcesContent":["import {message as m, message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {map} from \"../control/map\";\nimport FretMapper = map.FretMapper;\nimport {trainer as tr} from \"../train/trainer\";\nimport Trainer = tr.Trainer;\nimport {freeze, thaw} from \"../serialize/serialize\";\nimport TrainThawer = thaw.TrainThawer;\nimport {algorithm} from \"../train/algorithm\";\nimport Detect = algorithm.Detect;\nimport {live as li, live} from \"../live/live\";\nimport {segment as module_segment} from \"../segment/segment\";\nimport Segment = module_segment.Segment;\nimport {modes_control, modes_texture} from \"../constants/constants\";\nimport INSTRUMENTAL = modes_control.INSTRUMENTAL;\nimport {clip} from \"../clip/clip\";\nimport Clip = clip.Clip;\nimport {user_input} from \"../control/user_input\";\nimport UserInputHandler = user_input.UserInputHandler;\nimport POLYPHONY = modes_texture.POLYPHONY;\nimport TrainFreezer = freeze.TrainFreezer;\nimport {window as w} from \"../render/window\";\nimport MatrixWindow = w.MatrixWindow;\nimport LiveApiJs = live.LiveApiJs;\nimport {log} from \"../log/logger\";\nimport Logger = log.Logger;\nimport MONOPHONY = modes_texture.MONOPHONY;\nimport VOCAL = modes_control.VOCAL;\nimport {utils} from \"../utils/utils\";\nimport DETECT = algorithm.DETECT;\nimport PREDICT = algorithm.PREDICT;\nimport PARSE = algorithm.PARSE;\nimport DERIVE = algorithm.DERIVE;\nimport Predict = algorithm.Predict;\nimport Derive = algorithm.Derive;\nimport Parse = algorithm.Parse;\nimport FREESTYLE = algorithm.FREESTYLE;\nimport {song as sng} from \"../song/song\";\nimport Song = sng.Song;\nimport SongDao = sng.SongDao;\nimport {note as n} from \"../note/note\";\nimport TreeModel = require(\"tree-model\");\nimport {scene} from \"../scene/scene\";\nimport SceneDao = scene.SceneDao;\nimport Scene = scene.Scene;\nimport ClipDao = clip.ClipDao;\nimport {track} from \"../track/track\";\nimport TrackDao = track.TrackDao;\nimport Track = track.Track;\n\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet logger = new Logger(env);\nlet messenger_render = new Messenger(env, 0, 'render');\nlet messenger_monitor_target = new Messenger(env, 0, 'index_track_target');\nlet messenger_num_segments = new Messenger(env, 0, 'num_segments');\nlet mode_texture, mode_control, song, algorithm_train, user_input_handler, window, segments_train, trainer;\nlet track_target: Track, track_user_input: Track;\n\nlet set_mode_texture = (option) => {\n    switch (option) {\n        case POLYPHONY: {\n            mode_texture = option;\n            break;\n        }\n        case MONOPHONY: {\n            mode_texture = option;\n            break;\n        }\n        default: {\n            post('error setting texture')\n        }\n    }\n};\n\nlet set_mode_control = (option) => {\n    switch (option) {\n        case VOCAL: {\n            mode_control = option;\n            break;\n        }\n        case INSTRUMENTAL: {\n            mode_control = option;\n            break;\n        }\n        default: {\n            post('error setting control')\n        }\n    }\n};\n\nlet set_algorithm_train = (option) => {\n\n    user_input_handler = new UserInputHandler(\n        mode_texture,\n        mode_control\n    );\n\n    switch (option) {\n        case FREESTYLE: {\n            // algorithm_train = new Freestyle(\n            //     user_input_handler\n            // );\n            break;\n        }\n        case DETECT: {\n            algorithm_train = new Detect();\n            break;\n        }\n        case PREDICT: {\n            algorithm_train = new Predict();\n            break;\n        }\n        case PARSE: {\n            algorithm_train = new Parse();\n            break;\n        }\n        case DERIVE: {\n            algorithm_train = new Derive();\n            break;\n        }\n        default: {\n            post('error setting algorithm')\n        }\n    }\n\n    window = new MatrixWindow(\n        384,\n        384,\n        messenger_render\n    );\n};\n\nlet set_depth_tree = (depth) => {\n    algorithm_train.set_depth(\n        depth\n    );\n};\n\nlet set_segments = () => {\n\n    // TODO: this assumes the trainer device is on the same track as the segmenter\n    // let notes_segments = get_notes_segments();\n\n    let this_device = new li.LiveApiJs('this_device');\n\n    let this_track = new Track(\n        new TrackDao(\n            new LiveApiJs(\n                utils.cleanse_path(this.get_path())\n            ),\n            new Messenger(env, 0)\n        )\n    );\n\n    let notes_segments = this_track.get_notes();\n\n    let segments = [];\n\n    for (let i_note in notes_segments) {\n        let note = notes_segments[Number(i_note)];\n\n        let path_scene = ['live_set', 'scenes', Number(i_note)].join(' ');\n\n        let segment = new Segment(\n            note\n        );\n\n        segment.set_scene(\n            new Scene(\n                new SceneDao(\n                    new li.LiveApiJs(\n                        path_scene\n                    ),\n                    new Messenger(env, 0),\n                    true,\n                    'scene'\n                )\n            )\n        );\n\n        let path_this_track = utils.get_path_track_from_path_device(\n            utils.cleanse_path(\n                this_device.get_path()\n            )\n        );\n\n        segment.set_clip_user_input_sync(\n            new Clip(\n                new ClipDao(\n                    new LiveApiJs(\n                        path_this_track.split(' ').concat(['clip_slots', i_note, 'clip']).join(' ')\n                    ),\n                    new Messenger(env, 0)\n                )\n            )\n        );\n\n        segment.set_clip_user_input_async(\n            new Clip(\n                new ClipDao(\n                    new LiveApiJs(\n                        path_this_track.split(' ').concat(['clip_slots', i_note, 'clip']).join(' ')\n                    ),\n                    new Messenger(env, 0),\n                    true,\n                    'clip_user_input'\n                )\n            )\n        );\n\n        segments.push(\n            segment\n        )\n\n    }\n\n    messenger_num_segments.message([segments.length]);\n\n    segments_train = segments\n};\n\nlet test = () => {\n\n};\n\n// const _ = require('underscore');\n\n// TODO: send this via bus based on options in radio\nlet set_track_target = () => {\n    // @ts-ignore\n    let list_path_device_target = Array.prototype.slice.call(arguments);\n\n    let path_device_target = utils.cleanse_path(list_path_device_target.join());\n\n    track_target = new Track(\n        new TrackDao(\n            new LiveApiJs(\n                utils.get_path_track_from_path_device(path_device_target)\n            ),\n            new Messenger(env, 0),\n            true,\n            'track_target'\n        )\n    );\n\n    messenger_monitor_target.message([track_target.get_index()])\n};\n\nlet initialize = () => {\n    let this_device = new li.LiveApiJs('this_device');\n\n    let path_this_track = utils.get_path_track_from_path_device(\n        utils.cleanse_path(\n            this_device.get_path()\n        )\n    );\n\n    track_user_input = new Track(\n        new TrackDao(\n            new LiveApiJs(\n                path_this_track\n            ),\n            new Messenger(env, 0),\n            true,\n            'track_user_input'\n        )\n    );\n\n\n    let song = new Song(\n        new SongDao(\n            new LiveApiJs(\n                'live_set'\n            ),\n            new Messenger(env, 0),\n            true,\n            'song'\n        )\n    );\n\n    trainer = new Trainer(\n        window,\n        user_input_handler,\n        algorithm_train,\n        track_target,\n        track_user_input,\n        song,\n        segments_train,\n        new Messenger(env, 0)\n    );\n\n    trainer.render_window();\n};\n\nlet commence = () => {\n    trainer.commence();\n};\n\nlet pause = () => {\n    trainer.pause()\n};\n\nlet resume = () => {\n    trainer.resume()\n};\n\nlet user_input_command = (command: string) => {\n    let logger = new Logger(env);\n\n    // logger.log('user input command....');\n    // TODO: there is literally one character difference between the two algorithms - please abstract\n    switch(algorithm_train.get_name()) {\n        case PARSE: {\n            switch(command) {\n                case 'confirm': {\n                    let notes = trainer.clip_user_input_synchronous.get_notes(\n                        trainer.segment_current.beat_start,\n                        0,\n                        trainer.segment_current.beat_end - trainer.segment_current.beat_start,\n                        128\n                    );\n\n                    trainer.accept_input(notes);\n\n                    break;\n                }\n                case 'reset': {\n                    let coords_current = trainer.iterator_matrix_train.get_coord_current();\n\n                    trainer.clip_user_input.set_notes(\n                        trainer.history_user_input.get(\n                            [coords_current[0] + 1, coords_current[1]]\n                        )\n                    );\n\n                    break;\n                }\n                case 'erase': {\n                    trainer.clip_user_input.remove_notes(\n                        trainer.segment_current.beat_start,\n                        0,\n                        trainer.segment_current.beat_end - trainer.segment_current.beat_start,\n                        128\n                    );\n                    break;\n                }\n                default: {\n                    logger.log('command not recognized')\n                }\n            }\n            break;\n        }\n        case DERIVE: {\n            switch(command) {\n                case 'confirm': {\n                    let notes = trainer.clip_user_input_synchronous.get_notes(\n                        trainer.segment_current.beat_start,\n                        0,\n                        trainer.segment_current.beat_end - trainer.segment_current.beat_start,\n                        128\n                    );\n\n                    trainer.accept_input(notes);\n\n                    break;\n                }\n                case 'reset': {\n                    let coords_current = trainer.iterator_matrix_train.get_coord_current();\n\n                    let notes = trainer.history_user_input.get(\n                        [coords_current[0] - 1, coords_current[1]]\n                    );\n\n                    trainer.clip_user_input.set_notes(\n                        notes\n                    );\n\n                    break;\n                }\n                case 'erase': {\n                    let logger = new Logger(env);\n\n                    logger.log(\n                        JSON.stringify(\n                            trainer.segment_current\n                        )\n                    );\n\n                    trainer.clip_user_input.remove_notes(\n                        trainer.segment_current.beat_start,\n                        0,\n                        trainer.segment_current.beat_end - trainer.segment_current.beat_start,\n                        128\n                    );\n                    break;\n                }\n                default: {\n                    logger.log('command not recognized')\n                }\n            }\n            break;\n        }\n        default: {\n            logger.log('command not supported for this type of algorithm')\n        }\n    }\n};\n\nlet user_input_midi = (pitch: number, velocity: number) => {\n    switch(algorithm_train.get_name()) {\n        case DETECT: {\n            let tree: TreeModel = new TreeModel();\n            let note = tree.parse(\n                {\n                    id: -1,\n                    note: new n.Note(\n                        pitch,\n                        -Infinity,\n                        Infinity,\n                        velocity,\n                        0\n                    ),\n                    children: [\n\n                    ]\n                }\n            );\n            trainer.accept_input(\n                [note]\n            );\n            break;\n        }\n        case PREDICT: {\n            let tree: TreeModel = new TreeModel();\n            let note = tree.parse(\n                {\n                    id: -1,\n                    note: new n.Note(\n                        pitch,\n                        -Infinity,\n                        Infinity,\n                        velocity,\n                        0\n                    ),\n                    children: [\n\n                    ]\n                }\n            );\n            trainer.accept_input(\n                [note]\n            );\n            break;\n        }\n        default: {\n            logger.log('command not supported for this type of algorithm')\n        }\n    }\n};\n\nlet load = () => {\n\n    // TODO: logic to determine, from project folder, name of file\n\n    let freezer = new TrainFreezer(\n        env\n    );\n\n    freezer.freeze(\n        trainer,\n        '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync/tk_music_ts/cache/train_detect.json'\n    );\n};\n\nlet save = () => {\n\n    // TODO: logic to determine, from project folder, name of file\n\n    let config = {\n        'window': window,\n        'user_input_handler': user_input_handler,\n        'trainable': algorithm_train,\n        'track_target': track_target,\n        'track_user_input': track_user_input,\n        'song': song,\n        'segments': segments_train,\n        'messenger': messenger_render,\n        'env': env\n    };\n\n    let thawer = new TrainThawer(\n        env\n    );\n\n    let train_thawed = thawer.thaw(\n        '/Users/elliottevers/Documents/DocumentsSymlinked/git-repos.nosync/tk_music_ts/cache/train_detect.json',\n        config\n    );\n\n    train_thawed.render_window(\n\n    );\n};\n\nif (typeof Global !== \"undefined\") {\n    Global.train = {};\n    Global.train.load = load;\n    Global.train.save = save;\n    Global.train.initialize = initialize;\n    Global.train.commence = commence;\n    Global.train.pause = pause;\n    Global.train.resume = resume;\n    Global.train.user_input_command = user_input_command;\n    Global.train.user_input_midi = user_input_midi;\n    Global.train.set_segments = set_segments;\n    Global.train.set_track_target = set_track_target;\n    Global.train.set_depth_tree = set_depth_tree;\n    Global.train.set_algorithm_train = set_algorithm_train;\n    Global.train.set_mode_control = set_mode_control;\n    Global.train.set_mode_texture = set_mode_texture;\n}\n"]}