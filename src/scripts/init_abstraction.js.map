{"version":3,"file":"init_abstraction.js","sourceRoot":"","sources":["init_abstraction.ts"],"names":[],"mappings":"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","sourcesContent":["import {message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\ndeclare let patcher: any;\n\nlet messenger: Messenger;\n\nlet ran_init_call_receiver = false;\nlet ran_init_call_sender = false;\nlet ran_init_return_sender = false;\nlet ran_init_return_receiver = false;\nlet ran_init_setter = false;\n\nlet init_call_receiver = (index) => {\n    if (ran_init_call_receiver) {\n        return;\n    }\n\n    messenger = new Messenger(env, 0);\n\n    let name = ['call', index];\n    let receiver = patcher.newdefault(100, 100, \"receive\", name.join('.'));\n    let outlet = patcher.getnamed(\"outlet\");\n\n    let resetter = patcher.getnamed('reset');\n    let one_pass_gate = patcher.newdefault(100, 157, \"one_pass_gate\");\n\n    patcher.connect(resetter, 0, one_pass_gate, 1);\n    patcher.connect(receiver, 0, one_pass_gate, 0);\n    patcher.connect(one_pass_gate, 0, outlet, 0);\n\n    ran_init_call_receiver = true;\n};\n\nlet init_call_sender = (name_first, i_first, name_last, i_last) => {\n    if (ran_init_call_sender) {\n        return;\n    }\n\n    messenger = new Messenger(env, 0);\n\n    let indices = Array.apply(null, {length: i_last - i_first + 1}).map(Function.call, Number);\n\n    let pixels_init_left = 100;\n    let pixels_init_top = 300;\n\n    let router = patcher.newdefault(pixels_init_left, pixels_init_top, \"route\", indices);\n\n    let pixels_offset_top = 40;\n    let pixels_offset_left = 150;\n\n    let sender;\n\n    for (let index of indices) {\n        let name = ['call', index];\n        sender = patcher.newdefault(pixels_init_left + (pixels_offset_left * (index)), pixels_init_top + pixels_offset_top, \"send\", name.join('.'));\n        patcher.connect(router, index, sender, 0);\n    }\n\n    let routepass_reset = patcher.getnamed('routepass_reset');\n    patcher.connect(routepass_reset, 1, router, 0);\n\n    ran_init_call_sender = true;\n};\n\nlet init_return_sender = (index) => {\n    if (ran_init_return_sender) {\n        return;\n    }\n\n    let name = ['return', index];\n    let sender = patcher.newdefault(469, 267, \"send\", name.join('.'));\n    let inlet = patcher.getnamed(\"inlet\");\n\n    let resetter = patcher.getnamed('reset');\n    let one_pass_gate = patcher.newdefault(469, 194, \"one_pass_gate\");\n    //\n\n    patcher.connect(inlet, 0, one_pass_gate, 0);\n    patcher.connect(resetter, 0, one_pass_gate, 1);\n    patcher.connect(one_pass_gate, 0, sender, 0);\n    ran_init_return_sender = true;\n};\n\nlet init_return_receiver = (name_first, i_first, name_last, i_last) => {\n    if (ran_init_return_receiver) {\n        return;\n    }\n\n    messenger = new Messenger(env, 0);\n\n    let indices = Array.apply(null, {length: i_last - i_first + 1}).map(Function.call, Number);\n\n    let pixels_init_left = 100;\n    let pixels_init_top = 300;\n\n    let pixels_offset_top = 40;\n    let pixels_offset_left = 150;\n\n    let outlet = patcher.getnamed('outlet');\n\n    let resetter = patcher.getnamed('reset');\n\n    let receiver;\n    let prepender;\n    let one_pass_gate;\n\n    for (let index of indices) {\n        let name = ['return', index];\n        receiver = patcher.newdefault(pixels_init_left + (pixels_offset_left * (index)), pixels_init_top + pixels_offset_top, \"receive\", name.join('.'));\n        one_pass_gate = patcher.newdefault(pixels_init_left + (pixels_offset_left * (index)), pixels_init_top + 2 * pixels_offset_top, \"one_pass_gate\");\n        prepender = patcher.newdefault(pixels_init_left + (pixels_offset_left * (index)), pixels_init_top + 3 * pixels_offset_top, \"prepend\", \"returns\", index);\n        patcher.connect(receiver, 0, one_pass_gate, 0);\n        patcher.connect(one_pass_gate, 0, prepender, 0);\n        patcher.connect(prepender, 0, outlet, 0);\n\n        patcher.connect(resetter, 0, one_pass_gate, 1);\n    }\n\n    ran_init_return_receiver = true;\n};\n\nlet init_setter = (index) => {\n    if (ran_init_setter) {\n        return;\n    }\n\n    let outlet = patcher.getnamed('outlet');\n\n    let call_receiver = patcher.newdefault(361, 308, \"call.receiver\", index);\n    let one_pass_gate_sender = patcher.newdefault(285, 357, \"one_pass_gate\");\n    let one_pass_gate_outlet = patcher.newdefault(361, 460, \"one_pass_gate\");\n    let typecast_bang = patcher.newdefault(238, 398, \"t\", \"b\");\n    let return_sender = patcher.newdefault(180, 453, \"return.sender\", index);\n\n    let resetter = patcher.getnamed(\"reset\");\n\n    patcher.connect(call_receiver, 0, one_pass_gate_outlet, 0);\n    patcher.connect(one_pass_gate_outlet, 0, outlet, 0);\n    patcher.connect(call_receiver, 0, one_pass_gate_sender, 0);\n    patcher.connect(one_pass_gate_sender, 0, typecast_bang, 0);\n    patcher.connect(typecast_bang, 0, return_sender, 0);\n\n    patcher.connect(resetter, 0, one_pass_gate_sender, 1);\n    patcher.connect(resetter, 0, one_pass_gate_outlet, 1);\n\n    ran_init_setter = true;\n};\n\nlet test = () => {\n    init_call_receiver(0);\n    init_call_sender('first', 0, 'last', 3);\n};\n\n// test();\n\nif (typeof Global !== \"undefined\") {\n    Global.init_abstraction = {};\n    Global.init_abstraction.init_call_receiver = init_call_receiver;\n    Global.init_abstraction.init_call_sender = init_call_sender;\n    Global.init_abstraction.init_return_sender = init_return_sender;\n    Global.init_abstraction.init_return_receiver = init_return_receiver;\n    Global.init_abstraction.init_setter = init_setter;\n}\n"]}