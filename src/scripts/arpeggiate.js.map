{"version":3,"file":"arpeggiate.js","sourceRoot":"","sources":["arpeggiate.ts"],"names":[],"mappings":";;AAAA,kDAA2D;AAC3D,IAAO,SAAS,GAAG,mBAAO,CAAC,SAAS,CAAC;AACrC,qCAA8C;AAC9C,qCAA6C;AAC7C,IAAO,SAAS,GAAG,WAAI,CAAC,SAAS,CAAC;AAMlC,4CAAyC;AACzC,IAAO,OAAO,GAAG,iBAAO,CAAC,OAAO,CAAC;AACjC,IAAO,OAAO,GAAG,WAAI,CAAC,OAAO,CAAC;AAC9B,IAAO,IAAI,GAAG,WAAI,CAAC,IAAI,CAAC;AAaxB,IAAI,GAAG,GAAW,KAAK,CAAC;AAExB,IAAI,GAAG,KAAK,KAAK,EAAE;IACf,IAAI,CAAC,sBAAsB,CAAC,CAAC;IAC7B,SAAS,GAAG,CAAC,CAAC;CACjB;AAED,IAAI,gBAAgB,GAAG,EAAE,CAAC;AAC1B,IAAI,iBAAiB,GAAG,EAAE,CAAC;AAC3B,IAAI,MAAM,GAAY,KAAK,CAAC;AAE5B,IAAI,MAAM,GAAG,UAAC,GAAW;IAErB,IAAI,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;IAE9B,IAAI,WAAW,GAAG,IAAI,WAAE,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IAElD,IAAI,gBAAgB,GAAG,WAAW,CAAC,QAAQ,EAAE,CAAC;IAE9C,IAAI,gBAAgB,GAAG,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAEnD,IAAI,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;IAEnD,IAAI,SAAS,GAAG,CAAC,UAAU,EAAE,QAAQ,EAAE,gBAAgB,EAAE,YAAY,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAE5F,IAAI,IAAI,GAAG,IAAI,IAAI,CACf,IAAI,OAAO,CACP,IAAI,SAAS,CACT,SAAS,CACZ,EACD,IAAI,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CACxB,CACJ,CAAC;IAEF,IAAI,CAAC,MAAM,EAAE;QACT,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAC7B,IAAI,CAAC,gBAAgB,EAAE,EACvB,CAAC,EACD,IAAI,CAAC,cAAc,EAAE,EACrB,GAAG,CACN,CAAC;QAEF,IAAI,wBAAwB,GAAG,OAAO,CAAC,UAAU,CAC7C,gBAAgB,CACnB,CAAC;QAEF,KAAkB,UAAwB,EAAxB,qDAAwB,EAAxB,sCAAwB,EAAxB,IAAwB,EAAE;YAAvC,IAAI,KAAK,iCAAA;YACV,gCAAgC;YAChC,qCAAqC;YACrC,iBAAiB,GAAG,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;SACtD;QAED,MAAM,GAAG,IAAI,CAAC;KACjB;IAED,IAAI,UAAU,EAAE;QACZ,IAAI,CAAC,YAAY,CACb,IAAI,CAAC,gBAAgB,EAAE,EACvB,CAAC,EACD,IAAI,CAAC,cAAc,EAAE,EACrB,GAAG,CACN,CAAC;QACF,IAAI,CAAC,SAAS,CACV,iBAAiB,CACpB,CAAA;KACJ;SAAM;QACH,IAAI,CAAC,YAAY,CACb,IAAI,CAAC,gBAAgB,EAAE,EACvB,CAAC,EACD,IAAI,CAAC,cAAc,EAAE,EACrB,GAAG,CACN,CAAC;QACF,IAAI,CAAC,SAAS,CACV,gBAAgB,CACnB,CAAA;KACJ;AACL,CAAC,CAAC;AAEF,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IAC/B,MAAM,CAAC,UAAU,GAAG,EAAE,CAAC;IACvB,MAAM,CAAC,UAAU,CAAC,MAAM,GAAG,MAAM,CAAC;CACrC","sourcesContent":["import {message as m, message} from \"../message/messenger\";\nimport Messenger = message.Messenger;\nimport {live, live as li} from \"../live/live\";\nimport {clip, clip as c} from \"../clip/clip\";\nimport LiveApiJs = live.LiveApiJs;\nimport {log} from \"../log/logger\";\nimport Logger = log.Logger;\nimport {io} from \"../io/io\";\nimport Exporter = io.Exporter;\nimport {utils} from \"../utils/utils\";\nimport {harmony} from \"../music/harmony\";\nimport Harmony = harmony.Harmony;\nimport ClipDao = clip.ClipDao;\nimport Clip = clip.Clip;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\ndeclare let Dict: any;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet notes_polyphonic = [];\nlet notes_arpegiatted = [];\nlet cached: boolean = false;\n\nlet toggle = (val: number) => {\n\n    let arpeggiate = Boolean(val);\n\n    let this_device = new li.LiveApiJs('this_device');\n\n    let path_this_device = this_device.get_path();\n\n    let list_this_device = path_this_device.split(' ');\n\n    let index_this_track = Number(list_this_device[2]);\n\n    let path_clip = ['live_set', 'tracks', index_this_track, 'clip_slots', 0, 'clip'].join(' ');\n\n    let clip = new Clip(\n        new ClipDao(\n            new LiveApiJs(\n                path_clip\n            ),\n            new Messenger(env, 0)\n        )\n    );\n\n    if (!cached) {\n        notes_polyphonic = clip.get_notes(\n            clip.get_start_marker(),\n            0,\n            clip.get_end_marker(),\n            128\n        );\n\n        let groups_notes_arpegiatted = Harmony.arpeggiate(\n            notes_polyphonic\n        );\n\n        for (let group of groups_notes_arpegiatted) {\n            // let logger = new Logger(env);\n            // logger.log(JSON.stringify(group));\n            notes_arpegiatted = notes_arpegiatted.concat(group)\n        }\n\n        cached = true;\n    }\n\n    if (arpeggiate) {\n        clip.remove_notes(\n            clip.get_start_marker(),\n            0,\n            clip.get_end_marker(),\n            128\n        );\n        clip.set_notes(\n            notes_arpegiatted\n        )\n    } else {\n        clip.remove_notes(\n            clip.get_start_marker(),\n            0,\n            clip.get_end_marker(),\n            128\n        );\n        clip.set_notes(\n            notes_polyphonic\n        )\n    }\n};\n\nif (typeof Global !== \"undefined\") {\n    Global.arpeggiate = {};\n    Global.arpeggiate.toggle = toggle;\n}\n"]}