{"version":3,"file":"init_abstraction.js","sourceRoot":"","sources":["init_abstraction.ts"],"names":[],"mappings":"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","sourcesContent":["// import {cli} from \"./cli/cli\";\nimport {message} from \"./message/messenger\";\nimport Messenger = message.Messenger;\n// var _ = require('underscore');\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\ndeclare let patcher: any;\n\n// let script: cli.Script;\n//\nlet messenger: Messenger;\n//\n// let args: cli.Arg[] = [];\n// let options: cli.Option[] = [];\n// let flags: cli.Flag[] = [];\n//\n// let path_interpreter;\n// let path_script;\n\n// let run = () => {\n//     script = new cli.Script(\n//         path_interpreter,\n//         path_script,\n//         flags,\n//         options,\n//         args,\n//         messenger,\n//         true\n//     );\n//     script.run()\n// };\n//\n// let set_arg = (name_arg, val_arg) => {\n//     if (_.contains(args.map((arg) => {return arg.name}), name_arg)) {\n//         let arg_existing = args.filter(arg => arg.name === name_arg)[0];\n//         arg_existing.set(val_arg);\n//     } else {\n//         let arg = new cli.Arg(name_arg);\n//         arg.set(val_arg);\n//         args.push(arg);\n//     }\n// };\n//\n// let set_flag = (name_flag, val_flag) => {\n//     if (_.contains(flags.map((flag) => {return flag.name}), name_flag)) {\n//         let flag_existing = flags.filter(flag => flag.name === name_flag)[0];\n//         flag_existing.set(val_flag);\n//     } else {\n//         let flag = new cli.Flag(name_flag);\n//         flag.set(val_flag);\n//         flags.push(flag);\n//     }\n// };\n//\n// let set_option = (name_opt, val_opt) => {\n//     if (_.contains(options.map((opt) => {return opt.name}), name_opt)) {\n//         let opt_existing = options.filter(opt => opt.name === name_opt)[0];\n//         opt_existing.set(val_opt);\n//     } else {\n//         let opt = new cli.Option(name_opt);\n//         opt.set(val_opt);\n//         options.push(opt);\n//     }\n// };\n//\n// let set_interpreter = (path) => {\n//     path_interpreter = path;\n// };\n//\n// let set_script = (path) => {\n//     path_script = path;\n// };\n\nlet init_call_receiver = (index) => {\n// let init = (id, index) => {\n    messenger = new Messenger(env, 0);\n    // let name = [id, index, '#0'];\n    // let name = [id, index];\n    let name = ['call', index];\n    let receiver = patcher.newdefault(100, 100, \"receive\", name.join('.'));\n    let outlet = patcher.getnamed(\"outlet\");\n    patcher.connect(receiver, 0, outlet, 0);\n    // receiver.connect()\n    // messenger.message(['script', 'newobject', 'newobj', '@text', name_object])\n};\n\nlet init_call_sender = (name_first, i_first, name_last, i_last) => {\n\n    messenger = new Messenger(env, 0);\n    // let name = [id, index, '#0'];\n    // let name = [id, index];\n    // let name = ['position', index];\n    let indices = Array.apply(null, {length: i_last - i_first + 1}).map(Function.call, Number);\n\n    let pixels_init_left = 100;\n    let pixels_init_top = 300;\n\n    let router = patcher.newdefault(pixels_init_left, pixels_init_top, \"route\", indices);\n\n    let pixels_offset_top = 40;\n    let pixels_offset_left = 150;\n\n    let sender;\n\n    for (let index of indices) {\n        let name = ['call', index];\n        sender = patcher.newdefault(pixels_init_left + (pixels_offset_left * (index)), pixels_init_top + pixels_offset_top, \"send\", name.join('.'));\n        patcher.connect(router, index, sender, 0);\n    }\n\n    let inlet = patcher.getnamed('inlet');\n    patcher.connect(inlet, 0, router, 0);\n};\n\nlet init_return_sender = (index) => {\n\n    let name = ['return', index];\n    let receiver = patcher.newdefault(100, 100, \"send\", name.join('.'));\n    let inlet = patcher.getnamed(\"inlet\");\n    patcher.connect(inlet, 0, receiver, 0);\n\n    // messenger = new Messenger(env, 0);\n    // // let name = [id, index, '#0'];\n    // // let name = [id, index];\n    // // let name = ['position', index];\n    // let indices = Array.apply(null, {length: i_last - i_first + 1}).map(Function.call, Number);\n    //\n    // let pixels_init_left = 100;\n    // let pixels_init_top = 300;\n    //\n    // let router = patcher.newdefault(pixels_init_left, pixels_init_top, \"route\", indices);\n    //\n    // let pixels_offset_top = 40;\n    // let pixels_offset_left = 150;\n    //\n    // let sender;\n    //\n    // for (let index of indices) {\n    //     let name = ['position', index + 1];\n    //     sender = patcher.newdefault(pixels_init_left + (pixels_offset_left * (index + 1)), pixels_init_top + pixels_offset_top, \"send\", name.join('.'));\n    //     patcher.connect(router, index, sender, 0);\n    // }\n    //\n    // let inlet = patcher.getnamed('inlet');\n    // patcher.connect(inlet, 0, router, 0);\n};\n\nlet init_return_receiver = (name_first, i_first, name_last, i_last) => {\n    messenger = new Messenger(env, 0);\n    // let name = [id, index, '#0'];\n    // let name = [id, index];\n    // let name = ['position', index];\n    let indices = Array.apply(null, {length: i_last - i_first + 1}).map(Function.call, Number);\n\n    let pixels_init_left = 100;\n    let pixels_init_top = 300;\n\n    // let router = patcher.newdefault(pixels_init_left, pixels_init_top, \"route\", indices);\n\n    let pixels_offset_top = 40;\n    let pixels_offset_left = 150;\n\n    let outlet = patcher.getnamed('outlet');\n    // patcher.connect(outlet, 0, router, 0);\n\n    let receiver;\n\n    let prepender;\n\n    for (let index of indices) {\n        let name = ['return', index];\n        receiver = patcher.newdefault(pixels_init_left + (pixels_offset_left * (index)), pixels_init_top + pixels_offset_top, \"receive\", name.join('.'));\n        prepender = patcher.newdefault(pixels_init_left + (pixels_offset_left * (index)), pixels_init_top + 2 * pixels_offset_top, \"prepend\", \"returns\", index);\n        patcher.connect(receiver, 0, prepender, 0);\n        patcher.connect(prepender, 0, outlet, 0);\n    }\n};\n\nlet test = () => {\n    init_call_receiver(0);\n    init_call_sender('first', 0, 'last', 3);\n};\n\n// test();\n\nif (typeof Global !== \"undefined\") {\n    Global.init_abstraction = {};\n    Global.init_abstraction.init_call_receiver = init_call_receiver;\n    Global.init_abstraction.init_call_sender = init_call_sender;\n    Global.init_abstraction.init_return_sender = init_return_sender;\n    Global.init_abstraction.init_return_receiver = init_return_receiver;\n}\n"]}