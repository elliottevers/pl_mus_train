{"version":3,"file":"init_abstraction.js","sourceRoot":"","sources":["init_abstraction.ts"],"names":[],"mappings":"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","sourcesContent":["import {message} from \"./message/messenger\";\nimport Messenger = message.Messenger;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\ndeclare let patcher: any;\n\nlet messenger: Messenger;\n\nlet init_call_receiver = (index) => {\n// let init = (id, index) => {\n    messenger = new Messenger(env, 0);\n    // let name = [id, index, '#0'];\n    // let name = [id, index];\n    let name = ['call', index];\n    let receiver = patcher.newdefault(100, 100, \"receive\", name.join('.'));\n    let outlet = patcher.getnamed(\"outlet\");\n    patcher.connect(receiver, 0, outlet, 0);\n    // messenger.message(['script', 'newobject', 'newobj', '@text', name_object])\n};\n\nlet init_call_sender = (name_first, i_first, name_last, i_last) => {\n\n    messenger = new Messenger(env, 0);\n    // let name = [id, index, '#0'];\n    // let name = [id, index];\n    // let name = ['position', index];\n    let indices = Array.apply(null, {length: i_last - i_first + 1}).map(Function.call, Number);\n\n    let pixels_init_left = 100;\n    let pixels_init_top = 300;\n\n    let router = patcher.newdefault(pixels_init_left, pixels_init_top, \"route\", indices);\n\n    let pixels_offset_top = 40;\n    let pixels_offset_left = 150;\n\n    let sender;\n\n    for (let index of indices) {\n        let name = ['call', index];\n        sender = patcher.newdefault(pixels_init_left + (pixels_offset_left * (index)), pixels_init_top + pixels_offset_top, \"send\", name.join('.'));\n        patcher.connect(router, index, sender, 0);\n    }\n\n    let inlet = patcher.getnamed('inlet');\n    patcher.connect(inlet, 0, router, 0);\n};\n\nlet init_return_sender = (index) => {\n\n    let name = ['return', index];\n    let receiver = patcher.newdefault(100, 100, \"send\", name.join('.'));\n    let inlet = patcher.getnamed(\"inlet\");\n    patcher.connect(inlet, 0, receiver, 0);\n};\n\nlet init_return_receiver = (name_first, i_first, name_last, i_last) => {\n    messenger = new Messenger(env, 0);\n    // let name = [id, index, '#0'];\n    // let name = [id, index];\n    // let name = ['position', index];\n    let indices = Array.apply(null, {length: i_last - i_first + 1}).map(Function.call, Number);\n\n    let pixels_init_left = 100;\n    let pixels_init_top = 300;\n\n    let pixels_offset_top = 40;\n    let pixels_offset_left = 150;\n\n    let outlet = patcher.getnamed('outlet');\n\n    let receiver;\n    let prepender;\n\n    for (let index of indices) {\n        let name = ['return', index];\n        receiver = patcher.newdefault(pixels_init_left + (pixels_offset_left * (index)), pixels_init_top + pixels_offset_top, \"receive\", name.join('.'));\n        prepender = patcher.newdefault(pixels_init_left + (pixels_offset_left * (index)), pixels_init_top + 2 * pixels_offset_top, \"prepend\", \"returns\", index);\n        patcher.connect(receiver, 0, prepender, 0);\n        patcher.connect(prepender, 0, outlet, 0);\n    }\n};\n\nlet init_setter = (index) => {\n\n    // let name = ['return', index];\n    // let receiver = patcher.newdefault(100, 100, \"send\", name.join('.'));\n    // let inlet = patcher.getnamed(\"inlet\");\n    // patcher.connect(inlet, 0, receiver, 0);\n\n\n\n    messenger = new Messenger(env, 0);\n    // let name = [id, index, '#0'];\n    // let name = [id, index];\n    // let name = ['position', index];\n    // let indices = Array.apply(null, {length: i_last - i_first + 1}).map(Function.call, Number);\n\n    // let pixels_init_left = 100;\n    // let pixels_init_top = 300;\n    //\n    // let pixels_offset_top = 40;\n    // let pixels_offset_left = 150;\n\n    let outlet = patcher.getnamed('outlet');\n    let call_receiver = patcher.newdefault(361, 308, \"call.receiver\", index);\n    let return_sender = patcher.newdefault(249, 414, \"return.sender\", index);\n    let typecast_bang = patcher.newdefault(307, 359, \"t\", \"b\");\n\n    patcher.connect(call_receiver, 0, outlet, 0);\n    patcher.connect(call_receiver, 0, typecast_bang, 0);\n    patcher.connect(typecast_bang, 0, return_sender, 0);\n\n    // let receiver;\n    // let prepender;\n    //\n    // for (let index of indices) {\n    //     let name = ['return', index];\n    //     receiver = patcher.newdefault(pixels_init_left + (pixels_offset_left * (index)), pixels_init_top + pixels_offset_top, \"receive\", name.join('.'));\n    //     prepender = patcher.newdefault(pixels_init_left + (pixels_offset_left * (index)), pixels_init_top + 2 * pixels_offset_top, \"prepend\", \"returns\", index);\n    //     patcher.connect(receiver, 0, prepender, 0);\n    //     patcher.connect(prepender, 0, outlet, 0);\n    // }\n};\n\nlet test = () => {\n    init_call_receiver(0);\n    init_call_sender('first', 0, 'last', 3);\n};\n\n// test();\n\nif (typeof Global !== \"undefined\") {\n    Global.init_abstraction = {};\n    Global.init_abstraction.init_call_receiver = init_call_receiver;\n    Global.init_abstraction.init_call_sender = init_call_sender;\n    Global.init_abstraction.init_return_sender = init_return_sender;\n    Global.init_abstraction.init_return_receiver = init_return_receiver;\n    Global.init_abstraction.init_setter = init_setter;\n}\n"]}