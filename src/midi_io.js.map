{"version":3,"file":"midi_io.js","sourceRoot":"","sources":["midi_io.ts"],"names":[],"mappings":";;AAAA,iDAA0D;AAC1D,IAAO,SAAS,GAAG,mBAAO,CAAC,SAAS,CAAC;AACrC,oCAA6C;AAC7C,oCAAsC;AAgBtC,IAAI,GAAG,GAAW,KAAK,CAAC;AAExB,IAAI,GAAG,KAAK,KAAK,EAAE;IACf,IAAI,CAAC,sBAAsB,CAAC,CAAC;IAC7B,SAAS,GAAG,CAAC,CAAC;CACjB;AAED,IAAI,QAAQ,GAAG,UAAC,QAAQ;IACpB,IAAI,WAAW,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;IAE1C,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAElC,IAAI,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IAE7C,IAAI,QAAQ,GAAc,IAAI,WAAE,CAAC,SAAS,CACtC,0CAA0C,CAC7C,CAAC;IAEF,IAAI,IAAI,GAAG,IAAI,WAAC,CAAC,IAAI,CACjB,IAAI,WAAC,CAAC,OAAO,CACT,QAAQ,EACR,IAAI,mBAAC,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,EACvB,KAAK,CACR,CACJ,CAAC;IAEF,IAAI,YAAY,GAAG,WAAC,CAAC,IAAI,CAAC,mBAAmB,CACzC,KAAK,CACR,CAAC;IAEF,IAAI,CAAC,SAAS,CACV,YAAY,CACf,CAAC;AACN,CAAC,CAAC;AAGF,IAAI,WAAW,GAAG,UAAC,QAAQ;IACvB,IAAI,WAAW,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;IAE1C,IAAI,QAAmB,CAAC;IAExB,QAAQ,GAAG,IAAI,WAAE,CAAC,SAAS,CACvB,0CAA0C,CAC7C,CAAC;IAEF,IAAI,IAAI,GAAG,IAAI,WAAC,CAAC,IAAI,CACjB,IAAI,WAAC,CAAC,OAAO,CACT,QAAQ,EACR,IAAI,mBAAC,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,EACvB,KAAK,CACR,CACJ,CAAC;IAEF,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;IAEzC,4BAA4B;IAE5B,IAAI,IAAI,GAAG,EAAE,CAAC;IAEd,WAAW,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;IAEzC,IAAI,CAAC,IAAI,CACL,CAAC,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAC/C,CAAC;IAEF,KAAK,IAAI,MAAM,IAAI,KAAK,EAAE;QACtB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;KAChD;IAED,IAAI,CAAC,IAAI,CACL,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAC9B,CAAC;IAEF,WAAW,CAAC,GAAG,OAAf,WAAW,GAAK,eAAe,SAAK,IAAI,GAAE;IAE1C,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAElC,IAAI,SAAS,GAAG,IAAI,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IAEtC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAA;AACjC,CAAC,CAAC;AAGF,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IAC/B,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;IACpB,MAAM,CAAC,OAAO,CAAC,WAAW,GAAG,WAAW,CAAC;IACzC,MAAM,CAAC,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;CACtC","sourcesContent":["import {message as m, message} from \"./message/messenger\";\nimport Messenger = message.Messenger;\nimport {live, live as li} from \"./live/live\";\nimport {clip as c} from \"./clip/clip\";\nimport LiveApiJs = live.LiveApiJs;\nimport {log} from \"./log/logger\";\nimport Logger = log.Logger;\n\ndeclare let autowatch: any;\ndeclare let inlets: any;\ndeclare let outlets: any;\ndeclare function outlet(n: number, o: any): void;\ndeclare function post(message?: any): void;\ndeclare let Dict: any;\n\nexport {}\n\ndeclare let Global: any;\n\nlet env: string = 'max';\n\nif (env === 'max') {\n    post('recompile successful');\n    autowatch = 1;\n}\n\nlet set_midi = (filepath) => {\n    let dict_import = new Dict(\"dict_import\");\n\n    dict_import.import_json(filepath);\n\n    let notes = dict_import.get('melody::notes');\n\n    let live_api: LiveApiJs = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot clip'\n    );\n\n    let clip = new c.Clip(\n        new c.ClipDao(\n            live_api,\n            new m.Messenger(env, 0),\n            false\n        )\n    );\n\n    let notes_parsed = c.Clip.parse_note_messages(\n        notes\n    );\n\n    clip.set_notes(\n        notes_parsed\n    );\n};\n\n\nlet export_midi = (filepath) => {\n    let dict_export = new Dict(\"dict_export\");\n\n    let live_api: LiveApiJs;\n\n    live_api = new li.LiveApiJs(\n        'live_set view highlighted_clip_slot clip'\n    );\n\n    let clip = new c.Clip(\n        new c.ClipDao(\n            live_api,\n            new m.Messenger(env, 0),\n            false\n        )\n    );\n\n    let notes = clip.get_notes(0, 0, 8, 128);\n\n    // let name_part = 'melody';\n\n    let reps = [];\n\n    dict_export.replace(\"melody::notes\", \"\");\n\n    reps.push(\n        ['notes', notes.length.toString()].join(' ')\n    );\n\n    for (let i_note in notes) {\n        reps.push(notes[i_note].model.note.encode());\n    }\n\n    reps.push(\n        ['notes', 'done'].join(' ')\n    );\n\n    dict_export.set(\"melody::notes\", ...reps);\n\n    dict_export.export_json(filepath);\n\n    let messenger = new Messenger(env, 0);\n\n    messenger.message([filepath])\n};\n\n\nif (typeof Global !== \"undefined\") {\n    Global.midi_io = {};\n    Global.midi_io.export_midi = export_midi;\n    Global.midi_io.set_midi = set_midi;\n}\n"]}