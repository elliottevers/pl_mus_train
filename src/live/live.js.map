{"version":3,"file":"live.js","sourceRoot":"","sources":["live.ts"],"names":[],"mappings":"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","sourcesContent":["import TreeModel = require(\"tree-model\");\nimport {note as n} from \"../note/note\"\nimport {clip} from \"../clip/clip\";\n\ndeclare let LiveAPI: any;\n\nexport namespace live {\n\n    import Clip = clip.Clip;\n\n    export interface iLiveApiJs {\n        get(property: string): any;\n        set(property: string, value: any): void;\n        call(func: string): void;\n    }\n\n    export interface ClipLive {\n\n        get_end_marker(): number\n\n        get_start_marker(): number\n\n        set_loop_bracket_lower(beat: number): void\n\n        set_loop_bracket_upper(beat: number): void\n\n        set_clip_endpoint_lower(beat: number): void\n\n        set_clip_endpoint_upper(beat: number): void\n\n        fire(): void\n\n        stop(): void\n\n        get_notes(beat_start, pitch_midi_min, beat_end, pitch_midi_max): string[]\n\n        remove_notes(beat_start, pitch_midi_min, beat_end, pitch_midi_max): void\n    }\n\n    export class LiveApiJs implements iLiveApiJs {\n        private live_api: any;\n\n        constructor(path: string, env?: string) {\n            if (env == 'node') {\n\n            } else {\n                this.live_api = new LiveAPI(null, path);\n            }\n        }\n\n        get(property: string): any {\n            return this.live_api.get(property)\n        }\n\n        set(property: string, value: any): void {\n            this.live_api.set(property, value)\n        }\n\n        call(func: string, ...args: any[]): any {\n            return this.live_api.call(func, ...args);\n        }\n\n        get_id(): any {\n            return this.live_api.id;\n        }\n\n        get_path(): string {\n            return this.live_api.path;\n        }\n\n        get_children(): any {\n            return this.live_api.children;\n        }\n    }\n\n    export class LiveClipVirtual implements ClipLive {\n\n        beat_start: number;\n        beat_end: number;\n\n        notes: TreeModel.Node<n.Note>[];\n\n        constructor(notes: TreeModel.Node<n.Note>[]) {\n            this.notes = notes;\n        }\n\n        // load_notes_within_loop_brackets(): void {\n        //     this.notes = this.get_notes(\n        //         this.get_loop_bracket_lower(),\n        //         0,\n        //         this.get_loop_bracket_upper(),\n        //         128\n        //     )\n        // }\n\n        append(note) {\n            this.notes.push(note);\n        }\n\n        get_ambitus(): number[] {\n            return []\n        }\n\n        load_notes_within_loop_brackets(): void {\n            this.notes = Clip._parse_notes(\n                this.get_notes(\n                    this.get_loop_bracket_lower(),\n                    0,\n                    this.get_loop_bracket_upper(),\n                    128\n                )\n            )\n        }\n\n        get_notes_within_loop_brackets(): TreeModel.Node<n.Note>[] {\n            // if (!this.notes) {\n            this.load_notes_within_loop_brackets();\n            // }\n            return this.notes;\n        }\n\n        get_pitch_max(): number {\n            let pitch_max = 0;\n\n            for (let node of this.get_notes_within_loop_brackets()) {\n                if (node.model.note.pitch > pitch_max) {\n                    pitch_max = node.model.note.pitch;\n                }\n            }\n\n            return pitch_max;\n        }\n\n        get_end_marker(): number {\n            return this.beat_end\n            // return this.notes[this.notes.length - 1].model.note.get_beat_end()\n        }\n\n        get_start_marker(): number {\n            return this.beat_start\n            // return this.notes[0].model.note.beat_start;\n        }\n\n        get_loop_bracket_upper(): number[] {\n            return [this.beat_end]\n            // return this.notes[this.notes.length - 1].model.note.get_beat_end()\n        }\n\n        get_loop_bracket_lower(): number[] {\n            return [this.beat_start]\n            // return this.notes[0].model.note.beat_start;\n        }\n\n        set_loop_bracket_lower(beat: number): void {\n            return\n        }\n\n        set_loop_bracket_upper(beat: number): void {\n            return\n        }\n\n        set_clip_endpoint_lower(beat: number): void {\n            return\n        }\n\n        set_clip_endpoint_upper(beat: number): void {\n            return\n        }\n\n        fire(): void {\n            return\n        }\n\n        stop(): void {\n            return\n        }\n\n        set_notes(notes: TreeModel.Node<n.Note>[]): void {\n            for (let note of notes) {\n                this.notes.push(note)\n            }\n        }\n\n        get_notes(beat_start, pitch_midi_min, beats_duration, pitch_midi_max): string[] {\n            let prefix, notes, suffix;\n            prefix = [\"notes\", this.notes.length.toString()];\n            notes = [];\n            for (let node of this.notes.filter(node => beat_start <= node.model.note.beat_start && node.model.note.beat_start < beat_start + beats_duration)) {\n                notes.push(\"note\");\n                notes.push(node.model.note.pitch.toString());\n                notes.push(node.model.note.beat_start.toString());\n                notes.push(node.model.note.beats_duration.toString());\n                notes.push(node.model.note.velocity.toString());\n                notes.push(node.model.note.muted.toString());\n            }\n            suffix = [\"done\"];\n            return prefix.concat(notes).concat(suffix)\n        }\n\n        remove_notes(beat_start, pitch_midi_min, beat_end, pitch_midi_max): void {\n            return\n        }\n    }\n\n}"]}