{"version":3,"file":"file.js","sourceRoot":"","sources":["file.ts"],"names":[],"mappings":"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","sourcesContent":["export namespace file {\n\n    export let to_json = (string_json, filename: string, env: string) => {\n        // console.log(env);\n        switch (env) {\n            case 'node_for_max': {\n                console.log('writing json');\n                let fs = require(\"fs\");\n\n                fs.writeFileSync(filename, JSON.stringify(string_json), 'utf8', (err, data) => {\n                    if (err) {\n                        console.log('error writing json')\n                    }\n                });\n\n                break;\n            }\n            case 'node': {\n                console.log('writing json');\n                let fs = require(\"fs\");\n\n                fs.writeFileSync(filename, JSON.stringify(string_json), 'utf8', (err, data) => {\n                    if (err) {\n                        console.log('error writing json')\n                    }\n                });\n\n                break;\n            }\n            case 'max': {\n                let f = new File(filename,\"write\",\"JSON\");\n\n                if (f.isopen) {\n                    post(\"saving session\");\n                    f.writestring(JSON.stringify(string_json));\n                    f.close();\n                } else {\n                    post(\"could not save session\");\n                }\n                break;\n            }\n            default: {\n                throw ['environment', env, 'not supported'].join(' ')\n            }\n        }\n    };\n\n    export let from_json = (filepath: string, env: string) => {\n        let matrix_deserialized;\n\n        switch (env) {\n            case 'node_for_max': {\n                console.log('reading json');\n                let fs = require(\"fs\");\n                // TODO: fix in node_for_max\n                matrix_deserialized = JSON.parse(fs.readFileSync(filepath, 'utf8', (err, data) => {\n                    if (err) {\n                        console.log(err)\n                    }\n                }));\n                break;\n            }\n            case 'node': {\n                console.log('reading json');\n                let fs = require(\"fs\");\n                // TODO: fix in node_for_max\n                matrix_deserialized = JSON.parse(fs.readFileSync(filepath, 'utf8', (err, data) => {\n                    if (err) {\n                        console.log(err)\n                    }\n                }));\n                break;\n            }\n            case 'max': {\n                let f = new File(filepath, \"read\",\"JSON\");\n                let a;\n\n                if (f.isopen) {\n                    post(\"reading json\");\n                    //@ts-ignore\n                    while ((a = f.readline()) != null) {\n                        matrix_deserialized = JSON.parse(a) as any;\n                    }\n                    f.close();\n                } else {\n                    post(\"could not open file\");\n                }\n                break;\n            }\n            default: {\n                throw 'error in from_json'\n            }\n\n        }\n\n        return matrix_deserialized\n    }\n}"]}