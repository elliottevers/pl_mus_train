{"version":3,"file":"file.js","sourceRoot":"","sources":["file.ts"],"names":[],"mappings":"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","sourcesContent":["import {log} from \"../log/logger\";\n\ndeclare let Dict: any;\n\nexport namespace file {\n\n    import Logger = log.Logger;\n    export let to_json = (string_json, filename: string, env: string) => {\n        switch (env) {\n            case 'node_for_max': {\n                console.log('writing json');\n                let fs = require(\"fs\");\n\n                fs.writeFileSync(filename, JSON.stringify(string_json), 'utf8', (err, data) => {\n                    if (err) {\n                        console.log('error writing json')\n                    }\n                });\n\n                break;\n            }\n            case 'node': {\n                console.log('writing json');\n                let fs = require(\"fs\");\n\n                fs.writeFileSync(filename, JSON.stringify(string_json), 'utf8', (err, data) => {\n                    if (err) {\n                        console.log('error writing json')\n                    }\n                });\n\n                break;\n            }\n            case 'max': {\n                let f = new File(filename,\"write\",\"JSON\");\n\n                if (f.isopen) {\n                    post(\"writing json\");\n                    f.writestring(JSON.stringify(string_json));\n                    f.close();\n                } else {\n                    post(\"could not save session\");\n                }\n                break;\n            }\n            default: {\n                throw ['environment', env, 'not supported'].join(' ')\n            }\n        }\n    };\n\n    export let from_json = (filepath: string, env: string) => {\n        let matrix_deserialized = [];\n\n        switch (env) {\n            case 'node_for_max': {\n                console.log('reading json');\n                let fs = require(\"fs\");\n                // TODO: fix in node_for_max\n                matrix_deserialized = JSON.parse(fs.readFileSync(filepath, 'utf8', (err, data) => {\n                    if (err) {\n                        console.log(err)\n                    }\n                }));\n                break;\n            }\n            case 'node': {\n                console.log('reading json');\n                let fs = require(\"fs\");\n                // TODO: fix in node_for_max\n                matrix_deserialized = JSON.parse(fs.readFileSync(filepath, 'utf8', (err, data) => {\n                    if (err) {\n                        console.log(err)\n                    }\n                }));\n                break;\n            }\n            case 'max': {\n                let dict = new Dict();\n\n                dict.import_json(filepath);\n\n                // NB: using \"of\" looks wrong but it isn't\n                for (let i_row of dict.get(\"history_user_input\").getkeys()) {\n                    matrix_deserialized.push([]);\n                    let col = dict.get([\"history_user_input\", i_row].join('::'));\n                    for (let i_col of col.getkeys()) {\n                        matrix_deserialized[Number(i_row)].push([]);\n                        matrix_deserialized[Number(i_row)][Number(i_col)] = dict.get(\n                            [\"history_user_input\", i_row, i_col].join('::')\n                        )\n                    }\n                }\n\n                break;\n            }\n            default: {\n                throw 'error in from_json'\n            }\n\n        }\n\n        return matrix_deserialized\n    }\n}"]}