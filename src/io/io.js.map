{"version":3,"file":"io.js","sourceRoot":"","sources":["io.ts"],"names":[],"mappings":"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","sourcesContent":["// let exporter = new io.Exporter(\n//     filepath='slkdfjlsdkfjldkf'\n// );\n//\n// exporter.setNotes(\n//     notes=notes,\n//     name_part='melody'\n// );\n//\n// exporter.setNotes(\n//     notes=notes,\n//     name_part='chords'\n// );\n//\n// exporter.setNotes(\n//     notes=notes,\n//     name_part='bass'\n// );\n//\n// exporter.setTempo(\n//     bpm=bpm\n// );\n//\n// exporter.setLengthTrack(\n//     beats=beats\n// );\n\n\n\n// import {note as n} from \"../note/note\";\n// import TreeModel = require(\"tree-model\");\n// import {live} from \"../live/live\";\n// import {message} from \"../message/messenger\";\n\nimport {clip as c} from \"../clip/clip\";\nimport {note as n} from \"../note/note\";\nimport TreeModel = require(\"tree-model\");\n\nexport namespace io {\n\n    declare let Dict: any;\n\n    export class Exporter {\n\n        public filepath_export: string;\n\n        private dict: any;\n\n        private clips: object;\n\n        private tempo: number;\n\n        private length_beats: number;\n\n        constructor(filepath_export, name_dict?:string) {\n            this.filepath_export = filepath_export;\n            this.dict = new Dict(name_dict);\n        }\n\n        public set_notes(id_clip: number, notes, name_part: string): void {\n            let clip = {};\n            clip['notes'] = notes;\n            clip['part'] = name_part;\n            this.clips[id_clip] = clip;\n        }\n\n        public unset_notes(id_clip: number, name_part: string): void {\n            this.clips[id_clip] = null;\n        }\n\n        public set_tempo(bpm: number) {\n            this.tempo = bpm;\n        }\n\n        public set_length(beats: number) {\n            this.length_beats = beats;\n        }\n\n        public static get_messages(notes) {\n            let messages = [];\n\n            messages.push(\n                ['notes', notes.length.toString()].join(' ')\n            );\n\n            for (let i_note in notes) {\n                messages.push(notes[i_note].model.note.encode());\n            }\n\n            messages.push(\n                ['notes', 'done'].join(' ')\n            );\n\n            return messages\n        }\n\n        public export_clips(partnames): void {\n            for (let id_clip in this.clips) {\n                let clip = this.clips[id_clip];\n                let name_part = clip['part'];\n                if (partnames.indexOf(name_part) !== -1) {\n                    let key = [name_part, 'notes'].join('::');\n                    this.dict.replace(\"melody::notes\", \"\");\n                    this.dict.set(key, ...Exporter.get_messages(clip['notes']));\n                    // TODO: tempo\n                    // TODO: length of song in beats\n                }\n            }\n        }\n    }\n\n    export class Importer {\n\n        public filepath_import: string;\n\n        private dict: any;\n\n        constructor(filepath_import, name_dict?:string) {\n            this.filepath_import = filepath_import;\n            this.dict = new Dict(name_dict);\n        }\n\n        public import() {\n            this.dict.import_json(this.filepath_import);\n        }\n\n        public get_notes(name_part): TreeModel.Node<n.Note>[] {\n            let key = [name_part, 'notes'].join('::');\n            return c.Clip.parse_note_messages(\n                this.dict.get(key)\n            )\n        }\n    }\n}"]}